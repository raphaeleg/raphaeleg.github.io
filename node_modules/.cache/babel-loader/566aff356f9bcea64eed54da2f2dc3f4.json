{"ast":null,"code":"import * as React from \"react\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction traverseFiber(fiber, ascending, selector) {\n  if (!fiber) return;\n  if (selector(fiber) === true) return fiber;\n  let child = ascending ? fiber.return : fiber.child;\n\n  while (child) {\n    const match = traverseFiber(child, ascending, selector);\n    if (match) return match;\n    child = ascending ? null : child.sibling;\n  }\n}\n\nfunction wrapContext(context) {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get() {\n          return null;\n        },\n\n        set() {}\n\n      },\n      _currentRenderer2: {\n        get() {\n          return null;\n        },\n\n        set() {}\n\n      }\n    });\n  } catch (_) {\n    return context;\n  }\n}\n\nconst FiberContext = wrapContext(React.createContext(null));\n\nclass FiberProvider extends React.Component {\n  render() {\n    return /* @__PURE__ */React.createElement(FiberContext.Provider, {\n      value: this._reactInternals\n    }, this.props.children);\n  }\n\n}\n\nconst {\n  ReactCurrentOwner,\n  ReactCurrentDispatcher\n} = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction useFiber() {\n  const root = React.useContext(FiberContext);\n  if (root === null) throw new Error(\"its-fine: useFiber must be called within a <FiberProvider />!\");\n  const id = React.useId();\n  const fiber = React.useMemo(() => {\n    for (const maybeFiber of [ReactCurrentOwner == null ? void 0 : ReactCurrentOwner.current, root, root == null ? void 0 : root.alternate]) {\n      if (!maybeFiber) continue;\n      const fiber2 = traverseFiber(maybeFiber, false, node => {\n        let state = node.memoizedState;\n\n        while (state) {\n          if (state.memoizedState === id) return true;\n          state = state.next;\n        }\n      });\n      if (fiber2) return fiber2;\n    }\n  }, [root, id]);\n  return fiber;\n}\n\nfunction useContainer() {\n  const fiber = useFiber();\n  const root = React.useMemo(() => traverseFiber(fiber, true, node => {\n    var _a;\n\n    return ((_a = node.stateNode) == null ? void 0 : _a.containerInfo) != null;\n  }), [fiber]);\n  return root == null ? void 0 : root.stateNode.containerInfo;\n}\n\nfunction useNearestChild(type) {\n  const fiber = useFiber();\n  const childRef = React.useRef();\n  React.useLayoutEffect(() => {\n    var _a;\n\n    childRef.current = (_a = traverseFiber(fiber, false, node => typeof node.type === \"string\" && (type === void 0 || node.type === type))) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return childRef;\n}\n\nfunction useNearestParent(type) {\n  const fiber = useFiber();\n  const parentRef = React.useRef();\n  React.useLayoutEffect(() => {\n    var _a;\n\n    parentRef.current = (_a = traverseFiber(fiber, true, node => typeof node.type === \"string\" && (type === void 0 || node.type === type))) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return parentRef;\n}\n\nfunction useContextMap() {\n  var _a, _b;\n\n  const fiber = useFiber();\n  const [contextMap] = React.useState(() => /* @__PURE__ */new Map());\n  contextMap.clear();\n  let node = fiber;\n\n  while (node) {\n    const context = (_a = node.type) == null ? void 0 : _a._context;\n\n    if (context && context !== FiberContext && !contextMap.has(context)) {\n      contextMap.set(context, (_b = ReactCurrentDispatcher == null ? void 0 : ReactCurrentDispatcher.current) == null ? void 0 : _b.readContext(wrapContext(context)));\n    }\n\n    node = node.return;\n  }\n\n  return contextMap;\n}\n\nfunction useContextBridge() {\n  const contextMap = useContextMap();\n  return React.useMemo(() => Array.from(contextMap.keys()).reduce((Prev, context) => props => /* @__PURE__ */React.createElement(Prev, null, /* @__PURE__ */React.createElement(context.Provider, __spreadProps(__spreadValues({}, props), {\n    value: contextMap.get(context)\n  }))), props => /* @__PURE__ */React.createElement(FiberProvider, __spreadValues({}, props))), [contextMap]);\n}\n\nexport { FiberProvider, traverseFiber, useContainer, useContextBridge, useContextMap, useFiber, useNearestChild, useNearestParent };","map":{"version":3,"mappings":"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","names":["fiber","ascending","selector","child","return","match","traverseFiber","sibling","wrapContext","context","defineProperties","_currentRenderer","get","set","_currentRenderer2","_","FiberContext","React","createContext","Component","render","Provider","value","_reactInternals","props","children","ReactCurrentOwner","ReactCurrentDispatcher","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","useFiber","useContext","root","Error","useId","useMemo","maybeFiber","current","alternate","node","state","memoizedState","id","next","useContainer","_a","containerInfo","stateNode","useNearestChild","type","useRef","useLayoutEffect","childRef","useNearestParent","parentRef","useContextMap","contextMap","useState","Map","clear","has","_b","readContext","useContextBridge","Array","from","keys","reduce","Prev"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/its-fine/src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport type ReactReconciler from 'react-reconciler'\n\n/**\n * Represents a react-internal Fiber node.\n */\nexport type Fiber<T = any> = Omit<ReactReconciler.Fiber, 'stateNode'> & { stateNode: T }\n\n/**\n * Represents a {@link Fiber} node selector for traversal.\n */\nexport type FiberSelector<T = any> = (\n  /** The current {@link Fiber} node. */\n  node: Fiber<T | null>,\n) => boolean | void\n\n/**\n * Traverses up or down a {@link Fiber}, return `true` to stop and select a node.\n */\nexport function traverseFiber<T = any>(\n  /** Input {@link Fiber} to traverse. */\n  fiber: Fiber | undefined,\n  /** Whether to ascend and walk up the tree. Will walk down if `false`. */\n  ascending: boolean,\n  /** A {@link Fiber} node selector, returns the first match when `true` is passed. */\n  selector: FiberSelector<T>,\n): Fiber<T> | undefined {\n  if (!fiber) return\n  if (selector(fiber) === true) return fiber\n\n  let child = ascending ? fiber.return : fiber.child\n  while (child) {\n    const match = traverseFiber(child, ascending, selector)\n    if (match) return match\n\n    child = ascending ? null : child.sibling\n  }\n}\n\n// In development, React will warn about using contexts between renderers.\n// Hide the warning because its-fine fixes this issue\n// https://github.com/facebook/react/pull/12779\nfunction wrapContext<T>(context: React.Context<T>): React.Context<T> {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n      _currentRenderer2: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n    })\n  } catch (_) {\n    return context\n  }\n}\n\nconst FiberContext = wrapContext(React.createContext<Fiber>(null!))\n\n/**\n * A react-internal {@link Fiber} provider. This component binds React children to the React Fiber tree. Call its-fine hooks within this.\n */\nexport class FiberProvider extends React.Component<{ children?: React.ReactNode }> {\n  private _reactInternals!: Fiber\n\n  render() {\n    return <FiberContext.Provider value={this._reactInternals}>{this.props.children}</FiberContext.Provider>\n  }\n}\n\ninterface ReactInternal {\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentOwner: React.RefObject<Fiber>\n    ReactCurrentDispatcher: React.RefObject<{ readContext<T>(context: React.Context<T>): T }>\n  }\n}\n\nconst { ReactCurrentOwner, ReactCurrentDispatcher } = (React as unknown as ReactInternal)\n  .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n/**\n * Returns the current react-internal {@link Fiber}. This is an implementation detail of [react-reconciler](https://github.com/facebook/react/tree/main/packages/react-reconciler).\n */\nexport function useFiber(): Fiber<null> | undefined {\n  const root = React.useContext(FiberContext)\n  if (root === null) throw new Error('its-fine: useFiber must be called within a <FiberProvider />!')\n\n  // In development mode, React will expose the current component's Fiber as ReactCurrentOwner.\n  // In production, we don't have this luxury and must traverse from FiberProvider via useId\n  const id = React.useId()\n  const fiber = React.useMemo(() => {\n    for (const maybeFiber of [ReactCurrentOwner?.current, root, root?.alternate]) {\n      if (!maybeFiber) continue\n      const fiber = traverseFiber<null>(maybeFiber, false, (node) => {\n        let state = node.memoizedState\n        while (state) {\n          if (state.memoizedState === id) return true\n          state = state.next\n        }\n      })\n      if (fiber) return fiber\n    }\n  }, [root, id])\n\n  return fiber\n}\n\n/**\n * Represents a react-reconciler container instance.\n */\nexport interface ContainerInstance<T = any> {\n  containerInfo: T\n}\n\n/**\n * Returns the current react-reconciler container info passed to {@link ReactReconciler.Reconciler.createContainer}.\n *\n * In react-dom, a container will point to the root DOM element; in react-three-fiber, it will point to the root Zustand store.\n */\nexport function useContainer<T = any>(): T | undefined {\n  const fiber = useFiber()\n  const root = React.useMemo(\n    () => traverseFiber<ContainerInstance<T>>(fiber, true, (node) => node.stateNode?.containerInfo != null),\n    [fiber],\n  )\n\n  return root?.stateNode.containerInfo\n}\n\n/**\n * Returns the nearest react-reconciler child instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestChild<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const childRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    childRef.current = traverseFiber<T>(\n      fiber,\n      false,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return childRef\n}\n\n/**\n * Returns the nearest react-reconciler parent instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestParent<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const parentRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    parentRef.current = traverseFiber<T>(\n      fiber,\n      true,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return parentRef\n}\n\nexport type ContextMap = Map<React.Context<any>, any> & {\n  get<T>(context: React.Context<T>): T | undefined\n}\n\n/**\n * Returns a map of all contexts and their values.\n */\nexport function useContextMap(): ContextMap {\n  const fiber = useFiber()\n  const [contextMap] = React.useState(() => new Map<React.Context<any>, any>())\n\n  // Collect live context\n  contextMap.clear()\n  let node = fiber\n  while (node) {\n    const context = node.type?._context\n    if (context && context !== FiberContext && !contextMap.has(context)) {\n      contextMap.set(context, ReactCurrentDispatcher?.current?.readContext(wrapContext(context)))\n    }\n    node = node.return!\n  }\n\n  return contextMap\n}\n\n/**\n * Represents a react-context bridge provider component.\n */\nexport type ContextBridge = React.FC<React.PropsWithChildren<{}>>\n\n/**\n * React Context currently cannot be shared across [React renderers](https://reactjs.org/docs/codebase-overview.html#renderers) but explicitly forwarded between providers (see [react#17275](https://github.com/facebook/react/issues/17275)). This hook returns a {@link ContextBridge} of live context providers to pierce Context across renderers.\n *\n * Pass {@link ContextBridge} as a component to a secondary renderer to enable context-sharing within its children.\n */\nexport function useContextBridge(): ContextBridge {\n  const contextMap = useContextMap()\n\n  // Flatten context and their memoized values into a `ContextBridge` provider\n  return React.useMemo(\n    () =>\n      Array.from(contextMap.keys()).reduce(\n        (Prev, context) => (props) =>\n          (\n            <Prev>\n              <context.Provider {...props} value={contextMap.get(context)} />\n            </Prev>\n          ),\n        (props) => <FiberProvider {...props} />,\n      ),\n    [contextMap],\n  )\n}\n"]},"metadata":{},"sourceType":"module"}