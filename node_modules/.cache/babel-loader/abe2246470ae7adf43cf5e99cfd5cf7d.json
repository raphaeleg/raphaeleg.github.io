{"ast":null,"code":"/**\n *\n */\nfunction zero() {\n  return [0, 0];\n}\n\nfunction one() {\n  return [1, 1];\n}\n\nfunction add(a, b) {\n  return [a[0] + b[0], a[1] + b[1]];\n}\n\nfunction addValue(a, n) {\n  return [a[0] + n, a[1] + n];\n}\n\nfunction sub(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\nfunction subValue(a, n) {\n  return [a[0] - n, a[1] - n];\n}\n\nfunction scale(a, n) {\n  return [a[0] * n, a[1] * n];\n}\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Calculate the squared length of a vector.\n * Use this when comparing two vectors instead of length, as it's more efficient (no sqrt)\n */\n\n\nfunction lengthSqr(a) {\n  return a[0] * a[0] + a[1] * a[1];\n}\n/**\n * Calculate the length of a vector.\n * If you only need to compare lenghts, consider using the more efficient lengthSqr\n */\n\n\nfunction length(a) {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n}\n\nfunction distance(a, b) {\n  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\n}\n\nvar vector2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  zero: zero,\n  one: one,\n  add: add,\n  addValue: addValue,\n  sub: sub,\n  subValue: subValue,\n  scale: scale,\n  dot: dot,\n  lengthSqr: lengthSqr,\n  length: length,\n  distance: distance\n});\nexport { add as a, addValue as b, subValue as c, scale as d, dot as e, length as f, distance as g, lengthSqr as l, one as o, sub as s, vector2 as v, zero as z };","map":{"version":3,"names":["zero","one","add","a","b","addValue","n","sub","subValue","scale","dot","lengthSqr","length","Math","sqrt","distance","vector2","Object","freeze","__proto__","c","d","e","f","g","l","o","s","v","z"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/maath/dist/vector2-d2bf51f1.esm.js"],"sourcesContent":["/**\n *\n */\nfunction zero() {\n  return [0, 0];\n}\nfunction one() {\n  return [1, 1];\n}\nfunction add(a, b) {\n  return [a[0] + b[0], a[1] + b[1]];\n}\nfunction addValue(a, n) {\n  return [a[0] + n, a[1] + n];\n}\nfunction sub(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\nfunction subValue(a, n) {\n  return [a[0] - n, a[1] - n];\n}\nfunction scale(a, n) {\n  return [a[0] * n, a[1] * n];\n}\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Calculate the squared length of a vector.\n * Use this when comparing two vectors instead of length, as it's more efficient (no sqrt)\n */\n\nfunction lengthSqr(a) {\n  return a[0] * a[0] + a[1] * a[1];\n}\n/**\n * Calculate the length of a vector.\n * If you only need to compare lenghts, consider using the more efficient lengthSqr\n */\n\nfunction length(a) {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n}\nfunction distance(a, b) {\n  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\n}\n\nvar vector2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  zero: zero,\n  one: one,\n  add: add,\n  addValue: addValue,\n  sub: sub,\n  subValue: subValue,\n  scale: scale,\n  dot: dot,\n  lengthSqr: lengthSqr,\n  length: length,\n  distance: distance\n});\n\nexport { add as a, addValue as b, subValue as c, scale as d, dot as e, length as f, distance as g, lengthSqr as l, one as o, sub as s, vector2 as v, zero as z };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}