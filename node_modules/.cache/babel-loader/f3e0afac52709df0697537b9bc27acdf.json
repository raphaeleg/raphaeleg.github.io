{"ast":null,"code":"import _slicedToArray from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createClass from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"buffer\", \"transmissionSampler\", \"backside\", \"side\", \"transmission\", \"thickness\", \"backsideThickness\", \"samples\", \"resolution\", \"backsideResolution\", \"background\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { DiscardMaterial } from '../materials/DiscardMaterial.js';\n\nvar MeshTransmissionMaterialImpl = /*#__PURE__*/function (_THREE$MeshPhysicalMa) {\n  _inherits(MeshTransmissionMaterialImpl, _THREE$MeshPhysicalMa);\n\n  var _super = _createSuper(MeshTransmissionMaterialImpl);\n\n  function MeshTransmissionMaterialImpl() {\n    var _this;\n\n    var samples = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    var transmissionSampler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, MeshTransmissionMaterialImpl);\n\n    _this = _super.call(this);\n    _this.uniforms = {\n      chromaticAberration: {\n        value: 0.05\n      },\n      // Transmission must always be 0, unless transmissionSampler is being used\n      transmission: {\n        value: 0\n      },\n      // Instead a workaround is used, see below for reasons why\n      _transmission: {\n        value: 1\n      },\n      transmissionMap: {\n        value: null\n      },\n      // Roughness is 1 in THREE.MeshPhysicalMaterial but it makes little sense in a transmission material\n      roughness: {\n        value: 0\n      },\n      thickness: {\n        value: 0\n      },\n      thicknessMap: {\n        value: null\n      },\n      attenuationDistance: {\n        value: Infinity\n      },\n      attenuationColor: {\n        value: new THREE.Color('white')\n      },\n      anisotropy: {\n        value: 0.1\n      },\n      time: {\n        value: 0\n      },\n      distortion: {\n        value: 0.0\n      },\n      distortionScale: {\n        value: 0.5\n      },\n      temporalDistortion: {\n        value: 0.0\n      },\n      buffer: {\n        value: null\n      }\n    };\n\n    _this.onBeforeCompile = function (shader) {\n      shader.uniforms = _objectSpread(_objectSpread({}, shader.uniforms), _this.uniforms); // If the transmission sampler is active inject a flag\n\n      if (transmissionSampler) shader.defines.USE_SAMPLER = ''; // Otherwise we do use use .transmission and must therefore force USE_TRANSMISSION\n      // because threejs won't inject it for us\n      else shader.defines.USE_TRANSMISSION = ''; // Head\n\n      shader.fragmentShader =\n      /*glsl*/\n      \"\\n      uniform float chromaticAberration;         \\n      uniform float anisotropy;      \\n      uniform float time;\\n      uniform float distortion;\\n      uniform float distortionScale;\\n      uniform float temporalDistortion;\\n      uniform sampler2D buffer;\\n\\n      vec3 random3(vec3 c) {\\n        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\\n        vec3 r;\\n        r.z = fract(512.0*j);\\n        j *= .125;\\n        r.x = fract(512.0*j);\\n        j *= .125;\\n        r.y = fract(512.0*j);\\n        return r-0.5;\\n      }\\n\\n      float seed = 0.0;\\n      uint hash( uint x ) {\\n        x += ( x << 10u );\\n        x ^= ( x >>  6u );\\n        x += ( x <<  3u );\\n        x ^= ( x >> 11u );\\n        x += ( x << 15u );\\n        return x;\\n      }\\n\\n      // Compound versions of the hashing algorithm I whipped together.\\n      uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\\n      uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\\n      uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\\n\\n      // Construct a float with half-open range [0:1] using low 23 bits.\\n      // All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.\\n      float floatConstruct( uint m ) {\\n        const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\\n        const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\\n        m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\\n        m |= ieeeOne;                          // Add fractional part to 1.0\\n        float  f = uintBitsToFloat( m );       // Range [1:2]\\n        return f - 1.0;                        // Range [0:1]\\n      }\\n\\n      // Pseudo-random value in half-open range [0:1].\\n      float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\\n      float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\\n      float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\\n      float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\\n\\n      float rand() {\\n        float result = random(vec3(gl_FragCoord.xy, seed));\\n        seed += 1.0;\\n        return result;\\n      }\\n\\n      const float F3 =  0.3333333;\\n      const float G3 =  0.1666667;\\n\\n      float snoise(vec3 p) {\\n        vec3 s = floor(p + dot(p, vec3(F3)));\\n        vec3 x = p - s + dot(s, vec3(G3));\\n        vec3 e = step(vec3(0.0), x - x.yzx);\\n        vec3 i1 = e*(1.0 - e.zxy);\\n        vec3 i2 = 1.0 - e.zxy*(1.0 - e);\\n        vec3 x1 = x - i1 + G3;\\n        vec3 x2 = x - i2 + 2.0*G3;\\n        vec3 x3 = x - 1.0 + 3.0*G3;\\n        vec4 w, d;\\n        w.x = dot(x, x);\\n        w.y = dot(x1, x1);\\n        w.z = dot(x2, x2);\\n        w.w = dot(x3, x3);\\n        w = max(0.6 - w, 0.0);\\n        d.x = dot(random3(s), x);\\n        d.y = dot(random3(s + i1), x1);\\n        d.z = dot(random3(s + i2), x2);\\n        d.w = dot(random3(s + 1.0), x3);\\n        w *= w;\\n        w *= w;\\n        d *= w;\\n        return dot(d, vec4(52.0));\\n      }\\n\\n      float snoiseFractal(vec3 m) {\\n        return 0.5333333* snoise(m)\\n              +0.2666667* snoise(2.0*m)\\n              +0.1333333* snoise(4.0*m)\\n              +0.0666667* snoise(8.0*m);\\n      }\\n\" + shader.fragmentShader; // Remove transmission\n\n      shader.fragmentShader = shader.fragmentShader.replace('#include <transmission_pars_fragment>',\n      /*glsl*/\n      \"\\n        #ifdef USE_TRANSMISSION\\n          // Transmission code is based on glTF-Sampler-Viewer\\n          // https://github.com/KhronosGroup/glTF-Sample-Viewer\\n          uniform float _transmission;\\n          uniform float thickness;\\n          uniform float attenuationDistance;\\n          uniform vec3 attenuationColor;\\n          #ifdef USE_TRANSMISSIONMAP\\n            uniform sampler2D transmissionMap;\\n          #endif\\n          #ifdef USE_THICKNESSMAP\\n            uniform sampler2D thicknessMap;\\n          #endif\\n          uniform vec2 transmissionSamplerSize;\\n          uniform sampler2D transmissionSamplerMap;\\n          uniform mat4 modelMatrix;\\n          uniform mat4 projectionMatrix;\\n          varying vec3 vWorldPosition;\\n          vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n            // Direction of refracted light.\\n            vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n            // Compute rotation-independant scaling of the model matrix.\\n            vec3 modelScale;\\n            modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n            modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n            modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n            // The thickness is specified in local space.\\n            return normalize( refractionVector ) * thickness * modelScale;\\n          }\\n          float applyIorToRoughness( const in float roughness, const in float ior ) {\\n            // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\\n            // an IOR of 1.5 results in the default amount of microfacet refraction.\\n            return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n          }\\n          vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n            float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );            \\n            #ifdef USE_SAMPLER\\n              #ifdef texture2DLodEXT\\n                return texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod);\\n              #else\\n                return texture2D(transmissionSamplerMap, fragCoord.xy, framebufferLod);\\n              #endif\\n            #else\\n              return texture2D(buffer, fragCoord.xy);\\n            #endif\\n          }\\n          vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n            if ( isinf( attenuationDistance ) ) {\\n              // Attenuation distance is +\\u221E, i.e. the transmitted color is not attenuated at all.\\n              return radiance;\\n            } else {\\n              // Compute light attenuation using Beer's law.\\n              vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n              vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\\n              return transmittance * radiance;\\n            }\\n          }\\n          vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n            const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n            const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\\n            const in vec3 attenuationColor, const in float attenuationDistance ) {\\n            vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n            vec3 refractedRayExit = position + transmissionRay;\\n            // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\\n            vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n            vec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n            refractionCoords += 1.0;\\n            refractionCoords /= 2.0;\\n            // Sample framebuffer to get pixel the refracted ray hits.\\n            vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n            vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n            // Get the specular component.\\n            vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n            return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n          }\\n        #endif\\n\"); // Add refraction\n\n      shader.fragmentShader = shader.fragmentShader.replace('#include <transmission_fragment>',\n      /*glsl*/\n      \"  \\n        // Improve the refraction to use the world pos\\n        material.transmission = _transmission;\\n        material.transmissionAlpha = 1.0;\\n        material.thickness = thickness;\\n        material.attenuationDistance = attenuationDistance;\\n        material.attenuationColor = attenuationColor;\\n        #ifdef USE_TRANSMISSIONMAP\\n          material.transmission *= texture2D( transmissionMap, vUv ).r;\\n        #endif\\n        #ifdef USE_THICKNESSMAP\\n          material.thickness *= texture2D( thicknessMap, vUv ).g;\\n        #endif\\n        \\n        vec3 pos = vWorldPosition;\\n        vec3 v = normalize( cameraPosition - pos );\\n        vec3 n = inverseTransformDirection( normal, viewMatrix );\\n        vec3 transmission = vec3(0.0);\\n        float transmissionR, transmissionB, transmissionG;\\n        float randomCoords = rand();\\n        float thickness_smear = thickness * max(pow(roughnessFactor, 0.33), anisotropy);\\n        vec3 distortionNormal = vec3(0.0);\\n        vec3 temporalOffset = vec3(time, -time, -time) * temporalDistortion;\\n        if (distortion > 0.0) {\\n          distortionNormal = distortion * vec3(snoiseFractal(vec3((pos * distortionScale + temporalOffset))), snoiseFractal(vec3(pos.zxy * distortionScale - temporalOffset)), snoiseFractal(vec3(pos.yxz * distortionScale + temporalOffset)));\\n        }\\n        for (float i = 0.0; i < \".concat(samples, \".0; i ++) {\\n          vec3 sampleNorm = normalize(n + roughnessFactor * roughnessFactor * 2.0 * normalize(vec3(rand() - 0.5, rand() - 0.5, rand() - 0.5)) * pow(rand(), 0.33) + distortionNormal);\\n          transmissionR = getIBLVolumeRefraction(\\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness  + thickness_smear * (i + randomCoords) / float(\").concat(samples, \"),\\n            material.attenuationColor, material.attenuationDistance\\n          ).r;\\n          transmissionG = getIBLVolumeRefraction(\\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior  * (1.0 + chromaticAberration * (i + randomCoords) / float(\").concat(samples, \")) , material.thickness + thickness_smear * (i + randomCoords) / float(\").concat(samples, \"),\\n            material.attenuationColor, material.attenuationDistance\\n          ).g;\\n          transmissionB = getIBLVolumeRefraction(\\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior * (1.0 + 2.0 * chromaticAberration * (i + randomCoords) / float(\").concat(samples, \")), material.thickness + thickness_smear * (i + randomCoords) / float(\").concat(samples, \"),\\n            material.attenuationColor, material.attenuationDistance\\n          ).b;\\n          transmission.r += transmissionR;\\n          transmission.g += transmissionG;\\n          transmission.b += transmissionB;\\n        }\\n        transmission /= \").concat(samples, \".0;\\n        totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\\n\"));\n    };\n\n    Object.keys(_this.uniforms).forEach(function (name) {\n      return Object.defineProperty(_assertThisInitialized(_this), name, {\n        get: function get() {\n          return _this.uniforms[name].value;\n        },\n        set: function set(v) {\n          return _this.uniforms[name].value = v;\n        }\n      });\n    });\n    return _this;\n  }\n\n  return _createClass(MeshTransmissionMaterialImpl);\n}(THREE.MeshPhysicalMaterial);\n\nvar MeshTransmissionMaterial = /*#__PURE__*/React.forwardRef(function (_ref, fref) {\n  var buffer = _ref.buffer,\n      _ref$transmissionSamp = _ref.transmissionSampler,\n      transmissionSampler = _ref$transmissionSamp === void 0 ? false : _ref$transmissionSamp,\n      _ref$backside = _ref.backside,\n      backside = _ref$backside === void 0 ? false : _ref$backside,\n      _ref$side = _ref.side,\n      side = _ref$side === void 0 ? THREE.FrontSide : _ref$side,\n      _ref$transmission = _ref.transmission,\n      transmission = _ref$transmission === void 0 ? 1 : _ref$transmission,\n      _ref$thickness = _ref.thickness,\n      thickness = _ref$thickness === void 0 ? 0 : _ref$thickness,\n      _ref$backsideThicknes = _ref.backsideThickness,\n      backsideThickness = _ref$backsideThicknes === void 0 ? 0 : _ref$backsideThicknes,\n      _ref$samples = _ref.samples,\n      samples = _ref$samples === void 0 ? 10 : _ref$samples,\n      resolution = _ref.resolution,\n      backsideResolution = _ref.backsideResolution,\n      background = _ref.background,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  extend({\n    MeshTransmissionMaterial: MeshTransmissionMaterialImpl\n  });\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(function () {\n    return new DiscardMaterial();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      discardMaterial = _React$useState2[0];\n\n  var fboBack = useFBO(backsideResolution || resolution);\n  var fboMain = useFBO(resolution);\n  var oldBg;\n  var oldTone;\n  var parent;\n  useFrame(function (state) {\n    ref.current.time = state.clock.getElapsedTime(); // Render only if the buffer matches the built-in and no transmission sampler is set\n\n    if (ref.current.buffer === fboMain.texture && !transmissionSampler) {\n      parent = ref.current.__r3f.parent;\n\n      if (parent) {\n        // Save defaults\n        oldTone = state.gl.toneMapping;\n        oldBg = state.scene.background; // Switch off tonemapping lest it double tone maps\n        // Save the current background and set the HDR as the new BG\n        // Use discardmaterial, the parent will be invisible, but it's shadows will still be cast\n\n        state.gl.toneMapping = THREE.NoToneMapping;\n        if (background) state.scene.background = background;\n        parent.material = discardMaterial;\n\n        if (backside) {\n          // Render into the backside buffer\n          state.gl.setRenderTarget(fboBack);\n          state.gl.render(state.scene, state.camera); // And now prepare the material for the main render using the backside buffer\n\n          parent.material = ref.current;\n          parent.material.buffer = fboBack.texture;\n          parent.material.thickness = backsideThickness;\n          parent.material.side = THREE.BackSide;\n        } // Render into the main buffer\n\n\n        state.gl.setRenderTarget(fboMain);\n        state.gl.render(state.scene, state.camera);\n        parent.material.thickness = thickness;\n        parent.material.side = side;\n        parent.material.buffer = fboMain.texture; // Set old state back\n\n        state.scene.background = oldBg;\n        state.gl.setRenderTarget(null);\n        parent.material = ref.current;\n        state.gl.toneMapping = oldTone;\n      }\n    }\n  }); // Forward ref\n\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"meshTransmissionMaterial\", _extends({\n    // Samples must re-compile the shader so we memoize it\n    args: [samples, transmissionSampler],\n    ref: ref\n  }, props, {\n    buffer: buffer || fboMain.texture // @ts-ignore\n    ,\n    _transmission: transmission // In order for this to not incur extra cost \"transmission\" must be set to 0 and treated as a reserved prop.\n    // This is because THREE.WebGLRenderer will check for transmission > 0 and execute extra renders.\n    // The exception is when transmissionSampler is set, in which case we are using three's built in sampler.\n    ,\n    transmission: transmissionSampler ? transmission : 0,\n    thickness: thickness,\n    side: side\n  }));\n});\nexport { MeshTransmissionMaterial };","map":{"version":3,"names":["_extends","THREE","React","extend","useFrame","useFBO","DiscardMaterial","MeshTransmissionMaterialImpl","samples","transmissionSampler","uniforms","chromaticAberration","value","transmission","_transmission","transmissionMap","roughness","thickness","thicknessMap","attenuationDistance","Infinity","attenuationColor","Color","anisotropy","time","distortion","distortionScale","temporalDistortion","buffer","onBeforeCompile","shader","defines","USE_SAMPLER","USE_TRANSMISSION","fragmentShader","replace","Object","keys","forEach","name","defineProperty","get","set","v","MeshPhysicalMaterial","MeshTransmissionMaterial","forwardRef","fref","backside","side","FrontSide","backsideThickness","resolution","backsideResolution","background","props","ref","useRef","useState","discardMaterial","fboBack","fboMain","oldBg","oldTone","parent","state","current","clock","getElapsedTime","texture","__r3f","gl","toneMapping","scene","NoToneMapping","material","setRenderTarget","render","camera","BackSide","useImperativeHandle","createElement","args"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@react-three/drei/core/MeshTransmissionMaterial.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { DiscardMaterial } from '../materials/DiscardMaterial.js';\n\nclass MeshTransmissionMaterialImpl extends THREE.MeshPhysicalMaterial {\n  constructor(samples = 6, transmissionSampler = false) {\n    super();\n    this.uniforms = {\n      chromaticAberration: {\n        value: 0.05\n      },\n      // Transmission must always be 0, unless transmissionSampler is being used\n      transmission: {\n        value: 0\n      },\n      // Instead a workaround is used, see below for reasons why\n      _transmission: {\n        value: 1\n      },\n      transmissionMap: {\n        value: null\n      },\n      // Roughness is 1 in THREE.MeshPhysicalMaterial but it makes little sense in a transmission material\n      roughness: {\n        value: 0\n      },\n      thickness: {\n        value: 0\n      },\n      thicknessMap: {\n        value: null\n      },\n      attenuationDistance: {\n        value: Infinity\n      },\n      attenuationColor: {\n        value: new THREE.Color('white')\n      },\n      anisotropy: {\n        value: 0.1\n      },\n      time: {\n        value: 0\n      },\n      distortion: {\n        value: 0.0\n      },\n      distortionScale: {\n        value: 0.5\n      },\n      temporalDistortion: {\n        value: 0.0\n      },\n      buffer: {\n        value: null\n      }\n    };\n\n    this.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ...this.uniforms\n      }; // If the transmission sampler is active inject a flag\n\n      if (transmissionSampler) shader.defines.USE_SAMPLER = ''; // Otherwise we do use use .transmission and must therefore force USE_TRANSMISSION\n      // because threejs won't inject it for us\n      else shader.defines.USE_TRANSMISSION = ''; // Head\n\n      shader.fragmentShader =\n      /*glsl*/\n      `\n      uniform float chromaticAberration;         \n      uniform float anisotropy;      \n      uniform float time;\n      uniform float distortion;\n      uniform float distortionScale;\n      uniform float temporalDistortion;\n      uniform sampler2D buffer;\n\n      vec3 random3(vec3 c) {\n        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n        vec3 r;\n        r.z = fract(512.0*j);\n        j *= .125;\n        r.x = fract(512.0*j);\n        j *= .125;\n        r.y = fract(512.0*j);\n        return r-0.5;\n      }\n\n      float seed = 0.0;\n      uint hash( uint x ) {\n        x += ( x << 10u );\n        x ^= ( x >>  6u );\n        x += ( x <<  3u );\n        x ^= ( x >> 11u );\n        x += ( x << 15u );\n        return x;\n      }\n\n      // Compound versions of the hashing algorithm I whipped together.\n      uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\n      uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\n      uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\n\n      // Construct a float with half-open range [0:1] using low 23 bits.\n      // All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.\n      float floatConstruct( uint m ) {\n        const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n        const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n        m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n        m |= ieeeOne;                          // Add fractional part to 1.0\n        float  f = uintBitsToFloat( m );       // Range [1:2]\n        return f - 1.0;                        // Range [0:1]\n      }\n\n      // Pseudo-random value in half-open range [0:1].\n      float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\n      float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n      float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n      float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n\n      float rand() {\n        float result = random(vec3(gl_FragCoord.xy, seed));\n        seed += 1.0;\n        return result;\n      }\n\n      const float F3 =  0.3333333;\n      const float G3 =  0.1666667;\n\n      float snoise(vec3 p) {\n        vec3 s = floor(p + dot(p, vec3(F3)));\n        vec3 x = p - s + dot(s, vec3(G3));\n        vec3 e = step(vec3(0.0), x - x.yzx);\n        vec3 i1 = e*(1.0 - e.zxy);\n        vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n        vec3 x1 = x - i1 + G3;\n        vec3 x2 = x - i2 + 2.0*G3;\n        vec3 x3 = x - 1.0 + 3.0*G3;\n        vec4 w, d;\n        w.x = dot(x, x);\n        w.y = dot(x1, x1);\n        w.z = dot(x2, x2);\n        w.w = dot(x3, x3);\n        w = max(0.6 - w, 0.0);\n        d.x = dot(random3(s), x);\n        d.y = dot(random3(s + i1), x1);\n        d.z = dot(random3(s + i2), x2);\n        d.w = dot(random3(s + 1.0), x3);\n        w *= w;\n        w *= w;\n        d *= w;\n        return dot(d, vec4(52.0));\n      }\n\n      float snoiseFractal(vec3 m) {\n        return 0.5333333* snoise(m)\n              +0.2666667* snoise(2.0*m)\n              +0.1333333* snoise(4.0*m)\n              +0.0666667* snoise(8.0*m);\n      }\\n` + shader.fragmentShader; // Remove transmission\n\n      shader.fragmentShader = shader.fragmentShader.replace('#include <transmission_pars_fragment>',\n      /*glsl*/\n      `\n        #ifdef USE_TRANSMISSION\n          // Transmission code is based on glTF-Sampler-Viewer\n          // https://github.com/KhronosGroup/glTF-Sample-Viewer\n          uniform float _transmission;\n          uniform float thickness;\n          uniform float attenuationDistance;\n          uniform vec3 attenuationColor;\n          #ifdef USE_TRANSMISSIONMAP\n            uniform sampler2D transmissionMap;\n          #endif\n          #ifdef USE_THICKNESSMAP\n            uniform sampler2D thicknessMap;\n          #endif\n          uniform vec2 transmissionSamplerSize;\n          uniform sampler2D transmissionSamplerMap;\n          uniform mat4 modelMatrix;\n          uniform mat4 projectionMatrix;\n          varying vec3 vWorldPosition;\n          vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n            // Direction of refracted light.\n            vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n            // Compute rotation-independant scaling of the model matrix.\n            vec3 modelScale;\n            modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n            modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n            modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n            // The thickness is specified in local space.\n            return normalize( refractionVector ) * thickness * modelScale;\n          }\n          float applyIorToRoughness( const in float roughness, const in float ior ) {\n            // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n            // an IOR of 1.5 results in the default amount of microfacet refraction.\n            return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n          }\n          vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n            float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );            \n            #ifdef USE_SAMPLER\n              #ifdef texture2DLodEXT\n                return texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod);\n              #else\n                return texture2D(transmissionSamplerMap, fragCoord.xy, framebufferLod);\n              #endif\n            #else\n              return texture2D(buffer, fragCoord.xy);\n            #endif\n          }\n          vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n            if ( isinf( attenuationDistance ) ) {\n              // Attenuation distance is +∞, i.e. the transmitted color is not attenuated at all.\n              return radiance;\n            } else {\n              // Compute light attenuation using Beer's law.\n              vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n              vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\n              return transmittance * radiance;\n            }\n          }\n          vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n            const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n            const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n            const in vec3 attenuationColor, const in float attenuationDistance ) {\n            vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n            vec3 refractedRayExit = position + transmissionRay;\n            // Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n            vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n            vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n            refractionCoords += 1.0;\n            refractionCoords /= 2.0;\n            // Sample framebuffer to get pixel the refracted ray hits.\n            vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n            vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n            // Get the specular component.\n            vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n            return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n          }\n        #endif\\n`); // Add refraction\n\n      shader.fragmentShader = shader.fragmentShader.replace('#include <transmission_fragment>',\n      /*glsl*/\n      `  \n        // Improve the refraction to use the world pos\n        material.transmission = _transmission;\n        material.transmissionAlpha = 1.0;\n        material.thickness = thickness;\n        material.attenuationDistance = attenuationDistance;\n        material.attenuationColor = attenuationColor;\n        #ifdef USE_TRANSMISSIONMAP\n          material.transmission *= texture2D( transmissionMap, vUv ).r;\n        #endif\n        #ifdef USE_THICKNESSMAP\n          material.thickness *= texture2D( thicknessMap, vUv ).g;\n        #endif\n        \n        vec3 pos = vWorldPosition;\n        vec3 v = normalize( cameraPosition - pos );\n        vec3 n = inverseTransformDirection( normal, viewMatrix );\n        vec3 transmission = vec3(0.0);\n        float transmissionR, transmissionB, transmissionG;\n        float randomCoords = rand();\n        float thickness_smear = thickness * max(pow(roughnessFactor, 0.33), anisotropy);\n        vec3 distortionNormal = vec3(0.0);\n        vec3 temporalOffset = vec3(time, -time, -time) * temporalDistortion;\n        if (distortion > 0.0) {\n          distortionNormal = distortion * vec3(snoiseFractal(vec3((pos * distortionScale + temporalOffset))), snoiseFractal(vec3(pos.zxy * distortionScale - temporalOffset)), snoiseFractal(vec3(pos.yxz * distortionScale + temporalOffset)));\n        }\n        for (float i = 0.0; i < ${samples}.0; i ++) {\n          vec3 sampleNorm = normalize(n + roughnessFactor * roughnessFactor * 2.0 * normalize(vec3(rand() - 0.5, rand() - 0.5, rand() - 0.5)) * pow(rand(), 0.33) + distortionNormal);\n          transmissionR = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness  + thickness_smear * (i + randomCoords) / float(${samples}),\n            material.attenuationColor, material.attenuationDistance\n          ).r;\n          transmissionG = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior  * (1.0 + chromaticAberration * (i + randomCoords) / float(${samples})) , material.thickness + thickness_smear * (i + randomCoords) / float(${samples}),\n            material.attenuationColor, material.attenuationDistance\n          ).g;\n          transmissionB = getIBLVolumeRefraction(\n            sampleNorm, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n            pos, modelMatrix, viewMatrix, projectionMatrix, material.ior * (1.0 + 2.0 * chromaticAberration * (i + randomCoords) / float(${samples})), material.thickness + thickness_smear * (i + randomCoords) / float(${samples}),\n            material.attenuationColor, material.attenuationDistance\n          ).b;\n          transmission.r += transmissionR;\n          transmission.g += transmissionG;\n          transmission.b += transmissionB;\n        }\n        transmission /= ${samples}.0;\n        totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\\n`);\n    };\n\n    Object.keys(this.uniforms).forEach(name => Object.defineProperty(this, name, {\n      get: () => this.uniforms[name].value,\n      set: v => this.uniforms[name].value = v\n    }));\n  }\n\n}\n\nconst MeshTransmissionMaterial = /*#__PURE__*/React.forwardRef(({\n  buffer,\n  transmissionSampler = false,\n  backside = false,\n  side = THREE.FrontSide,\n  transmission = 1,\n  thickness = 0,\n  backsideThickness = 0,\n  samples = 10,\n  resolution,\n  backsideResolution,\n  background,\n  ...props\n}, fref) => {\n  extend({\n    MeshTransmissionMaterial: MeshTransmissionMaterialImpl\n  });\n  const ref = React.useRef(null);\n  const [discardMaterial] = React.useState(() => new DiscardMaterial());\n  const fboBack = useFBO(backsideResolution || resolution);\n  const fboMain = useFBO(resolution);\n  let oldBg;\n  let oldTone;\n  let parent;\n  useFrame(state => {\n    ref.current.time = state.clock.getElapsedTime(); // Render only if the buffer matches the built-in and no transmission sampler is set\n\n    if (ref.current.buffer === fboMain.texture && !transmissionSampler) {\n      parent = ref.current.__r3f.parent;\n\n      if (parent) {\n        // Save defaults\n        oldTone = state.gl.toneMapping;\n        oldBg = state.scene.background; // Switch off tonemapping lest it double tone maps\n        // Save the current background and set the HDR as the new BG\n        // Use discardmaterial, the parent will be invisible, but it's shadows will still be cast\n\n        state.gl.toneMapping = THREE.NoToneMapping;\n        if (background) state.scene.background = background;\n        parent.material = discardMaterial;\n\n        if (backside) {\n          // Render into the backside buffer\n          state.gl.setRenderTarget(fboBack);\n          state.gl.render(state.scene, state.camera); // And now prepare the material for the main render using the backside buffer\n\n          parent.material = ref.current;\n          parent.material.buffer = fboBack.texture;\n          parent.material.thickness = backsideThickness;\n          parent.material.side = THREE.BackSide;\n        } // Render into the main buffer\n\n\n        state.gl.setRenderTarget(fboMain);\n        state.gl.render(state.scene, state.camera);\n        parent.material.thickness = thickness;\n        parent.material.side = side;\n        parent.material.buffer = fboMain.texture; // Set old state back\n\n        state.scene.background = oldBg;\n        state.gl.setRenderTarget(null);\n        parent.material = ref.current;\n        state.gl.toneMapping = oldTone;\n      }\n    }\n  }); // Forward ref\n\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"meshTransmissionMaterial\", _extends({\n    // Samples must re-compile the shader so we memoize it\n    args: [samples, transmissionSampler],\n    ref: ref\n  }, props, {\n    buffer: buffer || fboMain.texture // @ts-ignore\n    ,\n    _transmission: transmission // In order for this to not incur extra cost \"transmission\" must be set to 0 and treated as a reserved prop.\n    // This is because THREE.WebGLRenderer will check for transmission > 0 and execute extra renders.\n    // The exception is when transmissionSampler is set, in which case we are using three's built in sampler.\n    ,\n    transmission: transmissionSampler ? transmission : 0,\n    thickness: thickness,\n    side: side\n  }));\n});\n\nexport { MeshTransmissionMaterial };\n"],"mappings":";;;;;;;;;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,eAAT,QAAgC,iCAAhC;;IAEMC,4B;;;;;EACJ,wCAAsD;IAAA;;IAAA,IAA1CC,OAA0C,uEAAhC,CAAgC;IAAA,IAA7BC,mBAA6B,uEAAP,KAAO;;IAAA;;IACpD;IACA,MAAKC,QAAL,GAAgB;MACdC,mBAAmB,EAAE;QACnBC,KAAK,EAAE;MADY,CADP;MAId;MACAC,YAAY,EAAE;QACZD,KAAK,EAAE;MADK,CALA;MAQd;MACAE,aAAa,EAAE;QACbF,KAAK,EAAE;MADM,CATD;MAYdG,eAAe,EAAE;QACfH,KAAK,EAAE;MADQ,CAZH;MAed;MACAI,SAAS,EAAE;QACTJ,KAAK,EAAE;MADE,CAhBG;MAmBdK,SAAS,EAAE;QACTL,KAAK,EAAE;MADE,CAnBG;MAsBdM,YAAY,EAAE;QACZN,KAAK,EAAE;MADK,CAtBA;MAyBdO,mBAAmB,EAAE;QACnBP,KAAK,EAAEQ;MADY,CAzBP;MA4BdC,gBAAgB,EAAE;QAChBT,KAAK,EAAE,IAAIX,KAAK,CAACqB,KAAV,CAAgB,OAAhB;MADS,CA5BJ;MA+BdC,UAAU,EAAE;QACVX,KAAK,EAAE;MADG,CA/BE;MAkCdY,IAAI,EAAE;QACJZ,KAAK,EAAE;MADH,CAlCQ;MAqCda,UAAU,EAAE;QACVb,KAAK,EAAE;MADG,CArCE;MAwCdc,eAAe,EAAE;QACfd,KAAK,EAAE;MADQ,CAxCH;MA2Cde,kBAAkB,EAAE;QAClBf,KAAK,EAAE;MADW,CA3CN;MA8CdgB,MAAM,EAAE;QACNhB,KAAK,EAAE;MADD;IA9CM,CAAhB;;IAmDA,MAAKiB,eAAL,GAAuB,UAAAC,MAAM,EAAI;MAC/BA,MAAM,CAACpB,QAAP,mCAAuBoB,MAAM,CAACpB,QAA9B,GACK,MAAKA,QADV,EAD+B,CAG5B;;MAEH,IAAID,mBAAJ,EAAyBqB,MAAM,CAACC,OAAP,CAAeC,WAAf,GAA6B,EAA7B,CAAzB,CAA0D;MAC1D;MADA,KAEKF,MAAM,CAACC,OAAP,CAAeE,gBAAf,GAAkC,EAAlC,CAP0B,CAOY;;MAE3CH,MAAM,CAACI,cAAP;MACA;MACA,myGA2FOJ,MAAM,CAACI,cA7Fd,CAT+B,CAsGD;;MAE9BJ,MAAM,CAACI,cAAP,GAAwBJ,MAAM,CAACI,cAAP,CAAsBC,OAAtB,CAA8B,uCAA9B;MACxB;MADwB,smJAAxB,CAxG+B,CAsLjB;;MAEdL,MAAM,CAACI,cAAP,GAAwBJ,MAAM,CAACI,cAAP,CAAsBC,OAAtB,CAA8B,kCAA9B;MACxB;MADwB,i3CA4BI3B,OA5BJ,ugBAgCiHA,OAhCjH,kZAqCwGA,OArCxG,oFAqCyLA,OArCzL,uZA0C6GA,OA1C7G,mFA0C6LA,OA1C7L,6QAiDJA,OAjDI,iGAAxB;IAmDD,CA3OD;;IA6OA4B,MAAM,CAACC,IAAP,CAAY,MAAK3B,QAAjB,EAA2B4B,OAA3B,CAAmC,UAAAC,IAAI;MAAA,OAAIH,MAAM,CAACI,cAAP,gCAA4BD,IAA5B,EAAkC;QAC3EE,GAAG,EAAE;UAAA,OAAM,MAAK/B,QAAL,CAAc6B,IAAd,EAAoB3B,KAA1B;QAAA,CADsE;QAE3E8B,GAAG,EAAE,aAAAC,CAAC;UAAA,OAAI,MAAKjC,QAAL,CAAc6B,IAAd,EAAoB3B,KAApB,GAA4B+B,CAAhC;QAAA;MAFqE,CAAlC,CAAJ;IAAA,CAAvC;IAlSoD;EAsSrD;;;EAvSwC1C,KAAK,CAAC2C,oB;;AA2SjD,IAAMC,wBAAwB,GAAG,aAAa3C,KAAK,CAAC4C,UAAN,CAAiB,gBAa5DC,IAb4D,EAanD;EAAA,IAZVnB,MAYU,QAZVA,MAYU;EAAA,iCAXVnB,mBAWU;EAAA,IAXVA,mBAWU,sCAXY,KAWZ;EAAA,yBAVVuC,QAUU;EAAA,IAVVA,QAUU,8BAVC,KAUD;EAAA,qBATVC,IASU;EAAA,IATVA,IASU,0BATHhD,KAAK,CAACiD,SASH;EAAA,6BARVrC,YAQU;EAAA,IARVA,YAQU,kCARK,CAQL;EAAA,0BAPVI,SAOU;EAAA,IAPVA,SAOU,+BAPE,CAOF;EAAA,iCANVkC,iBAMU;EAAA,IANVA,iBAMU,sCANU,CAMV;EAAA,wBALV3C,OAKU;EAAA,IALVA,OAKU,6BALA,EAKA;EAAA,IAJV4C,UAIU,QAJVA,UAIU;EAAA,IAHVC,kBAGU,QAHVA,kBAGU;EAAA,IAFVC,UAEU,QAFVA,UAEU;EAAA,IADPC,KACO;;EACVpD,MAAM,CAAC;IACL0C,wBAAwB,EAAEtC;EADrB,CAAD,CAAN;EAGA,IAAMiD,GAAG,GAAGtD,KAAK,CAACuD,MAAN,CAAa,IAAb,CAAZ;;EACA,sBAA0BvD,KAAK,CAACwD,QAAN,CAAe;IAAA,OAAM,IAAIpD,eAAJ,EAAN;EAAA,CAAf,CAA1B;EAAA;EAAA,IAAOqD,eAAP;;EACA,IAAMC,OAAO,GAAGvD,MAAM,CAACgD,kBAAkB,IAAID,UAAvB,CAAtB;EACA,IAAMS,OAAO,GAAGxD,MAAM,CAAC+C,UAAD,CAAtB;EACA,IAAIU,KAAJ;EACA,IAAIC,OAAJ;EACA,IAAIC,MAAJ;EACA5D,QAAQ,CAAC,UAAA6D,KAAK,EAAI;IAChBT,GAAG,CAACU,OAAJ,CAAY1C,IAAZ,GAAmByC,KAAK,CAACE,KAAN,CAAYC,cAAZ,EAAnB,CADgB,CACiC;;IAEjD,IAAIZ,GAAG,CAACU,OAAJ,CAAYtC,MAAZ,KAAuBiC,OAAO,CAACQ,OAA/B,IAA0C,CAAC5D,mBAA/C,EAAoE;MAClEuD,MAAM,GAAGR,GAAG,CAACU,OAAJ,CAAYI,KAAZ,CAAkBN,MAA3B;;MAEA,IAAIA,MAAJ,EAAY;QACV;QACAD,OAAO,GAAGE,KAAK,CAACM,EAAN,CAASC,WAAnB;QACAV,KAAK,GAAGG,KAAK,CAACQ,KAAN,CAAYnB,UAApB,CAHU,CAGsB;QAChC;QACA;;QAEAW,KAAK,CAACM,EAAN,CAASC,WAAT,GAAuBvE,KAAK,CAACyE,aAA7B;QACA,IAAIpB,UAAJ,EAAgBW,KAAK,CAACQ,KAAN,CAAYnB,UAAZ,GAAyBA,UAAzB;QAChBU,MAAM,CAACW,QAAP,GAAkBhB,eAAlB;;QAEA,IAAIX,QAAJ,EAAc;UACZ;UACAiB,KAAK,CAACM,EAAN,CAASK,eAAT,CAAyBhB,OAAzB;UACAK,KAAK,CAACM,EAAN,CAASM,MAAT,CAAgBZ,KAAK,CAACQ,KAAtB,EAA6BR,KAAK,CAACa,MAAnC,EAHY,CAGgC;;UAE5Cd,MAAM,CAACW,QAAP,GAAkBnB,GAAG,CAACU,OAAtB;UACAF,MAAM,CAACW,QAAP,CAAgB/C,MAAhB,GAAyBgC,OAAO,CAACS,OAAjC;UACAL,MAAM,CAACW,QAAP,CAAgB1D,SAAhB,GAA4BkC,iBAA5B;UACAa,MAAM,CAACW,QAAP,CAAgB1B,IAAhB,GAAuBhD,KAAK,CAAC8E,QAA7B;QACD,CApBS,CAoBR;;;QAGFd,KAAK,CAACM,EAAN,CAASK,eAAT,CAAyBf,OAAzB;QACAI,KAAK,CAACM,EAAN,CAASM,MAAT,CAAgBZ,KAAK,CAACQ,KAAtB,EAA6BR,KAAK,CAACa,MAAnC;QACAd,MAAM,CAACW,QAAP,CAAgB1D,SAAhB,GAA4BA,SAA5B;QACA+C,MAAM,CAACW,QAAP,CAAgB1B,IAAhB,GAAuBA,IAAvB;QACAe,MAAM,CAACW,QAAP,CAAgB/C,MAAhB,GAAyBiC,OAAO,CAACQ,OAAjC,CA3BU,CA2BgC;;QAE1CJ,KAAK,CAACQ,KAAN,CAAYnB,UAAZ,GAAyBQ,KAAzB;QACAG,KAAK,CAACM,EAAN,CAASK,eAAT,CAAyB,IAAzB;QACAZ,MAAM,CAACW,QAAP,GAAkBnB,GAAG,CAACU,OAAtB;QACAD,KAAK,CAACM,EAAN,CAASC,WAAT,GAAuBT,OAAvB;MACD;IACF;EACF,CAzCO,CAAR,CAXU,CAoDN;;EAEJ7D,KAAK,CAAC8E,mBAAN,CAA0BjC,IAA1B,EAAgC;IAAA,OAAMS,GAAG,CAACU,OAAV;EAAA,CAAhC,EAAmD,EAAnD;EACA,OAAO,aAAahE,KAAK,CAAC+E,aAAN,CAAoB,0BAApB,EAAgDjF,QAAQ,CAAC;IAC3E;IACAkF,IAAI,EAAE,CAAC1E,OAAD,EAAUC,mBAAV,CAFqE;IAG3E+C,GAAG,EAAEA;EAHsE,CAAD,EAIzED,KAJyE,EAIlE;IACR3B,MAAM,EAAEA,MAAM,IAAIiC,OAAO,CAACQ,OADlB,CAC0B;IAD1B;IAGRvD,aAAa,EAAED,YAHP,CAGoB;IAC5B;IACA;IALQ;IAORA,YAAY,EAAEJ,mBAAmB,GAAGI,YAAH,GAAkB,CAP3C;IAQRI,SAAS,EAAEA,SARH;IASRgC,IAAI,EAAEA;EATE,CAJkE,CAAxD,CAApB;AAeD,CAnF6C,CAA9C;AAqFA,SAASJ,wBAAT"},"metadata":{},"sourceType":"module"}