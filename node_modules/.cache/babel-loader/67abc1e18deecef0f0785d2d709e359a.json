{"ast":null,"code":"export default function Grid(_ref) {\n  let {\n    swiper,\n    extendParams\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n\n    return spaceBetween;\n  };\n\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}","map":{"version":3,"names":["Grid","swiper","extendParams","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","getSpaceBetween","spaceBetween","params","indexOf","parseFloat","replace","size","initSlides","slidesLength","slidesPerView","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","style","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","wrapperEl","newSlidesGrid","length","slidesGridItem","push","splice"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/swiper/modules/grid/grid.js"],"sourcesContent":["export default function Grid({\n  swiper,\n  extendParams\n}) {\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}