{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { TextGeometry, mergeVertices } from 'three-stdlib';\nimport { useFont } from './useFont.js';\nconst types = ['string', 'number'];\n\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\n\nconst Text3D = /*#__PURE__*/React.forwardRef((_ref, fref) => {\n  let {\n    font: _font,\n    letterSpacing = 0,\n    lineHeight = 1,\n    size = 1,\n    height = 0.2,\n    bevelThickness = 0.1,\n    bevelSize = 0.01,\n    bevelEnabled = false,\n    bevelOffset = 0,\n    bevelSegments = 4,\n    curveSegments = 8,\n    smooth,\n    children,\n    ...props\n  } = _ref;\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const ref = React.useRef(null);\n  const font = useFont(_font);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  React.useLayoutEffect(() => {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\nexport { Text3D };","map":{"version":3,"names":["_extends","React","useMemo","extend","TextGeometry","mergeVertices","useFont","types","getTextFromChildren","children","label","rest","Children","forEach","child","includes","push","Text3D","forwardRef","fref","font","_font","letterSpacing","lineHeight","size","height","bevelThickness","bevelSize","bevelEnabled","bevelOffset","bevelSegments","curveSegments","smooth","props","RenamedTextGeometry","ref","useRef","opts","args","useLayoutEffect","current","geometry","computeVertexNormals","useImperativeHandle","createElement"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@react-three/drei/core/Text3D.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { TextGeometry, mergeVertices } from 'three-stdlib';\nimport { useFont } from './useFont.js';\n\nconst types = ['string', 'number'];\n\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\n\nconst Text3D = /*#__PURE__*/React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  smooth,\n  children,\n  ...props\n}, fref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const ref = React.useRef(null);\n  const font = useFont(_font);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  React.useLayoutEffect(() => {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\n\nexport { Text3D };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}