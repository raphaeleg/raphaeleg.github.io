{"ast":null,"code":"import _classCallCheck from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\nexport var OrientedBox = /*#__PURE__*/function () {\n  function OrientedBox(min, max, matrix) {\n    _classCallCheck(this, OrientedBox);\n\n    this.isOrientedBox = true;\n    this.min = new Vector3();\n    this.max = new Vector3();\n    this.matrix = new Matrix4();\n    this.invMatrix = new Matrix4();\n    this.points = new Array(8).fill().map(function () {\n      return new Vector3();\n    });\n    this.satAxes = new Array(3).fill().map(function () {\n      return new Vector3();\n    });\n    this.satBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    this.alignedSatBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    this.needsUpdate = false;\n    if (min) this.min.copy(min);\n    if (max) this.max.copy(max);\n    if (matrix) this.matrix.copy(matrix);\n  }\n\n  _createClass(OrientedBox, [{\n    key: \"set\",\n    value: function set(min, max, matrix) {\n      this.min.copy(min);\n      this.max.copy(max);\n      this.matrix.copy(matrix);\n      this.needsUpdate = true;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(other) {\n      this.min.copy(other.min);\n      this.max.copy(other.max);\n      this.matrix.copy(other.matrix);\n      this.needsUpdate = true;\n    }\n  }]);\n\n  return OrientedBox;\n}();\n\nOrientedBox.prototype.update = function () {\n  return function update() {\n    var matrix = this.matrix;\n    var min = this.min;\n    var max = this.max;\n    var points = this.points;\n\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          var i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n          var v = points[i];\n          v.x = x ? max.x : min.x;\n          v.y = y ? max.y : min.y;\n          v.z = z ? max.z : min.z;\n          v.applyMatrix4(matrix);\n        }\n      }\n    }\n\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var minVec = points[0];\n\n    for (var _i = 0; _i < 3; _i++) {\n      var axis = satAxes[_i];\n      var sb = satBounds[_i];\n      var index = 1 << _i;\n      var pi = points[index];\n      axis.subVectors(minVec, pi);\n      sb.setFromPoints(axis, points);\n    }\n\n    var alignedSatBounds = this.alignedSatBounds;\n    alignedSatBounds[0].setFromPointsField(points, 'x');\n    alignedSatBounds[1].setFromPointsField(points, 'y');\n    alignedSatBounds[2].setFromPointsField(points, 'z');\n    this.invMatrix.copy(this.matrix).invert();\n    this.needsUpdate = false;\n  };\n}();\n\nOrientedBox.prototype.intersectsBox = function () {\n  var aabbBounds = new SeparatingAxisBounds();\n  return function intersectsBox(box) {\n    // TODO: should this be doing SAT against the AABB?\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    var min = box.min;\n    var max = box.max;\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var alignedSatBounds = this.alignedSatBounds;\n    aabbBounds.min = min.x;\n    aabbBounds.max = max.x;\n    if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.y;\n    aabbBounds.max = max.y;\n    if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.z;\n    aabbBounds.max = max.z;\n    if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;\n\n    for (var i = 0; i < 3; i++) {\n      var axis = satAxes[i];\n      var sb = satBounds[i];\n      aabbBounds.setFromBox(axis, box);\n      if (sb.isSeparated(aabbBounds)) return false;\n    }\n\n    return true;\n  };\n}();\n\nOrientedBox.prototype.intersectsTriangle = function () {\n  var saTri = new ExtendedTriangle();\n  var pointsArr = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  return function intersectsTriangle(triangle) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (!triangle.isExtendedTriangle) {\n      saTri.copy(triangle);\n      saTri.update();\n      triangle = saTri;\n    } else if (triangle.needsUpdate) {\n      triangle.update();\n    }\n\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    pointsArr[0] = triangle.a;\n    pointsArr[1] = triangle.b;\n    pointsArr[2] = triangle.c;\n\n    for (var i = 0; i < 3; i++) {\n      var sb = satBounds[i];\n      var sa = satAxes[i];\n      cachedSatBounds.setFromPoints(sa, pointsArr);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    var triSatBounds = triangle.satBounds;\n    var triSatAxes = triangle.satAxes;\n    var points = this.points;\n\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      var _sb = triSatBounds[_i2];\n      var _sa = triSatAxes[_i2];\n      cachedSatBounds.setFromPoints(_sa, points);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    } // check crossed axes\n\n\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var sa1 = satAxes[_i3];\n\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = triSatAxes[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n        cachedSatBounds2.setFromPoints(cachedAxis, points);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n\n    return true;\n  };\n}();\n\nOrientedBox.prototype.closestPointToPoint = function () {\n  return function closestPointToPoint(point, target1) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n    return target1;\n  };\n}();\n\nOrientedBox.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\n\nOrientedBox.prototype.distanceToBox = function () {\n  var xyzFields = ['x', 'y', 'z'];\n  var segments1 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var segments2 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var point1 = new Vector3();\n  var point2 = new Vector3(); // early out if we find a value below threshold\n\n  return function distanceToBox(box) {\n    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    if (this.needsUpdate) {\n      this.update();\n    }\n\n    if (this.intersectsBox(box)) {\n      if (target1 || target2) {\n        box.getCenter(point2);\n        this.closestPointToPoint(point2, point1);\n        box.closestPointToPoint(point1, point2);\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n\n      return 0;\n    }\n\n    var threshold2 = threshold * threshold;\n    var min = box.min;\n    var max = box.max;\n    var points = this.points; // iterate over every edge and compare distances\n\n    var closestDistanceSq = Infinity; // check over all these points\n\n    for (var i = 0; i < 8; i++) {\n      var p = points[i];\n      point2.copy(p).clamp(min, max);\n      var dist = p.distanceToSquared(point2);\n\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(p);\n        if (target2) target2.copy(point2);\n        if (dist < threshold2) return Math.sqrt(dist);\n      }\n    } // generate and check all line segment distances\n\n\n    var count = 0;\n\n    for (var _i4 = 0; _i4 < 3; _i4++) {\n      for (var i1 = 0; i1 <= 1; i1++) {\n        for (var i2 = 0; i2 <= 1; i2++) {\n          var nextIndex = (_i4 + 1) % 3;\n          var nextIndex2 = (_i4 + 2) % 3; // get obb line segments\n\n          var index = i1 << nextIndex | i2 << nextIndex2;\n          var index2 = 1 << _i4 | i1 << nextIndex | i2 << nextIndex2;\n          var p1 = points[index];\n          var p2 = points[index2];\n          var line1 = segments1[count];\n          line1.set(p1, p2); // get aabb line segments\n\n          var f1 = xyzFields[_i4];\n          var f2 = xyzFields[nextIndex];\n          var f3 = xyzFields[nextIndex2];\n          var line2 = segments2[count];\n          var start = line2.start;\n          var end = line2.end;\n          start[f1] = min[f1];\n          start[f2] = i1 ? min[f2] : max[f2];\n          start[f3] = i2 ? min[f3] : max[f2];\n          end[f1] = max[f1];\n          end[f2] = i1 ? min[f2] : max[f2];\n          end[f3] = i2 ? min[f3] : max[f2];\n          count++;\n        }\n      }\n    } // check all the other boxes point\n\n\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          point2.x = x ? max.x : min.x;\n          point2.y = y ? max.y : min.y;\n          point2.z = z ? max.z : min.z;\n          this.closestPointToPoint(point2, point1);\n\n          var _dist = point2.distanceToSquared(point1);\n\n          if (_dist < closestDistanceSq) {\n            closestDistanceSq = _dist;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(point2);\n            if (_dist < threshold2) return Math.sqrt(_dist);\n          }\n        }\n      }\n    }\n\n    for (var _i5 = 0; _i5 < 12; _i5++) {\n      var l1 = segments1[_i5];\n\n      for (var _i6 = 0; _i6 < 12; _i6++) {\n        var l2 = segments2[_i6];\n        closestPointsSegmentToSegment(l1, l2, point1, point2);\n\n        var _dist2 = point1.distanceToSquared(point2);\n\n        if (_dist2 < closestDistanceSq) {\n          closestDistanceSq = _dist2;\n          if (target1) target1.copy(point1);\n          if (target2) target2.copy(point2);\n          if (_dist2 < threshold2) return Math.sqrt(_dist2);\n        }\n      }\n    }\n\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Vector3","Matrix4","Line3","SeparatingAxisBounds","ExtendedTriangle","closestPointsSegmentToSegment","OrientedBox","min","max","matrix","isOrientedBox","invMatrix","points","Array","fill","map","satAxes","satBounds","alignedSatBounds","needsUpdate","copy","other","prototype","update","x","y","z","i","v","applyMatrix4","minVec","axis","sb","index","pi","subVectors","setFromPoints","setFromPointsField","invert","intersectsBox","aabbBounds","box","isSeparated","setFromBox","intersectsTriangle","saTri","pointsArr","cachedSatBounds","cachedSatBounds2","cachedAxis","triangle","isExtendedTriangle","a","b","c","sa","triSatBounds","triSatAxes","sa1","i2","sa2","crossVectors","closestPointToPoint","point","target1","clamp","distanceToPoint","target","distanceTo","distanceToBox","xyzFields","segments1","segments2","point1","point2","threshold","target2","getCenter","threshold2","closestDistanceSq","Infinity","p","dist","distanceToSquared","Math","sqrt","count","i1","nextIndex","nextIndex2","index2","p1","p2","line1","set","f1","f2","f3","line2","start","end","l1","l2"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/three-mesh-bvh/src/math/OrientedBox.js"],"sourcesContent":["import { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\n\nexport class OrientedBox {\n\n\tconstructor( min, max, matrix ) {\n\n\t\tthis.isOrientedBox = true;\n\t\tthis.min = new Vector3();\n\t\tthis.max = new Vector3();\n\t\tthis.matrix = new Matrix4();\n\t\tthis.invMatrix = new Matrix4();\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.needsUpdate = false;\n\n\t\tif ( min ) this.min.copy( min );\n\t\tif ( max ) this.max.copy( max );\n\t\tif ( matrix ) this.matrix.copy( matrix );\n\n\t}\n\n\tset( min, max, matrix ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\t\tthis.matrix.copy( matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.min.copy( other.min );\n\t\tthis.max.copy( other.max );\n\t\tthis.matrix.copy( other.matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nOrientedBox.prototype.update = ( function () {\n\n\treturn function update() {\n\n\t\tconst matrix = this.matrix;\n\t\tconst min = this.min;\n\t\tconst max = this.max;\n\n\t\tconst points = this.points;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\n\t\t\t\t\tconst v = points[ i ];\n\t\t\t\t\tv.x = x ? max.x : min.x;\n\t\t\t\t\tv.y = y ? max.y : min.y;\n\t\t\t\t\tv.z = z ? max.z : min.z;\n\n\t\t\t\t\tv.applyMatrix4( matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst minVec = points[ 0 ];\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst index = 1 << i;\n\t\t\tconst pi = points[ index ];\n\n\t\t\taxis.subVectors( minVec, pi );\n\t\t\tsb.setFromPoints( axis, points );\n\n\t\t}\n\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\n\n\t\tthis.invMatrix.copy( this.matrix ).invert();\n\t\tthis.needsUpdate = false;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsBox = ( function () {\n\n\tconst aabbBounds = new SeparatingAxisBounds();\n\treturn function intersectsBox( box ) {\n\n\t\t// TODO: should this be doing SAT against the AABB?\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\n\t\taabbBounds.min = min.x;\n\t\taabbBounds.max = max.x;\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.y;\n\t\taabbBounds.max = max.y;\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.z;\n\t\taabbBounds.max = max.z;\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\taabbBounds.setFromBox( axis, box );\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri = new ExtendedTriangle();\n\tconst pointsArr = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\treturn function intersectsTriangle( triangle ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! triangle.isExtendedTriangle ) {\n\n\t\t\tsaTri.copy( triangle );\n\t\t\tsaTri.update();\n\t\t\ttriangle = saTri;\n\n\t\t} else if ( triangle.needsUpdate ) {\n\n\t\t\ttriangle.update();\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\n\t\tpointsArr[ 0 ] = triangle.a;\n\t\tpointsArr[ 1 ] = triangle.b;\n\t\tpointsArr[ 2 ] = triangle.c;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst sa = satAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\tconst triSatBounds = triangle.satBounds;\n\t\tconst triSatAxes = triangle.satAxes;\n\t\tconst points = this.points;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = triSatBounds[ i ];\n\t\t\tconst sa = triSatAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check crossed axes\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sa1 = satAxes[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.closestPointToPoint = ( function () {\n\n\treturn function closestPointToPoint( point, target1 ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\ttarget1\n\t\t\t.copy( point )\n\t\t\t.applyMatrix4( this.invMatrix )\n\t\t\t.clamp( this.min, this.max )\n\t\t\t.applyMatrix4( this.matrix );\n\n\t\treturn target1;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToBox = ( function () {\n\n\tconst xyzFields = [ 'x', 'y', 'z' ];\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\t// early out if we find a value below threshold\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( this.intersectsBox( box ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tbox.getCenter( point2 );\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\n\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tconst threshold2 = threshold * threshold;\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst points = this.points;\n\n\n\t\t// iterate over every edge and compare distances\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check over all these points\n\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tpoint2.copy( p ).clamp( min, max );\n\n\t\t\tconst dist = p.distanceToSquared( point2 );\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( p );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate and check all line segment distances\n\t\tlet count = 0;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\n\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\n\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\n\n\t\t\t\t\t// get obb line segments\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst p1 = points[ index ];\n\t\t\t\t\tconst p2 = points[ index2 ];\n\t\t\t\t\tconst line1 = segments1[ count ];\n\t\t\t\t\tline1.set( p1, p2 );\n\n\n\t\t\t\t\t// get aabb line segments\n\t\t\t\t\tconst f1 = xyzFields[ i ];\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\n\t\t\t\t\tconst line2 = segments2[ count ];\n\t\t\t\t\tconst start = line2.start;\n\t\t\t\t\tconst end = line2.end;\n\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check all the other boxes point\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\n\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 12; i ++ ) {\n\n\t\t\tconst l1 = segments1[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\n\n\t\t\t\tconst l2 = segments2[ i2 ];\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}