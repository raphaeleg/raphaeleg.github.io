{"ast":null,"code":"import _slicedToArray from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"debug\", \"children\", \"frames\", \"ior\", \"color\", \"causticsOnly\", \"backside\", \"backsideIOR\", \"worldRadius\", \"intensity\", \"resolution\", \"lightSource\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { useHelper } from './useHelper.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { Edges } from './Edges.js';\nimport { FullScreenQuad } from 'three-stdlib';\n\nfunction createNormalMaterial() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : THREE.FrontSide;\n  var viewMatrix = {\n    value: new THREE.Matrix4()\n  };\n  return Object.assign(new THREE.MeshNormalMaterial({\n    side: side\n  }), {\n    viewMatrix: viewMatrix,\n    onBeforeCompile: function onBeforeCompile(shader) {\n      shader.uniforms.viewMatrix = viewMatrix;\n      shader.fragmentShader = \"vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n         }\\n\" + shader.fragmentShader.replace('#include <normal_fragment_maps>', \"#include <normal_fragment_maps>\\n           normal = inverseTransformDirection( normal, viewMatrix );\\n\");\n    }\n  });\n}\n\nvar CausticsProjectionMaterial = shaderMaterial({\n  causticsTexture: null,\n  causticsTextureB: null,\n  color: new THREE.Color(),\n  lightProjMatrix: new THREE.Matrix4(),\n  lightViewMatrix: new THREE.Matrix4()\n}, \"varying vec3 vWorldPosition;   \\n   void main() {\\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\\n     vec4 worldPosition = modelMatrix * vec4(position, 1.);\\n     vWorldPosition = worldPosition.xyz;\\n   }\", \"varying vec3 vWorldPosition;\\n  uniform vec3 color;\\n  uniform sampler2D causticsTexture; \\n  uniform sampler2D causticsTextureB; \\n  uniform mat4 lightProjMatrix;\\n  uniform mat4 lightViewMatrix;\\n   void main() {\\n    // Apply caustics  \\n    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);\\n    lightSpacePos.xyz /= lightSpacePos.w;\\n    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; \\n    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;\\n    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;\\n    gl_FragColor = vec4((front + back) * color, 1.0);\\n    #include <tonemapping_fragment>\\n    #include <encodings_fragment>\\n   }\");\nvar CausticsMaterial = shaderMaterial({\n  cameraMatrixWorld: new THREE.Matrix4(),\n  cameraProjectionMatrixInv: new THREE.Matrix4(),\n  normalTexture: null,\n  depthTexture: null,\n  lightDir: new THREE.Vector3(0, 1, 0),\n  lightPlaneNormal: new THREE.Vector3(0, 1, 0),\n  lightPlaneConstant: 0,\n  near: 0.1,\n  far: 100,\n  modelMatrix: new THREE.Matrix4(),\n  worldRadius: 1 / 40,\n  ior: 1.1,\n  bounces: 0,\n  resolution: 1024,\n  size: 10,\n  intensity: 0.5\n},\n/* glsl */\n\"\\n  varying vec2 vUv;\\n  void main() {\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n  }\",\n/* glsl */\n\"  \\n  uniform mat4 cameraMatrixWorld;\\n  uniform mat4 cameraProjectionMatrixInv;\\n  uniform vec3 lightDir;\\n  uniform vec3 lightPlaneNormal;\\n  uniform float lightPlaneConstant;\\n  uniform float near;\\n  uniform float far;\\n  uniform float time;\\n  uniform float worldRadius;\\n  uniform float resolution;\\n  uniform float size;\\n  uniform float intensity;\\n  uniform float ior;\\n  precision highp isampler2D;\\n  precision highp usampler2D;\\n  uniform sampler2D normalTexture;\\n  uniform sampler2D depthTexture;\\n  uniform float bounces;\\n  varying vec2 vUv;\\n  vec3 WorldPosFromDepth(float depth, vec2 coord) {\\n    float z = depth * 2.0 - 1.0;\\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\\n    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;\\n    // Perspective division\\n    viewSpacePosition /= viewSpacePosition.w;\\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\\n    return worldSpacePosition.xyz;\\n  }                  \\n  float sdPlane( vec3 p, vec3 n, float h ) {\\n    // n must be normalized\\n    return dot(p,n) + h;\\n  }\\n  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {\\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\\n  }\\n  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {\\n    rayOrigin = ro;\\n    rayDirection = rd;\\n    rayDirection = refract(rayDirection, normal, 1.0 / ior);\\n    rayOrigin = pos + rayDirection * 0.1;\\n    return rayDirection;\\n  }\\n  void main() {\\n    // Each sample consists of random offset in the x and y direction\\n    float caustic = 0.0;\\n    float causticTexelSize = (1.0 / resolution) * size * 2.0;\\n    float texelsNeeded = worldRadius / causticTexelSize;\\n    float sampleRadius = texelsNeeded / resolution;\\n    float sum = 0.0;\\n    if (texture2D(depthTexture, vUv).x == 1.0) {\\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n      return;\\n    }\\n    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\\n    vec2 uv1 = vUv + offset1 * sampleRadius;\\n    vec2 uv2 = vUv + offset2 * sampleRadius;\\n    vec2 uv3 = vUv + offset3 * sampleRadius;\\n    vec2 uv4 = vUv + offset4 * sampleRadius;\\n    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;\\n    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;\\n    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;\\n    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;\\n    float depth1 = texture2D(depthTexture, uv1, -10.0).x;\\n    float depth2 = texture2D(depthTexture, uv2, -10.0).x;\\n    float depth3 = texture2D(depthTexture, uv3, -10.0).x;\\n    float depth4 = texture2D(depthTexture, uv4, -10.0).x;\\n    // Sanity check the depths\\n    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {\\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n      return;\\n    }\\n    vec3 pos1 = WorldPosFromDepth(depth1, uv1);\\n    vec3 pos2 = WorldPosFromDepth(depth2, uv2);\\n    vec3 pos3 = WorldPosFromDepth(depth3, uv3);\\n    vec3 pos4 = WorldPosFromDepth(depth4, uv4);\\n    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);\\n    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);\\n    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);\\n    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);\\n    vec3 endPos1, endPos2, endPos3, endPos4;\\n    vec3 endDir1, endDir2, endDir3, endDir4;\\n    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);\\n    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);\\n    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);\\n    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);\\n    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));\\n    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));\\n    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));\\n    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));\\n    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));\\n    vec3 finalPos1 = endPos1 + endDir1 * t1;\\n    vec3 finalPos2 = endPos2 + endDir2 * t2;\\n    vec3 finalPos3 = endPos3 + endDir3 * t3;\\n    vec3 finalPos4 = endPos4 + endDir4 * t4;\\n    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));\\n    caustic += intensity * (lightPosArea / finalArea);\\n    // Calculate the area of the triangle in light spaces\\n    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);\\n  }\");\nvar NORMALPROPS = {\n  depth: true,\n  minFilter: THREE.LinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  type: THREE.UnsignedByteType\n};\nvar CAUSTICPROPS = {\n  minFilter: THREE.LinearMipmapLinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  format: THREE.RGBAFormat,\n  type: THREE.FloatType,\n  generateMipmaps: true\n};\nvar Caustics = /*#__PURE__*/React.forwardRef(function (_ref, fref) {\n  var debug = _ref.debug,\n      children = _ref.children,\n      _ref$frames = _ref.frames,\n      frames = _ref$frames === void 0 ? 1 : _ref$frames,\n      _ref$ior = _ref.ior,\n      ior = _ref$ior === void 0 ? 1.1 : _ref$ior,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'white' : _ref$color,\n      _ref$causticsOnly = _ref.causticsOnly,\n      causticsOnly = _ref$causticsOnly === void 0 ? false : _ref$causticsOnly,\n      _ref$backside = _ref.backside,\n      backside = _ref$backside === void 0 ? false : _ref$backside,\n      _ref$backsideIOR = _ref.backsideIOR,\n      backsideIOR = _ref$backsideIOR === void 0 ? 1.1 : _ref$backsideIOR,\n      _ref$worldRadius = _ref.worldRadius,\n      worldRadius = _ref$worldRadius === void 0 ? 0.3125 : _ref$worldRadius,\n      _ref$intensity = _ref.intensity,\n      intensity = _ref$intensity === void 0 ? 0.05 : _ref$intensity,\n      _ref$resolution = _ref.resolution,\n      resolution = _ref$resolution === void 0 ? 2024 : _ref$resolution,\n      _ref$lightSource = _ref.lightSource,\n      lightSource = _ref$lightSource === void 0 ? [5, 5, 5] : _ref$lightSource,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  extend({\n    CausticsProjectionMaterial: CausticsProjectionMaterial\n  });\n  var ref = React.useRef(null);\n  var camera = React.useRef(null);\n  var scene = React.useRef(null);\n  var plane = React.useRef(null);\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var helper = useHelper(debug && camera, THREE.CameraHelper); // Buffers for front and back faces\n\n  var normalTarget = useFBO(resolution, resolution, NORMALPROPS);\n  var normalTargetB = useFBO(resolution, resolution, NORMALPROPS);\n  var causticsTarget = useFBO(resolution, resolution, CAUSTICPROPS);\n  var causticsTargetB = useFBO(resolution, resolution, CAUSTICPROPS); // Normal materials for front and back faces\n\n  var _React$useState = React.useState(function () {\n    return createNormalMaterial();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      normalMat = _React$useState2[0];\n\n  var _React$useState3 = React.useState(function () {\n    return createNormalMaterial(THREE.BackSide);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      normalMatB = _React$useState4[0]; // The quad that catches the caustics\n\n\n  var _React$useState5 = React.useState(function () {\n    return new CausticsMaterial();\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      causticsMaterial = _React$useState6[0];\n\n  var _React$useState7 = React.useState(function () {\n    return new FullScreenQuad(causticsMaterial);\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 1),\n      causticsQuad = _React$useState8[0];\n\n  React.useLayoutEffect(function () {\n    ref.current.updateWorldMatrix(false, true);\n  });\n  var count = 0;\n  var v = new THREE.Vector3();\n  var lpF = new THREE.Frustum();\n  var lpM = new THREE.Matrix4();\n  var lpP = new THREE.Plane();\n  var lightDir = new THREE.Vector3();\n  var lightDirInv = new THREE.Vector3();\n  var bounds = new THREE.Box3();\n  var focusPos = new THREE.Vector3();\n  useFrame(function (state, delta) {\n    if (frames === Infinity || count++ < frames) {\n      var _scene$current$parent, _helper$current;\n\n      if (Array.isArray(lightSource)) lightDir.fromArray(lightSource).normalize();else lightDir.copy(ref.current.worldToLocal(lightSource.current.getWorldPosition(v)).normalize());\n      lightDirInv.copy(lightDir).multiplyScalar(-1);\n      var boundsVertices = [];\n      (_scene$current$parent = scene.current.parent) == null ? void 0 : _scene$current$parent.matrixWorld.identity();\n      bounds.setFromObject(scene.current, true);\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.max.z));\n      var worldVerts = boundsVertices.map(function (v) {\n        return v.clone();\n      });\n      bounds.getCenter(focusPos);\n      boundsVertices = boundsVertices.map(function (v) {\n        return v.clone().sub(focusPos);\n      });\n      var lightPlane = lpP.set(lightDirInv, 0);\n      var projectedVerts = boundsVertices.map(function (v) {\n        return lightPlane.projectPoint(v, new THREE.Vector3());\n      });\n      var centralVert = projectedVerts.reduce(function (a, b) {\n        return a.add(b);\n      }, v.set(0, 0, 0)).divideScalar(projectedVerts.length);\n      var radius = projectedVerts.map(function (v) {\n        return v.distanceTo(centralVert);\n      }).reduce(function (a, b) {\n        return Math.max(a, b);\n      });\n      var dirLength = boundsVertices.map(function (x) {\n        return x.dot(lightDir);\n      }).reduce(function (a, b) {\n        return Math.max(a, b);\n      }); // Shadows\n\n      camera.current.position.copy(lightDir.clone().multiplyScalar(dirLength).add(focusPos));\n      camera.current.lookAt(scene.current.localToWorld(focusPos.clone()));\n      var dirMatrix = lpM.lookAt(camera.current.position, focusPos, v.set(0, 1, 0));\n      camera.current.left = -radius;\n      camera.current.right = radius;\n      camera.current.top = radius;\n      camera.current.bottom = -radius;\n      var yOffset = v.set(0, radius, 0).applyMatrix4(dirMatrix);\n      var yTime = (camera.current.position.y + yOffset.y) / lightDir.y;\n      camera.current.near = 0.1;\n      camera.current.far = yTime;\n      camera.current.updateProjectionMatrix();\n      camera.current.updateMatrixWorld(); // Now find size of ground plane\n\n      var groundProjectedCoords = worldVerts.map(function (v) {\n        return v.add(lightDir.clone().multiplyScalar(-v.y / lightDir.y));\n      });\n      var centerPos = groundProjectedCoords.reduce(function (a, b) {\n        return a.add(b);\n      }, v.set(0, 0, 0)).divideScalar(groundProjectedCoords.length);\n      var maxSize = 2 * groundProjectedCoords.map(function (v) {\n        return Math.hypot(v.x - centerPos.x, v.z - centerPos.z);\n      }).reduce(function (a, b) {\n        return Math.max(a, b);\n      });\n      plane.current.scale.setScalar(maxSize);\n      plane.current.position.copy(centerPos);\n      if (debug) (_helper$current = helper.current) == null ? void 0 : _helper$current.update(); // Inject uniforms\n\n      normalMatB.viewMatrix.value = normalMat.viewMatrix.value = camera.current.matrixWorldInverse;\n      var dirLightNearPlane = lpF.setFromProjectionMatrix(lpM.multiplyMatrices(camera.current.projectionMatrix, camera.current.matrixWorldInverse)).planes[4];\n      causticsMaterial.cameraMatrixWorld = camera.current.matrixWorld;\n      causticsMaterial.cameraProjectionMatrixInv = camera.current.projectionMatrixInverse;\n      causticsMaterial.lightDir = lightDirInv;\n      causticsMaterial.lightPlaneNormal = dirLightNearPlane.normal;\n      causticsMaterial.lightPlaneConstant = dirLightNearPlane.constant;\n      causticsMaterial.near = camera.current.near;\n      causticsMaterial.far = camera.current.far;\n      causticsMaterial.resolution = resolution;\n      causticsMaterial.size = radius;\n      causticsMaterial.intensity = intensity;\n      causticsMaterial.worldRadius = worldRadius; // Switch the scene on\n\n      scene.current.visible = true; // Render front face normals\n\n      gl.setRenderTarget(normalTarget);\n      gl.clear();\n      scene.current.overrideMaterial = normalMat;\n      gl.render(scene.current, camera.current); // Render back face normals, if enabled\n\n      gl.setRenderTarget(normalTargetB);\n      gl.clear();\n\n      if (backside) {\n        scene.current.overrideMaterial = normalMatB;\n        gl.render(scene.current, camera.current);\n      } // Remove the override material\n\n\n      scene.current.overrideMaterial = null; // Render front face caustics\n\n      causticsMaterial.ior = ior;\n      plane.current.material.lightProjMatrix = camera.current.projectionMatrix;\n      plane.current.material.lightViewMatrix = camera.current.matrixWorldInverse;\n      causticsMaterial.normalTexture = normalTarget.texture;\n      causticsMaterial.depthTexture = normalTarget.depthTexture;\n      gl.setRenderTarget(causticsTarget);\n      gl.clear();\n      causticsQuad.render(gl); // Render back face caustics, if enabled\n\n      causticsMaterial.ior = backsideIOR;\n      causticsMaterial.normalTexture = normalTargetB.texture;\n      causticsMaterial.depthTexture = normalTargetB.depthTexture;\n      gl.setRenderTarget(causticsTargetB);\n      gl.clear();\n      if (backside) causticsQuad.render(gl); // Reset render target\n\n      gl.setRenderTarget(null); // Switch the scene off if caustics is all that's wanted\n\n      if (causticsOnly) scene.current.visible = false;\n    }\n  });\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(\"scene\", {\n    ref: scene\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: camera,\n    up: [0, 1, 0]\n  }), children), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: 2,\n    ref: plane,\n    \"rotation-x\": -Math.PI / 2\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"causticsProjectionMaterial\", {\n    transparent: true,\n    color: color,\n    causticsTexture: causticsTarget.texture,\n    causticsTextureB: causticsTargetB.texture,\n    blending: THREE.CustomBlending,\n    blendSrc: THREE.OneFactor,\n    blendDst: THREE.SrcAlphaFactor,\n    depthWrite: false\n  }), debug && /*#__PURE__*/React.createElement(Edges, null, /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: \"#ffff00\",\n    toneMapped: false\n  }))));\n});\nexport { Caustics };","map":{"version":3,"names":["_extends","THREE","React","extend","useThree","useFrame","useFBO","useHelper","shaderMaterial","Edges","FullScreenQuad","createNormalMaterial","side","FrontSide","viewMatrix","value","Matrix4","Object","assign","MeshNormalMaterial","onBeforeCompile","shader","uniforms","fragmentShader","replace","CausticsProjectionMaterial","causticsTexture","causticsTextureB","color","Color","lightProjMatrix","lightViewMatrix","CausticsMaterial","cameraMatrixWorld","cameraProjectionMatrixInv","normalTexture","depthTexture","lightDir","Vector3","lightPlaneNormal","lightPlaneConstant","near","far","modelMatrix","worldRadius","ior","bounces","resolution","size","intensity","NORMALPROPS","depth","minFilter","LinearFilter","magFilter","encoding","LinearEncoding","type","UnsignedByteType","CAUSTICPROPS","LinearMipmapLinearFilter","format","RGBAFormat","FloatType","generateMipmaps","Caustics","forwardRef","fref","debug","children","frames","causticsOnly","backside","backsideIOR","lightSource","props","ref","useRef","camera","scene","plane","gl","state","helper","CameraHelper","normalTarget","normalTargetB","causticsTarget","causticsTargetB","useState","normalMat","BackSide","normalMatB","causticsMaterial","causticsQuad","useLayoutEffect","current","updateWorldMatrix","count","v","lpF","Frustum","lpM","lpP","Plane","lightDirInv","bounds","Box3","focusPos","delta","Infinity","_scene$current$parent","_helper$current","Array","isArray","fromArray","normalize","copy","worldToLocal","getWorldPosition","multiplyScalar","boundsVertices","parent","matrixWorld","identity","setFromObject","push","min","x","y","z","max","worldVerts","map","clone","getCenter","sub","lightPlane","set","projectedVerts","projectPoint","centralVert","reduce","a","b","add","divideScalar","length","radius","distanceTo","Math","dirLength","dot","position","lookAt","localToWorld","dirMatrix","left","right","top","bottom","yOffset","applyMatrix4","yTime","updateProjectionMatrix","updateMatrixWorld","groundProjectedCoords","centerPos","maxSize","hypot","scale","setScalar","update","matrixWorldInverse","dirLightNearPlane","setFromProjectionMatrix","multiplyMatrices","projectionMatrix","planes","projectionMatrixInverse","normal","constant","visible","setRenderTarget","clear","overrideMaterial","render","material","texture","useImperativeHandle","createElement","up","renderOrder","PI","transparent","blending","CustomBlending","blendSrc","OneFactor","blendDst","SrcAlphaFactor","depthWrite","toneMapped"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@react-three/drei/core/Caustics.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nimport { useHelper } from './useHelper.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { Edges } from './Edges.js';\nimport { FullScreenQuad } from 'three-stdlib';\n\nfunction createNormalMaterial(side = THREE.FrontSide) {\n  const viewMatrix = {\n    value: new THREE.Matrix4()\n  };\n  return Object.assign(new THREE.MeshNormalMaterial({\n    side\n  }), {\n    viewMatrix,\n    onBeforeCompile: shader => {\n      shader.uniforms.viewMatrix = viewMatrix;\n      shader.fragmentShader = `vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n           return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n         }\\n` + shader.fragmentShader.replace('#include <normal_fragment_maps>', `#include <normal_fragment_maps>\n           normal = inverseTransformDirection( normal, viewMatrix );\\n`);\n    }\n  });\n}\n\nconst CausticsProjectionMaterial = shaderMaterial({\n  causticsTexture: null,\n  causticsTextureB: null,\n  color: new THREE.Color(),\n  lightProjMatrix: new THREE.Matrix4(),\n  lightViewMatrix: new THREE.Matrix4()\n}, `varying vec3 vWorldPosition;   \n   void main() {\n     gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n     vec4 worldPosition = modelMatrix * vec4(position, 1.);\n     vWorldPosition = worldPosition.xyz;\n   }`, `varying vec3 vWorldPosition;\n  uniform vec3 color;\n  uniform sampler2D causticsTexture; \n  uniform sampler2D causticsTextureB; \n  uniform mat4 lightProjMatrix;\n  uniform mat4 lightViewMatrix;\n   void main() {\n    // Apply caustics  \n    vec4 lightSpacePos = lightProjMatrix * lightViewMatrix * vec4(vWorldPosition, 1.0);\n    lightSpacePos.xyz /= lightSpacePos.w;\n    lightSpacePos.xyz = lightSpacePos.xyz * 0.5 + 0.5; \n    vec3 front = texture2D(causticsTexture, lightSpacePos.xy).rgb;\n    vec3 back = texture2D(causticsTextureB, lightSpacePos.xy).rgb;\n    gl_FragColor = vec4((front + back) * color, 1.0);\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n   }`);\nconst CausticsMaterial = shaderMaterial({\n  cameraMatrixWorld: new THREE.Matrix4(),\n  cameraProjectionMatrixInv: new THREE.Matrix4(),\n  normalTexture: null,\n  depthTexture: null,\n  lightDir: new THREE.Vector3(0, 1, 0),\n  lightPlaneNormal: new THREE.Vector3(0, 1, 0),\n  lightPlaneConstant: 0,\n  near: 0.1,\n  far: 100,\n  modelMatrix: new THREE.Matrix4(),\n  worldRadius: 1 / 40,\n  ior: 1.1,\n  bounces: 0,\n  resolution: 1024,\n  size: 10,\n  intensity: 0.5\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }`,\n/* glsl */\n`  \n  uniform mat4 cameraMatrixWorld;\n  uniform mat4 cameraProjectionMatrixInv;\n  uniform vec3 lightDir;\n  uniform vec3 lightPlaneNormal;\n  uniform float lightPlaneConstant;\n  uniform float near;\n  uniform float far;\n  uniform float time;\n  uniform float worldRadius;\n  uniform float resolution;\n  uniform float size;\n  uniform float intensity;\n  uniform float ior;\n  precision highp isampler2D;\n  precision highp usampler2D;\n  uniform sampler2D normalTexture;\n  uniform sampler2D depthTexture;\n  uniform float bounces;\n  varying vec2 vUv;\n  vec3 WorldPosFromDepth(float depth, vec2 coord) {\n    float z = depth * 2.0 - 1.0;\n    vec4 clipSpacePosition = vec4(coord * 2.0 - 1.0, z, 1.0);\n    vec4 viewSpacePosition = cameraProjectionMatrixInv * clipSpacePosition;\n    // Perspective division\n    viewSpacePosition /= viewSpacePosition.w;\n    vec4 worldSpacePosition = cameraMatrixWorld * viewSpacePosition;\n    return worldSpacePosition.xyz;\n  }                  \n  float sdPlane( vec3 p, vec3 n, float h ) {\n    // n must be normalized\n    return dot(p,n) + h;\n  }\n  float planeIntersect( vec3 ro, vec3 rd, vec4 p ) {\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n  }\n  vec3 totalInternalReflection(vec3 ro, vec3 rd, vec3 pos, vec3 normal, float ior, out vec3 rayOrigin, out vec3 rayDirection) {\n    rayOrigin = ro;\n    rayDirection = rd;\n    rayDirection = refract(rayDirection, normal, 1.0 / ior);\n    rayOrigin = pos + rayDirection * 0.1;\n    return rayDirection;\n  }\n  void main() {\n    // Each sample consists of random offset in the x and y direction\n    float caustic = 0.0;\n    float causticTexelSize = (1.0 / resolution) * size * 2.0;\n    float texelsNeeded = worldRadius / causticTexelSize;\n    float sampleRadius = texelsNeeded / resolution;\n    float sum = 0.0;\n    if (texture2D(depthTexture, vUv).x == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec2 offset1 = vec2(-0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset2 = vec2(-0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset3 = vec2(0.5, 0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 offset4 = vec2(0.5, -0.5);//vec2(rand() - 0.5, rand() - 0.5);\n    vec2 uv1 = vUv + offset1 * sampleRadius;\n    vec2 uv2 = vUv + offset2 * sampleRadius;\n    vec2 uv3 = vUv + offset3 * sampleRadius;\n    vec2 uv4 = vUv + offset4 * sampleRadius;\n    vec3 normal1 = texture2D(normalTexture, uv1, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal2 = texture2D(normalTexture, uv2, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal3 = texture2D(normalTexture, uv3, -10.0).rgb * 2.0 - 1.0;\n    vec3 normal4 = texture2D(normalTexture, uv4, -10.0).rgb * 2.0 - 1.0;\n    float depth1 = texture2D(depthTexture, uv1, -10.0).x;\n    float depth2 = texture2D(depthTexture, uv2, -10.0).x;\n    float depth3 = texture2D(depthTexture, uv3, -10.0).x;\n    float depth4 = texture2D(depthTexture, uv4, -10.0).x;\n    // Sanity check the depths\n    if (depth1 == 1.0 || depth2 == 1.0 || depth3 == 1.0 || depth4 == 1.0) {\n      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    vec3 pos1 = WorldPosFromDepth(depth1, uv1);\n    vec3 pos2 = WorldPosFromDepth(depth2, uv2);\n    vec3 pos3 = WorldPosFromDepth(depth3, uv3);\n    vec3 pos4 = WorldPosFromDepth(depth4, uv4);\n    vec3 originPos1 = WorldPosFromDepth(0.0, uv1);\n    vec3 originPos2 = WorldPosFromDepth(0.0, uv2);\n    vec3 originPos3 = WorldPosFromDepth(0.0, uv3);\n    vec3 originPos4 = WorldPosFromDepth(0.0, uv4);\n    vec3 endPos1, endPos2, endPos3, endPos4;\n    vec3 endDir1, endDir2, endDir3, endDir4;\n    totalInternalReflection(originPos1, lightDir, pos1, normal1, ior, endPos1, endDir1);\n    totalInternalReflection(originPos2, lightDir, pos2, normal2, ior, endPos2, endDir2);\n    totalInternalReflection(originPos3, lightDir, pos3, normal3, ior, endPos3, endDir3);\n    totalInternalReflection(originPos4, lightDir, pos4, normal4, ior, endPos4, endDir4);\n    float lightPosArea = length(cross(originPos2 - originPos1, originPos3 - originPos1)) + length(cross(originPos3 - originPos1, originPos4 - originPos1));\n    float t1 = planeIntersect(endPos1, endDir1, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t2 = planeIntersect(endPos2, endDir2, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t3 = planeIntersect(endPos3, endDir3, vec4(lightPlaneNormal, lightPlaneConstant));\n    float t4 = planeIntersect(endPos4, endDir4, vec4(lightPlaneNormal, lightPlaneConstant));\n    vec3 finalPos1 = endPos1 + endDir1 * t1;\n    vec3 finalPos2 = endPos2 + endDir2 * t2;\n    vec3 finalPos3 = endPos3 + endDir3 * t3;\n    vec3 finalPos4 = endPos4 + endDir4 * t4;\n    float finalArea = length(cross(finalPos2 - finalPos1, finalPos3 - finalPos1)) + length(cross(finalPos3 - finalPos1, finalPos4 - finalPos1));\n    caustic += intensity * (lightPosArea / finalArea);\n    // Calculate the area of the triangle in light spaces\n    gl_FragColor = vec4(vec3(max(caustic, 0.0)), 1.0);\n  }`);\nconst NORMALPROPS = {\n  depth: true,\n  minFilter: THREE.LinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  type: THREE.UnsignedByteType\n};\nconst CAUSTICPROPS = {\n  minFilter: THREE.LinearMipmapLinearFilter,\n  magFilter: THREE.LinearFilter,\n  encoding: THREE.LinearEncoding,\n  format: THREE.RGBAFormat,\n  type: THREE.FloatType,\n  generateMipmaps: true\n};\nconst Caustics = /*#__PURE__*/React.forwardRef(({\n  debug,\n  children,\n  frames = 1,\n  ior = 1.1,\n  color = 'white',\n  causticsOnly = false,\n  backside = false,\n  backsideIOR = 1.1,\n  worldRadius = 0.3125,\n  intensity = 0.05,\n  resolution = 2024,\n  lightSource = [5, 5, 5],\n  ...props\n}, fref) => {\n  extend({\n    CausticsProjectionMaterial\n  });\n  const ref = React.useRef(null);\n  const camera = React.useRef(null);\n  const scene = React.useRef(null);\n  const plane = React.useRef(null);\n  const gl = useThree(state => state.gl);\n  const helper = useHelper(debug && camera, THREE.CameraHelper); // Buffers for front and back faces\n\n  const normalTarget = useFBO(resolution, resolution, NORMALPROPS);\n  const normalTargetB = useFBO(resolution, resolution, NORMALPROPS);\n  const causticsTarget = useFBO(resolution, resolution, CAUSTICPROPS);\n  const causticsTargetB = useFBO(resolution, resolution, CAUSTICPROPS); // Normal materials for front and back faces\n\n  const [normalMat] = React.useState(() => createNormalMaterial());\n  const [normalMatB] = React.useState(() => createNormalMaterial(THREE.BackSide)); // The quad that catches the caustics\n\n  const [causticsMaterial] = React.useState(() => new CausticsMaterial());\n  const [causticsQuad] = React.useState(() => new FullScreenQuad(causticsMaterial));\n  React.useLayoutEffect(() => {\n    ref.current.updateWorldMatrix(false, true);\n  });\n  let count = 0;\n  const v = new THREE.Vector3();\n  const lpF = new THREE.Frustum();\n  const lpM = new THREE.Matrix4();\n  const lpP = new THREE.Plane();\n  const lightDir = new THREE.Vector3();\n  const lightDirInv = new THREE.Vector3();\n  const bounds = new THREE.Box3();\n  const focusPos = new THREE.Vector3();\n  useFrame((state, delta) => {\n    if (frames === Infinity || count++ < frames) {\n      var _scene$current$parent, _helper$current;\n\n      if (Array.isArray(lightSource)) lightDir.fromArray(lightSource).normalize();else lightDir.copy(ref.current.worldToLocal(lightSource.current.getWorldPosition(v)).normalize());\n      lightDirInv.copy(lightDir).multiplyScalar(-1);\n      let boundsVertices = [];\n      (_scene$current$parent = scene.current.parent) == null ? void 0 : _scene$current$parent.matrixWorld.identity();\n      bounds.setFromObject(scene.current, true);\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.min.x, bounds.max.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.min.y, bounds.max.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.min.z));\n      boundsVertices.push(new THREE.Vector3(bounds.max.x, bounds.max.y, bounds.max.z));\n      const worldVerts = boundsVertices.map(v => v.clone());\n      bounds.getCenter(focusPos);\n      boundsVertices = boundsVertices.map(v => v.clone().sub(focusPos));\n      const lightPlane = lpP.set(lightDirInv, 0);\n      const projectedVerts = boundsVertices.map(v => lightPlane.projectPoint(v, new THREE.Vector3()));\n      const centralVert = projectedVerts.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(projectedVerts.length);\n      const radius = projectedVerts.map(v => v.distanceTo(centralVert)).reduce((a, b) => Math.max(a, b));\n      const dirLength = boundsVertices.map(x => x.dot(lightDir)).reduce((a, b) => Math.max(a, b)); // Shadows\n\n      camera.current.position.copy(lightDir.clone().multiplyScalar(dirLength).add(focusPos));\n      camera.current.lookAt(scene.current.localToWorld(focusPos.clone()));\n      const dirMatrix = lpM.lookAt(camera.current.position, focusPos, v.set(0, 1, 0));\n      camera.current.left = -radius;\n      camera.current.right = radius;\n      camera.current.top = radius;\n      camera.current.bottom = -radius;\n      const yOffset = v.set(0, radius, 0).applyMatrix4(dirMatrix);\n      const yTime = (camera.current.position.y + yOffset.y) / lightDir.y;\n      camera.current.near = 0.1;\n      camera.current.far = yTime;\n      camera.current.updateProjectionMatrix();\n      camera.current.updateMatrixWorld(); // Now find size of ground plane\n\n      const groundProjectedCoords = worldVerts.map(v => v.add(lightDir.clone().multiplyScalar(-v.y / lightDir.y)));\n      const centerPos = groundProjectedCoords.reduce((a, b) => a.add(b), v.set(0, 0, 0)).divideScalar(groundProjectedCoords.length);\n      const maxSize = 2 * groundProjectedCoords.map(v => Math.hypot(v.x - centerPos.x, v.z - centerPos.z)).reduce((a, b) => Math.max(a, b));\n      plane.current.scale.setScalar(maxSize);\n      plane.current.position.copy(centerPos);\n      if (debug) (_helper$current = helper.current) == null ? void 0 : _helper$current.update(); // Inject uniforms\n\n      normalMatB.viewMatrix.value = normalMat.viewMatrix.value = camera.current.matrixWorldInverse;\n      const dirLightNearPlane = lpF.setFromProjectionMatrix(lpM.multiplyMatrices(camera.current.projectionMatrix, camera.current.matrixWorldInverse)).planes[4];\n      causticsMaterial.cameraMatrixWorld = camera.current.matrixWorld;\n      causticsMaterial.cameraProjectionMatrixInv = camera.current.projectionMatrixInverse;\n      causticsMaterial.lightDir = lightDirInv;\n      causticsMaterial.lightPlaneNormal = dirLightNearPlane.normal;\n      causticsMaterial.lightPlaneConstant = dirLightNearPlane.constant;\n      causticsMaterial.near = camera.current.near;\n      causticsMaterial.far = camera.current.far;\n      causticsMaterial.resolution = resolution;\n      causticsMaterial.size = radius;\n      causticsMaterial.intensity = intensity;\n      causticsMaterial.worldRadius = worldRadius; // Switch the scene on\n\n      scene.current.visible = true; // Render front face normals\n\n      gl.setRenderTarget(normalTarget);\n      gl.clear();\n      scene.current.overrideMaterial = normalMat;\n      gl.render(scene.current, camera.current); // Render back face normals, if enabled\n\n      gl.setRenderTarget(normalTargetB);\n      gl.clear();\n\n      if (backside) {\n        scene.current.overrideMaterial = normalMatB;\n        gl.render(scene.current, camera.current);\n      } // Remove the override material\n\n\n      scene.current.overrideMaterial = null; // Render front face caustics\n\n      causticsMaterial.ior = ior;\n      plane.current.material.lightProjMatrix = camera.current.projectionMatrix;\n      plane.current.material.lightViewMatrix = camera.current.matrixWorldInverse;\n      causticsMaterial.normalTexture = normalTarget.texture;\n      causticsMaterial.depthTexture = normalTarget.depthTexture;\n      gl.setRenderTarget(causticsTarget);\n      gl.clear();\n      causticsQuad.render(gl); // Render back face caustics, if enabled\n\n      causticsMaterial.ior = backsideIOR;\n      causticsMaterial.normalTexture = normalTargetB.texture;\n      causticsMaterial.depthTexture = normalTargetB.depthTexture;\n      gl.setRenderTarget(causticsTargetB);\n      gl.clear();\n      if (backside) causticsQuad.render(gl); // Reset render target\n\n      gl.setRenderTarget(null); // Switch the scene off if caustics is all that's wanted\n\n      if (causticsOnly) scene.current.visible = false;\n    }\n  });\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(\"scene\", {\n    ref: scene\n  }, /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: camera,\n    up: [0, 1, 0]\n  }), children), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: 2,\n    ref: plane,\n    \"rotation-x\": -Math.PI / 2\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"causticsProjectionMaterial\", {\n    transparent: true,\n    color: color,\n    causticsTexture: causticsTarget.texture,\n    causticsTextureB: causticsTargetB.texture,\n    blending: THREE.CustomBlending,\n    blendSrc: THREE.OneFactor,\n    blendDst: THREE.SrcAlphaFactor,\n    depthWrite: false\n  }), debug && /*#__PURE__*/React.createElement(Edges, null, /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: \"#ffff00\",\n    toneMapped: false\n  }))));\n});\n\nexport { Caustics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}