{"ast":null,"code":"import _objectSpread from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  var material = /*#__PURE__*/function (_THREE$ShaderMaterial) {\n    _inherits(material, _THREE$ShaderMaterial);\n\n    var _super = _createSuper(material);\n\n    function material() {\n      var _this;\n\n      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, material);\n\n      var entries = Object.entries(uniforms); // Create unforms and shaders\n\n      _this = _super.call(this, {\n        uniforms: entries.reduce(function (acc, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              name = _ref2[0],\n              value = _ref2[1];\n\n          var uniform = THREE.UniformsUtils.clone(_defineProperty({}, name, {\n            value: value\n          }));\n          return _objectSpread(_objectSpread({}, acc), uniform);\n        }, {}),\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader\n      }); // Create getter/setters\n\n      _defineProperty(_assertThisInitialized(_this), \"key\", '');\n\n      entries.forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            name = _ref4[0];\n\n        return Object.defineProperty(_assertThisInitialized(_this), name, {\n          get: function get() {\n            return _this.uniforms[name].value;\n          },\n          set: function set(v) {\n            return _this.uniforms[name].value = v;\n          }\n        });\n      }); // Assign parameters, this might include uniforms\n\n      Object.assign(_assertThisInitialized(_this), parameters); // Call onInit\n\n      if (onInit) onInit(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    return _createClass(material);\n  }(THREE.ShaderMaterial);\n\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };","map":{"version":3,"names":["THREE","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","material","parameters","entries","Object","reduce","acc","name","value","uniform","UniformsUtils","clone","forEach","defineProperty","get","set","v","assign","ShaderMaterial","key","MathUtils","generateUUID"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@react-three/drei/core/shaderMaterial.js"],"sourcesContent":["import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class extends THREE.ShaderMaterial {\n    key = '';\n\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      })); // Assign parameters, this might include uniforms\n\n      Object.assign(this, parameters); // Call onInit\n\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,cAAhD,EAAgEC,MAAhE,EAAwE;EACtE,IAAMC,QAAQ;IAAA;;IAAA;;IAGZ,oBAA6B;MAAA;;MAAA,IAAjBC,UAAiB,uEAAJ,EAAI;;MAAA;;MAC3B,IAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeN,QAAf,CAAhB,CAD2B,CACe;;MAE1C,0BAAM;QACJA,QAAQ,EAAEM,OAAO,CAACE,MAAR,CAAe,UAACC,GAAD,QAAwB;UAAA;UAAA,IAAjBC,IAAiB;UAAA,IAAXC,KAAW;;UAC/C,IAAMC,OAAO,GAAGd,KAAK,CAACe,aAAN,CAAoBC,KAApB,qBACbJ,IADa,EACN;YACNC,KAAK,EAALA;UADM,CADM,EAAhB;UAKA,uCAAYF,GAAZ,GACKG,OADL;QAGD,CATS,EASP,EATO,CADN;QAWJX,YAAY,EAAZA,YAXI;QAYJC,cAAc,EAAdA;MAZI,CAAN,EAH2B,CAgBvB;;MAhBuB,sDAFvB,EAEuB;;MAkB3BI,OAAO,CAACS,OAAR,CAAgB;QAAA;QAAA,IAAEL,IAAF;;QAAA,OAAYH,MAAM,CAACS,cAAP,gCAA4BN,IAA5B,EAAkC;UAC5DO,GAAG,EAAE;YAAA,OAAM,MAAKjB,QAAL,CAAcU,IAAd,EAAoBC,KAA1B;UAAA,CADuD;UAE5DO,GAAG,EAAE,aAAAC,CAAC;YAAA,OAAI,MAAKnB,QAAL,CAAcU,IAAd,EAAoBC,KAApB,GAA4BQ,CAAhC;UAAA;QAFsD,CAAlC,CAAZ;MAAA,CAAhB,EAlB2B,CAqBtB;;MAELZ,MAAM,CAACa,MAAP,gCAAoBf,UAApB,EAvB2B,CAuBM;;MAEjC,IAAIF,MAAJ,EAAYA,MAAM,+BAAN;MAzBe;IA0B5B;;IA7BW;EAAA,EAAiBL,KAAK,CAACuB,cAAvB,CAAd;;EAgCAjB,QAAQ,CAACkB,GAAT,GAAexB,KAAK,CAACyB,SAAN,CAAgBC,YAAhB,EAAf;EACA,OAAOpB,QAAP;AACD;;AAED,SAASL,cAAT"},"metadata":{},"sourceType":"module"}