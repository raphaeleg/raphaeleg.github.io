{"ast":null,"code":"import _objectSpread from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _get from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nimport * as THREE from \"three\";\n\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n  var i;\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i++) {\n      dst[i + dstOffset] = src[i];\n    }\n  }\n\n  return dst;\n}\n\nfunction convertPoints(points) {\n  if (points instanceof Float32Array) return points;\n  if (points instanceof THREE.BufferGeometry) return points.getAttribute(\"position\").array;\n  return points.map(function (p) {\n    var isArray = Array.isArray(p);\n    return p instanceof THREE.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n  }).flat();\n}\n\nvar MeshLineGeometry = /*#__PURE__*/function (_THREE$BufferGeometry) {\n  _inherits(MeshLineGeometry, _THREE$BufferGeometry);\n\n  var _super = _createSuper(MeshLineGeometry);\n\n  function MeshLineGeometry() {\n    var _this;\n\n    _classCallCheck(this, MeshLineGeometry);\n\n    _this = _super.call(this);\n\n    __publicField(_assertThisInitialized(_this), \"type\", \"MeshLine\");\n\n    __publicField(_assertThisInitialized(_this), \"isMeshLine\", true);\n\n    __publicField(_assertThisInitialized(_this), \"positions\", []);\n\n    __publicField(_assertThisInitialized(_this), \"previous\", []);\n\n    __publicField(_assertThisInitialized(_this), \"next\", []);\n\n    __publicField(_assertThisInitialized(_this), \"side\", []);\n\n    __publicField(_assertThisInitialized(_this), \"width\", []);\n\n    __publicField(_assertThisInitialized(_this), \"indices_array\", []);\n\n    __publicField(_assertThisInitialized(_this), \"uvs\", []);\n\n    __publicField(_assertThisInitialized(_this), \"counters\", []);\n\n    __publicField(_assertThisInitialized(_this), \"widthCallback\", null);\n\n    __publicField(_assertThisInitialized(_this), \"_attributes\");\n\n    __publicField(_assertThisInitialized(_this), \"_points\", []);\n\n    __publicField(_assertThisInitialized(_this), \"points\");\n\n    __publicField(_assertThisInitialized(_this), \"matrixWorld\", new THREE.Matrix4());\n\n    Object.defineProperties(_assertThisInitialized(_this), {\n      points: {\n        enumerable: true,\n        get: function get() {\n          return this._points;\n        },\n        set: function set(value) {\n          this.setPoints(value, this.widthCallback);\n        }\n      }\n    });\n    return _this;\n  }\n\n  _createClass(MeshLineGeometry, [{\n    key: \"setMatrixWorld\",\n    value: function setMatrixWorld(matrixWorld) {\n      this.matrixWorld = matrixWorld;\n    }\n  }, {\n    key: \"setPoints\",\n    value: function setPoints(points, wcb) {\n      points = convertPoints(points);\n      this._points = points;\n      this.widthCallback = wcb != null ? wcb : null;\n      this.positions = [];\n      this.counters = [];\n\n      if (points.length && points[0] instanceof THREE.Vector3) {\n        for (var j = 0; j < points.length; j++) {\n          var p = points[j];\n          var c = j / (points.length - 1);\n          this.positions.push(p.x, p.y, p.z);\n          this.positions.push(p.x, p.y, p.z);\n          this.counters.push(c);\n          this.counters.push(c);\n        }\n      } else {\n        for (var _j = 0; _j < points.length; _j += 3) {\n          var _c = _j / (points.length - 1);\n\n          this.positions.push(points[_j], points[_j + 1], points[_j + 2]);\n          this.positions.push(points[_j], points[_j + 1], points[_j + 2]);\n          this.counters.push(_c);\n          this.counters.push(_c);\n        }\n      }\n\n      this.process();\n    }\n  }, {\n    key: \"compareV3\",\n    value: function compareV3(a, b) {\n      var aa = a * 6;\n      var ab = b * 6;\n      return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n    }\n  }, {\n    key: \"copyV3\",\n    value: function copyV3(a) {\n      var aa = a * 6;\n      return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n    }\n  }, {\n    key: \"process\",\n    value: function process() {\n      var l = this.positions.length / 6;\n      this.previous = [];\n      this.next = [];\n      this.side = [];\n      this.width = [];\n      this.indices_array = [];\n      this.uvs = [];\n      var w;\n      var v;\n\n      if (this.compareV3(0, l - 1)) {\n        v = this.copyV3(l - 2);\n      } else {\n        v = this.copyV3(0);\n      }\n\n      this.previous.push(v[0], v[1], v[2]);\n      this.previous.push(v[0], v[1], v[2]);\n\n      for (var j = 0; j < l; j++) {\n        this.side.push(1);\n        this.side.push(-1);\n        if (this.widthCallback) w = this.widthCallback(j / (l - 1));else w = 1;\n        this.width.push(w);\n        this.width.push(w);\n        this.uvs.push(j / (l - 1), 0);\n        this.uvs.push(j / (l - 1), 1);\n\n        if (j < l - 1) {\n          v = this.copyV3(j);\n          this.previous.push(v[0], v[1], v[2]);\n          this.previous.push(v[0], v[1], v[2]);\n          var n = j * 2;\n          this.indices_array.push(n, n + 1, n + 2);\n          this.indices_array.push(n + 2, n + 1, n + 3);\n        }\n\n        if (j > 0) {\n          v = this.copyV3(j);\n          this.next.push(v[0], v[1], v[2]);\n          this.next.push(v[0], v[1], v[2]);\n        }\n      }\n\n      if (this.compareV3(l - 1, 0)) {\n        v = this.copyV3(1);\n      } else {\n        v = this.copyV3(l - 1);\n      }\n\n      this.next.push(v[0], v[1], v[2]);\n      this.next.push(v[0], v[1], v[2]);\n\n      if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n        this._attributes = {\n          position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n          previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n          next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n          side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n          width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n          uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n          index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n          counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n        };\n      } else {\n        this._attributes.position.copyArray(new Float32Array(this.positions));\n\n        this._attributes.position.needsUpdate = true;\n\n        this._attributes.previous.copyArray(new Float32Array(this.previous));\n\n        this._attributes.previous.needsUpdate = true;\n\n        this._attributes.next.copyArray(new Float32Array(this.next));\n\n        this._attributes.next.needsUpdate = true;\n\n        this._attributes.side.copyArray(new Float32Array(this.side));\n\n        this._attributes.side.needsUpdate = true;\n\n        this._attributes.width.copyArray(new Float32Array(this.width));\n\n        this._attributes.width.needsUpdate = true;\n\n        this._attributes.uv.copyArray(new Float32Array(this.uvs));\n\n        this._attributes.uv.needsUpdate = true;\n\n        this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n\n        this._attributes.index.needsUpdate = true;\n      }\n\n      this.setAttribute(\"position\", this._attributes.position);\n      this.setAttribute(\"previous\", this._attributes.previous);\n      this.setAttribute(\"next\", this._attributes.next);\n      this.setAttribute(\"side\", this._attributes.side);\n      this.setAttribute(\"width\", this._attributes.width);\n      this.setAttribute(\"uv\", this._attributes.uv);\n      this.setAttribute(\"counters\", this._attributes.counters);\n      this.setAttribute(\"position\", this._attributes.position);\n      this.setAttribute(\"previous\", this._attributes.previous);\n      this.setAttribute(\"next\", this._attributes.next);\n      this.setAttribute(\"side\", this._attributes.side);\n      this.setAttribute(\"width\", this._attributes.width);\n      this.setAttribute(\"uv\", this._attributes.uv);\n      this.setAttribute(\"counters\", this._attributes.counters);\n      this.setIndex(this._attributes.index);\n      this.computeBoundingSphere();\n      this.computeBoundingBox();\n    }\n  }, {\n    key: \"advance\",\n    value: function advance(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          z = _ref.z;\n      var positions = this._attributes.position.array;\n      var previous = this._attributes.previous.array;\n      var next = this._attributes.next.array;\n      var l = positions.length;\n      memcpy(positions, 0, previous, 0, l);\n      memcpy(positions, 6, positions, 0, l - 6);\n      positions[l - 6] = x;\n      positions[l - 5] = y;\n      positions[l - 4] = z;\n      positions[l - 3] = x;\n      positions[l - 2] = y;\n      positions[l - 1] = z;\n      memcpy(positions, 6, next, 0, l - 6);\n      next[l - 6] = x;\n      next[l - 5] = y;\n      next[l - 4] = z;\n      next[l - 3] = x;\n      next[l - 2] = y;\n      next[l - 1] = z;\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.needsUpdate = true;\n    }\n  }]);\n\n  return MeshLineGeometry;\n}(THREE.BufferGeometry);\n\nvar vertexShader = \"\\n  #include <common>\\n  #include <logdepthbuf_pars_vertex>\\n  #include <fog_pars_vertex>\\n\\n  attribute vec3 previous;\\n  attribute vec3 next;\\n  attribute float side;\\n  attribute float width;\\n  attribute float counters;\\n  \\n  uniform vec2 resolution;\\n  uniform float lineWidth;\\n  uniform vec3 color;\\n  uniform float opacity;\\n  uniform float sizeAttenuation;\\n  \\n  varying vec2 vUV;\\n  varying vec4 vColor;\\n  varying float vCounters;\\n  \\n  vec2 fix(vec4 i, float aspect) {\\n    vec2 res = i.xy / i.w;\\n    res.x *= aspect;\\n  \\tvCounters = counters;\\n    return res;\\n  }\\n  \\n  void main() {\\n    float aspect = resolution.x / resolution.y;\\n    vColor = vec4(color, opacity);\\n    vUV = uv;\\n  \\n    mat4 m = projectionMatrix * modelViewMatrix;\\n    vec4 finalPosition = m * vec4(position, 1.0);\\n    vec4 prevPos = m * vec4(previous, 1.0);\\n    vec4 nextPos = m * vec4(next, 1.0);\\n  \\n    vec2 currentP = fix(finalPosition, aspect);\\n    vec2 prevP = fix(prevPos, aspect);\\n    vec2 nextP = fix(nextPos, aspect);\\n  \\n    float w = lineWidth * width;\\n  \\n    vec2 dir;\\n    if (nextP == currentP) dir = normalize(currentP - prevP);\\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\\n    else {\\n      vec2 dir1 = normalize(currentP - prevP);\\n      vec2 dir2 = normalize(nextP - currentP);\\n      dir = normalize(dir1 + dir2);\\n  \\n      vec2 perp = vec2(-dir1.y, dir1.x);\\n      vec2 miter = vec2(-dir.y, dir.x);\\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\\n    }\\n  \\n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\\n    normal.xy *= .5 * w;\\n    //normal *= projectionMatrix;\\n    if (sizeAttenuation == 0.) {\\n      normal.xy *= finalPosition.w;\\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\\n    }\\n  \\n    finalPosition.xy += normal.xy * side;\\n    gl_Position = finalPosition;\\n    #include <logdepthbuf_vertex>\\n    #include <fog_vertex>\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n    #include <fog_vertex>\\n  }\\n\";\nvar fragmentShader = \"\\n  #include <fog_pars_fragment>\\n  #include <logdepthbuf_pars_fragment>\\n  \\n  uniform sampler2D map;\\n  uniform sampler2D alphaMap;\\n  uniform float useMap;\\n  uniform float useAlphaMap;\\n  uniform float useDash;\\n  uniform float dashArray;\\n  uniform float dashOffset;\\n  uniform float dashRatio;\\n  uniform float visibility;\\n  uniform float alphaTest;\\n  uniform vec2 repeat;\\n  \\n  varying vec2 vUV;\\n  varying vec4 vColor;\\n  varying float vCounters;\\n  \\n  void main() {\\n    #include <logdepthbuf_fragment>\\n    vec4 c = vColor;\\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\\n    if (c.a < alphaTest) discard;\\n    if (useDash == 1.) {\\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\\n    }\\n    gl_FragColor = c;\\n    gl_FragColor.a *= step(vCounters, visibility);\\n    #include <fog_fragment>\\n    #include <tonemapping_fragment>\\n    #include <encodings_fragment>\\n  }\\n\";\n\nvar MeshLineMaterial = /*#__PURE__*/function (_THREE$ShaderMaterial) {\n  _inherits(MeshLineMaterial, _THREE$ShaderMaterial);\n\n  var _super2 = _createSuper(MeshLineMaterial);\n\n  function MeshLineMaterial(parameters) {\n    var _this2;\n\n    _classCallCheck(this, MeshLineMaterial);\n\n    _this2 = _super2.call(this, {\n      uniforms: _objectSpread(_objectSpread({}, THREE.UniformsLib.fog), {}, {\n        lineWidth: {\n          value: 1\n        },\n        map: {\n          value: null\n        },\n        useMap: {\n          value: 0\n        },\n        alphaMap: {\n          value: null\n        },\n        useAlphaMap: {\n          value: 0\n        },\n        color: {\n          value: new THREE.Color(16777215)\n        },\n        opacity: {\n          value: 1\n        },\n        resolution: {\n          value: new THREE.Vector2(1, 1)\n        },\n        sizeAttenuation: {\n          value: 1\n        },\n        dashArray: {\n          value: 0\n        },\n        dashOffset: {\n          value: 0\n        },\n        dashRatio: {\n          value: 0.5\n        },\n        useDash: {\n          value: 0\n        },\n        visibility: {\n          value: 1\n        },\n        alphaTest: {\n          value: 0\n        },\n        repeat: {\n          value: new THREE.Vector2(1, 1)\n        }\n      }),\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    });\n\n    __publicField(_assertThisInitialized(_this2), \"lineWidth\");\n\n    __publicField(_assertThisInitialized(_this2), \"map\");\n\n    __publicField(_assertThisInitialized(_this2), \"useMap\");\n\n    __publicField(_assertThisInitialized(_this2), \"alphaMap\");\n\n    __publicField(_assertThisInitialized(_this2), \"useAlphaMap\");\n\n    __publicField(_assertThisInitialized(_this2), \"color\");\n\n    __publicField(_assertThisInitialized(_this2), \"resolution\");\n\n    __publicField(_assertThisInitialized(_this2), \"sizeAttenuation\");\n\n    __publicField(_assertThisInitialized(_this2), \"dashArray\");\n\n    __publicField(_assertThisInitialized(_this2), \"dashOffset\");\n\n    __publicField(_assertThisInitialized(_this2), \"dashRatio\");\n\n    __publicField(_assertThisInitialized(_this2), \"useDash\");\n\n    __publicField(_assertThisInitialized(_this2), \"visibility\");\n\n    __publicField(_assertThisInitialized(_this2), \"repeat\");\n\n    _this2.type = \"MeshLineMaterial\";\n    Object.defineProperties(_assertThisInitialized(_this2), {\n      lineWidth: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set: function set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.map.value;\n        },\n        set: function set(value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.useMap.value;\n        },\n        set: function set(value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set: function set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set: function set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.color.value;\n        },\n        set: function set(value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.opacity.value;\n        },\n        set: function set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.resolution.value;\n        },\n        set: function set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set: function set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashArray.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set: function set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.useDash.value;\n        },\n        set: function set(value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.visibility.value;\n        },\n        set: function set(value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set: function set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.repeat.value;\n        },\n        set: function set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n\n    _this2.setValues(parameters);\n\n    return _this2;\n  }\n\n  _createClass(MeshLineMaterial, [{\n    key: \"copy\",\n    value: function copy(source) {\n      _get(_getPrototypeOf(MeshLineMaterial.prototype), \"copy\", this).call(this, source);\n\n      this.lineWidth = source.lineWidth;\n      this.map = source.map;\n      this.useMap = source.useMap;\n      this.alphaMap = source.alphaMap;\n      this.useAlphaMap = source.useAlphaMap;\n      this.color.copy(source.color);\n      this.opacity = source.opacity;\n      this.resolution.copy(source.resolution);\n      this.sizeAttenuation = source.sizeAttenuation;\n      this.dashArray = source.dashArray;\n      this.dashOffset = source.dashOffset;\n      this.dashRatio = source.dashRatio;\n      this.useDash = source.useDash;\n      this.visibility = source.visibility;\n      this.alphaTest = source.alphaTest;\n      this.repeat.copy(source.repeat);\n      return this;\n    }\n  }]);\n\n  return MeshLineMaterial;\n}(THREE.ShaderMaterial);\n\nfunction raycast(raycaster, intersects) {\n  var inverseMatrix = new THREE.Matrix4();\n  var ray = new THREE.Ray();\n  var sphere = new THREE.Sphere();\n  var interRay = new THREE.Vector3();\n  var geometry = this.geometry;\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n  if (!raycaster.ray.intersectSphere(sphere, interRay)) return;\n  inverseMatrix.copy(this.matrixWorld).invert();\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n  var vStart = new THREE.Vector3();\n  var vEnd = new THREE.Vector3();\n  var interSegment = new THREE.Vector3();\n  var step = this instanceof THREE.LineSegments ? 2 : 1;\n  var index = geometry.index;\n  var attributes = geometry.attributes;\n\n  if (index !== null) {\n    var indices = index.array;\n    var positions = attributes.position.array;\n    var widths = attributes.width.array;\n\n    for (var i = 0, l = indices.length - 1; i < l; i += step) {\n      var a = indices[i];\n      var b = indices[i + 1];\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      var width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\n      var precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n      var precisionSq = precision * precision;\n      var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n      if (distSq > precisionSq) continue;\n      interRay.applyMatrix4(this.matrixWorld);\n      var distance = raycaster.ray.origin.distanceTo(interRay);\n      if (distance < raycaster.near || distance > raycaster.far) continue;\n      intersects.push({\n        distance: distance,\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: void 0,\n        object: this\n      });\n      i = l;\n    }\n  }\n}\n\nexport { MeshLineGeometry, MeshLineMaterial, raycast };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","THREE","memcpy","src","srcOffset","dst","dstOffset","length","i","subarray","slice","buffer","set","convertPoints","points","Float32Array","BufferGeometry","getAttribute","array","map","p","isArray","Array","Vector3","x","y","z","Vector2","flat","MeshLineGeometry","Matrix4","defineProperties","get","_points","setPoints","widthCallback","matrixWorld","wcb","positions","counters","j","c","push","process","a","b","aa","ab","l","previous","next","side","width","indices_array","uvs","w","v","compareV3","copyV3","n","_attributes","position","count","BufferAttribute","uv","index","Uint16Array","copyArray","needsUpdate","setAttribute","setIndex","computeBoundingSphere","computeBoundingBox","vertexShader","fragmentShader","MeshLineMaterial","parameters","uniforms","UniformsLib","fog","lineWidth","useMap","alphaMap","useAlphaMap","color","Color","opacity","resolution","sizeAttenuation","dashArray","dashOffset","dashRatio","useDash","visibility","alphaTest","repeat","type","copy","setValues","source","ShaderMaterial","raycast","raycaster","intersects","inverseMatrix","ray","Ray","sphere","Sphere","interRay","geometry","boundingSphere","applyMatrix4","intersectSphere","invert","vStart","vEnd","interSegment","step","LineSegments","attributes","indices","widths","fromArray","Math","floor","precision","params","Line","threshold","material","precisionSq","distSq","distanceSqToSegment","distance","origin","distanceTo","near","far","point","clone","face","faceIndex","object"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/meshline/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport * as THREE from \"three\";\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n  let i;\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i++)\n      dst[i + dstOffset] = src[i];\n  }\n  return dst;\n}\nfunction convertPoints(points) {\n  if (points instanceof Float32Array)\n    return points;\n  if (points instanceof THREE.BufferGeometry)\n    return points.getAttribute(\"position\").array;\n  return points.map((p) => {\n    const isArray = Array.isArray(p);\n    return p instanceof THREE.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n  }).flat();\n}\nclass MeshLineGeometry extends THREE.BufferGeometry {\n  constructor() {\n    super();\n    __publicField(this, \"type\", \"MeshLine\");\n    __publicField(this, \"isMeshLine\", true);\n    __publicField(this, \"positions\", []);\n    __publicField(this, \"previous\", []);\n    __publicField(this, \"next\", []);\n    __publicField(this, \"side\", []);\n    __publicField(this, \"width\", []);\n    __publicField(this, \"indices_array\", []);\n    __publicField(this, \"uvs\", []);\n    __publicField(this, \"counters\", []);\n    __publicField(this, \"widthCallback\", null);\n    __publicField(this, \"_attributes\");\n    __publicField(this, \"_points\", []);\n    __publicField(this, \"points\");\n    __publicField(this, \"matrixWorld\", new THREE.Matrix4());\n    Object.defineProperties(this, {\n      points: {\n        enumerable: true,\n        get() {\n          return this._points;\n        },\n        set(value) {\n          this.setPoints(value, this.widthCallback);\n        }\n      }\n    });\n  }\n  setMatrixWorld(matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  }\n  setPoints(points, wcb) {\n    points = convertPoints(points);\n    this._points = points;\n    this.widthCallback = wcb != null ? wcb : null;\n    this.positions = [];\n    this.counters = [];\n    if (points.length && points[0] instanceof THREE.Vector3) {\n      for (let j = 0; j < points.length; j++) {\n        const p = points[j];\n        const c = j / (points.length - 1);\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      for (let j = 0; j < points.length; j += 3) {\n        const c = j / (points.length - 1);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n    this.process();\n  }\n  compareV3(a, b) {\n    const aa = a * 6;\n    const ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  }\n  copyV3(a) {\n    const aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  }\n  process() {\n    const l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    let w;\n    let v;\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n    for (let j = 0; j < l; j++) {\n      this.side.push(1);\n      this.side.push(-1);\n      if (this.widthCallback)\n        w = this.widthCallback(j / (l - 1));\n      else\n        w = 1;\n      this.width.push(w);\n      this.width.push(w);\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n      if (j < l - 1) {\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n        const n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      if (j > 0) {\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.copyArray(new Float32Array(this.next));\n      this._attributes.next.needsUpdate = true;\n      this._attributes.side.copyArray(new Float32Array(this.side));\n      this._attributes.side.needsUpdate = true;\n      this._attributes.width.copyArray(new Float32Array(this.width));\n      this._attributes.width.needsUpdate = true;\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n      this._attributes.uv.needsUpdate = true;\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n      this._attributes.index.needsUpdate = true;\n    }\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n  advance({ x, y, z }) {\n    const positions = this._attributes.position.array;\n    const previous = this._attributes.previous.array;\n    const next = this._attributes.next.array;\n    const l = positions.length;\n    memcpy(positions, 0, previous, 0, l);\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = x;\n    positions[l - 5] = y;\n    positions[l - 4] = z;\n    positions[l - 3] = x;\n    positions[l - 2] = y;\n    positions[l - 1] = z;\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = x;\n    next[l - 5] = y;\n    next[l - 4] = z;\n    next[l - 3] = x;\n    next[l - 2] = y;\n    next[l - 1] = z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  }\n}\nconst vertexShader = `\n  #include <common>\n  #include <logdepthbuf_pars_vertex>\n  #include <fog_pars_vertex>\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n  \tvCounters = counters;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n  }\n`;\nconst fragmentShader = `\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`;\nclass MeshLineMaterial extends THREE.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: {\n        ...THREE.UniformsLib.fog,\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(16777215) },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) }\n      },\n      vertexShader,\n      fragmentShader\n    });\n    __publicField(this, \"lineWidth\");\n    __publicField(this, \"map\");\n    __publicField(this, \"useMap\");\n    __publicField(this, \"alphaMap\");\n    __publicField(this, \"useAlphaMap\");\n    __publicField(this, \"color\");\n    __publicField(this, \"resolution\");\n    __publicField(this, \"sizeAttenuation\");\n    __publicField(this, \"dashArray\");\n    __publicField(this, \"dashOffset\");\n    __publicField(this, \"dashRatio\");\n    __publicField(this, \"useDash\");\n    __publicField(this, \"visibility\");\n    __publicField(this, \"repeat\");\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray = source.dashArray;\n    this.dashOffset = source.dashOffset;\n    this.dashRatio = source.dashRatio;\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  }\n}\nfunction raycast(raycaster, intersects) {\n  const inverseMatrix = new THREE.Matrix4();\n  const ray = new THREE.Ray();\n  const sphere = new THREE.Sphere();\n  const interRay = new THREE.Vector3();\n  const geometry = this.geometry;\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n  if (!raycaster.ray.intersectSphere(sphere, interRay))\n    return;\n  inverseMatrix.copy(this.matrixWorld).invert();\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n  const vStart = new THREE.Vector3();\n  const vEnd = new THREE.Vector3();\n  const interSegment = new THREE.Vector3();\n  const step = this instanceof THREE.LineSegments ? 2 : 1;\n  const index = geometry.index;\n  const attributes = geometry.attributes;\n  if (index !== null) {\n    const indices = index.array;\n    const positions = attributes.position.array;\n    const widths = attributes.width.array;\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\n      const a = indices[i];\n      const b = indices[i + 1];\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      const width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\n      const precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n      const precisionSq = precision * precision;\n      const distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n      if (distSq > precisionSq)\n        continue;\n      interRay.applyMatrix4(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(interRay);\n      if (distance < raycaster.near || distance > raycaster.far)\n        continue;\n      intersects.push({\n        distance,\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: void 0,\n        object: this\n      });\n      i = l;\n    }\n  }\n}\nexport {\n  MeshLineGeometry,\n  MeshLineMaterial,\n  raycast\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}