{"ast":null,"code":"/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\nconst MOUSE_BUTTON = {\n  LEFT: 1,\n  RIGHT: 2,\n  MIDDLE: 4\n};\nconst ACTION = Object.freeze({\n  NONE: 0,\n  ROTATE: 1,\n  TRUCK: 2,\n  OFFSET: 4,\n  DOLLY: 8,\n  ZOOM: 16,\n  TOUCH_ROTATE: 32,\n  TOUCH_TRUCK: 64,\n  TOUCH_OFFSET: 128,\n  TOUCH_DOLLY: 256,\n  TOUCH_ZOOM: 512,\n  TOUCH_DOLLY_TRUCK: 1024,\n  TOUCH_DOLLY_OFFSET: 2048,\n  TOUCH_DOLLY_ROTATE: 4096,\n  TOUCH_ZOOM_TRUCK: 8192,\n  TOUCH_ZOOM_OFFSET: 16384,\n  TOUCH_ZOOM_ROTATE: 32768\n});\n\nfunction isPerspectiveCamera(camera) {\n  return camera.isPerspectiveCamera;\n}\n\nfunction isOrthographicCamera(camera) {\n  return camera.isOrthographicCamera;\n}\n\nconst PI_2 = Math.PI * 2;\nconst PI_HALF = Math.PI / 2;\nconst EPSILON = 1e-5;\nconst DEG2RAD = Math.PI / 180;\n\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nfunction approxZero(number) {\n  let error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return Math.abs(number) < error;\n}\n\nfunction approxEquals(a, b) {\n  let error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  return approxZero(a - b, error);\n}\n\nfunction roundToStep(value, step) {\n  return Math.round(value / step) * step;\n}\n\nfunction infinityToMaxNumber(value) {\n  if (isFinite(value)) return value;\n  if (value < 0) return -Number.MAX_VALUE;\n  return Number.MAX_VALUE;\n}\n\nfunction maxNumberToInfinity(value) {\n  if (Math.abs(value) < Number.MAX_VALUE) return value;\n  return value * Infinity;\n} // https://docs.unity3d.com/ScriptReference/Mathf.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Mathf.cs#L308\n\n\nfunction smoothDamp(current, target, currentVelocityRef, smoothTime) {\n  let maxSpeed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;\n  let deltaTime = arguments.length > 5 ? arguments[5] : undefined;\n  // Based on Game Programming Gems 4 Chapter 1.10\n  smoothTime = Math.max(0.0001, smoothTime);\n  const omega = 2 / smoothTime;\n  const x = omega * deltaTime;\n  const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n  let change = current - target;\n  const originalTo = target; // Clamp maximum speed\n\n  const maxChange = maxSpeed * smoothTime;\n  change = clamp(change, -maxChange, maxChange);\n  target = current - change;\n  const temp = (currentVelocityRef.value + omega * change) * deltaTime;\n  currentVelocityRef.value = (currentVelocityRef.value - omega * temp) * exp;\n  let output = target + (change + temp) * exp; // Prevent overshooting\n\n  if (originalTo - current > 0.0 === output > originalTo) {\n    output = originalTo;\n    currentVelocityRef.value = (output - originalTo) / deltaTime;\n  }\n\n  return output;\n} // https://docs.unity3d.com/ScriptReference/Vector3.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Vector3.cs#L97\n\n\nfunction smoothDampVec3(current, target, currentVelocityRef, smoothTime) {\n  let maxSpeed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;\n  let deltaTime = arguments.length > 5 ? arguments[5] : undefined;\n  let out = arguments.length > 6 ? arguments[6] : undefined;\n  // Based on Game Programming Gems 4 Chapter 1.10\n  smoothTime = Math.max(0.0001, smoothTime);\n  const omega = 2 / smoothTime;\n  const x = omega * deltaTime;\n  const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n  let targetX = target.x;\n  let targetY = target.y;\n  let targetZ = target.z;\n  let changeX = current.x - targetX;\n  let changeY = current.y - targetY;\n  let changeZ = current.z - targetZ;\n  const originalToX = targetX;\n  const originalToY = targetY;\n  const originalToZ = targetZ; // Clamp maximum speed\n\n  const maxChange = maxSpeed * smoothTime;\n  const maxChangeSq = maxChange * maxChange;\n  const magnitudeSq = changeX * changeX + changeY * changeY + changeZ * changeZ;\n\n  if (magnitudeSq > maxChangeSq) {\n    const magnitude = Math.sqrt(magnitudeSq);\n    changeX = changeX / magnitude * maxChange;\n    changeY = changeY / magnitude * maxChange;\n    changeZ = changeZ / magnitude * maxChange;\n  }\n\n  targetX = current.x - changeX;\n  targetY = current.y - changeY;\n  targetZ = current.z - changeZ;\n  const tempX = (currentVelocityRef.x + omega * changeX) * deltaTime;\n  const tempY = (currentVelocityRef.y + omega * changeY) * deltaTime;\n  const tempZ = (currentVelocityRef.z + omega * changeZ) * deltaTime;\n  currentVelocityRef.x = (currentVelocityRef.x - omega * tempX) * exp;\n  currentVelocityRef.y = (currentVelocityRef.y - omega * tempY) * exp;\n  currentVelocityRef.z = (currentVelocityRef.z - omega * tempZ) * exp;\n  out.x = targetX + (changeX + tempX) * exp;\n  out.y = targetY + (changeY + tempY) * exp;\n  out.z = targetZ + (changeZ + tempZ) * exp; // Prevent overshooting\n\n  const origMinusCurrentX = originalToX - current.x;\n  const origMinusCurrentY = originalToY - current.y;\n  const origMinusCurrentZ = originalToZ - current.z;\n  const outMinusOrigX = out.x - originalToX;\n  const outMinusOrigY = out.y - originalToY;\n  const outMinusOrigZ = out.z - originalToZ;\n\n  if (origMinusCurrentX * outMinusOrigX + origMinusCurrentY * outMinusOrigY + origMinusCurrentZ * outMinusOrigZ > 0) {\n    out.x = originalToX;\n    out.y = originalToY;\n    out.z = originalToZ;\n    currentVelocityRef.x = (out.x - originalToX) / deltaTime;\n    currentVelocityRef.y = (out.y - originalToY) / deltaTime;\n    currentVelocityRef.z = (out.z - originalToZ) / deltaTime;\n  }\n\n  return out;\n}\n\nfunction extractClientCoordFromEvent(pointers, out) {\n  out.set(0, 0);\n  pointers.forEach(pointer => {\n    out.x += pointer.clientX;\n    out.y += pointer.clientY;\n  });\n  out.x /= pointers.length;\n  out.y /= pointers.length;\n}\n\nfunction notSupportedInOrthographicCamera(camera, message) {\n  if (isOrthographicCamera(camera)) {\n    console.warn(`${message} is not supported in OrthographicCamera`);\n    return true;\n  }\n\n  return false;\n}\n\nclass EventDispatcher {\n  constructor() {\n    this._listeners = {};\n  }\n  /**\n   * Adds the specified event listener.\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n\n\n  addEventListener(type, listener) {\n    const listeners = this._listeners;\n    if (listeners[type] === undefined) listeners[type] = [];\n    if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);\n  }\n  /**\n   * Presence of the specified event listener.\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n\n\n  hasEventListener(type, listener) {\n    const listeners = this._listeners;\n    return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n  }\n  /**\n   * Removes the specified event listener\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n\n\n  removeEventListener(type, listener) {\n    const listeners = this._listeners;\n    const listenerArray = listeners[type];\n\n    if (listenerArray !== undefined) {\n      const index = listenerArray.indexOf(listener);\n      if (index !== -1) listenerArray.splice(index, 1);\n    }\n  }\n  /**\n   * Removes all event listeners\n   * @param type event name\n   * @category Methods\n   */\n\n\n  removeAllEventListeners(type) {\n    if (!type) {\n      this._listeners = {};\n      return;\n    }\n\n    if (Array.isArray(this._listeners[type])) this._listeners[type].length = 0;\n  }\n  /**\n   * Fire an event type.\n   * @param event DispatcherEvent\n   * @category Methods\n   */\n\n\n  dispatchEvent(event) {\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n      const array = listenerArray.slice(0);\n\n      for (let i = 0, l = array.length; i < l; i++) {\n        array[i].call(this, event);\n      }\n    }\n  }\n\n}\n\nconst VERSION = '2.3.5'; // will be replaced with `version` in package.json during the build process.\n\nconst TOUCH_DOLLY_FACTOR = 1 / 8;\nconst isBrowser = typeof window !== 'undefined';\nconst isMac = isBrowser && /Mac/.test(navigator.platform);\nconst isPointerEventsNotSupported = !(isBrowser && 'PointerEvent' in window); // macOS Safari 12 does not support PointerEvents API\n\nlet THREE;\n\nlet _ORIGIN;\n\nlet _AXIS_Y;\n\nlet _AXIS_Z;\n\nlet _v2;\n\nlet _v3A;\n\nlet _v3B;\n\nlet _v3C;\n\nlet _xColumn;\n\nlet _yColumn;\n\nlet _zColumn;\n\nlet _deltaTarget;\n\nlet _deltaOffset;\n\nlet _sphericalA;\n\nlet _sphericalB;\n\nlet _box3A;\n\nlet _box3B;\n\nlet _sphere;\n\nlet _quaternionA;\n\nlet _quaternionB;\n\nlet _rotationMatrix;\n\nlet _raycaster;\n\nclass CameraControls extends EventDispatcher {\n  /**\n   * Injects THREE as the dependency. You can then proceed to use CameraControls.\n   *\n   * e.g\n   * ```javascript\n   * CameraControls.install( { THREE: THREE } );\n   * ```\n   *\n   * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n   *\n   * ```js\n   * import {\n   * \tVector2,\n   * \tVector3,\n   * \tVector4,\n   * \tQuaternion,\n   * \tMatrix4,\n   * \tSpherical,\n   * \tBox3,\n   * \tSphere,\n   * \tRaycaster,\n   * \tMathUtils,\n   * } from 'three';\n   *\n   * const subsetOfTHREE = {\n   * \tVector2   : Vector2,\n   * \tVector3   : Vector3,\n   * \tVector4   : Vector4,\n   * \tQuaternion: Quaternion,\n   * \tMatrix4   : Matrix4,\n   * \tSpherical : Spherical,\n   * \tBox3      : Box3,\n   * \tSphere    : Sphere,\n   * \tRaycaster : Raycaster,\n   * };\n    * CameraControls.install( { THREE: subsetOfTHREE } );\n   * ```\n   * @category Statics\n   */\n  static install(libs) {\n    THREE = libs.THREE;\n    _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n    _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n    _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n    _v2 = new THREE.Vector2();\n    _v3A = new THREE.Vector3();\n    _v3B = new THREE.Vector3();\n    _v3C = new THREE.Vector3();\n    _xColumn = new THREE.Vector3();\n    _yColumn = new THREE.Vector3();\n    _zColumn = new THREE.Vector3();\n    _deltaTarget = new THREE.Vector3();\n    _deltaOffset = new THREE.Vector3();\n    _sphericalA = new THREE.Spherical();\n    _sphericalB = new THREE.Spherical();\n    _box3A = new THREE.Box3();\n    _box3B = new THREE.Box3();\n    _sphere = new THREE.Sphere();\n    _quaternionA = new THREE.Quaternion();\n    _quaternionB = new THREE.Quaternion();\n    _rotationMatrix = new THREE.Matrix4();\n    _raycaster = new THREE.Raycaster();\n  }\n  /**\n   * list all ACTIONs\n   * @category Statics\n   */\n\n\n  static get ACTION() {\n    return ACTION;\n  }\n  /**\n   * Creates a `CameraControls` instance.\n   *\n   * Note:\n   * You **must install** three.js before using camera-controls. see [#install](#install)\n   * Not doing so will lead to runtime errors (`undefined` references to THREE).\n   *\n   * e.g.\n   * ```\n   * CameraControls.install( { THREE } );\n   * const cameraControls = new CameraControls( camera, domElement );\n   * ```\n   *\n   * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n   * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n   * @category Constructor\n   */\n\n\n  constructor(camera, domElement) {\n    super();\n    /**\n     * Minimum vertical angle in radians.\n     * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n     * The default value is `0`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxPolarAngle = 0;\n     * ```\n     * @category Properties\n     */\n\n    this.minPolarAngle = 0; // radians\n\n    /**\n     * Maximum vertical angle in radians.\n     * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n     * The default value is `Math.PI`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxPolarAngle = Math.PI;\n     * ```\n     * @category Properties\n     */\n\n    this.maxPolarAngle = Math.PI; // radians\n\n    /**\n     * Minimum horizontal angle in radians.\n     * The angle has to be less than `.maxAzimuthAngle`.\n     * The default value is `- Infinity`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.minAzimuthAngle = - Infinity;\n     * ```\n     * @category Properties\n     */\n\n    this.minAzimuthAngle = -Infinity; // radians\n\n    /**\n     * Maximum horizontal angle in radians.\n     * The angle has to be greater than `.minAzimuthAngle`.\n     * The default value is `Infinity`.\n     *\n     * e.g.\n     * ```\n     * cameraControls.maxAzimuthAngle = Infinity;\n     * ```\n     * @category Properties\n     */\n\n    this.maxAzimuthAngle = Infinity; // radians\n    // How far you can dolly in and out ( PerspectiveCamera only )\n\n    /**\n     * Minimum distance for dolly. The value must be higher than `0`.\n     * PerspectiveCamera only.\n     * @category Properties\n     */\n\n    this.minDistance = 0;\n    /**\n     * Maximum distance for dolly. The value must be higher than `minDistance`.\n     * PerspectiveCamera only.\n     * @category Properties\n     */\n\n    this.maxDistance = Infinity;\n    /**\n     * `true` to enable Infinity Dolly.\n     * When the Dolly distance is less than the `minDistance`, radius of the sphere will be set `minDistance` automatically.\n     * @category Properties\n     */\n\n    this.infinityDolly = false;\n    /**\n     * Minimum camera zoom.\n     * @category Properties\n     */\n\n    this.minZoom = 0.01;\n    /**\n     * Maximum camera zoom.\n     * @category Properties\n     */\n\n    this.maxZoom = Infinity;\n    /**\n     * Approximate time in seconds to reach the target. A smaller value will reach the target faster.\n     * @category Properties\n     */\n\n    this.smoothTime = 0.25;\n    /**\n     * the smoothTime while dragging\n     * @category Properties\n     */\n\n    this.draggingSmoothTime = 0.125;\n    /**\n     * Max transition speed in unit-per-seconds\n     * @category Properties\n     */\n\n    this.maxSpeed = Infinity;\n    /**\n     * Speed of azimuth (horizontal) rotation.\n     * @category Properties\n     */\n\n    this.azimuthRotateSpeed = 1.0;\n    /**\n     * Speed of polar (vertical) rotation.\n     * @category Properties\n     */\n\n    this.polarRotateSpeed = 1.0;\n    /**\n     * Speed of mouse-wheel dollying.\n     * @category Properties\n     */\n\n    this.dollySpeed = 1.0;\n    /**\n     * `true` to invert direction when dollying or zooming via drag\n     * @category Properties\n     */\n\n    this.dollyDragInverted = false;\n    /**\n     * Speed of drag for truck and pedestal.\n     * @category Properties\n     */\n\n    this.truckSpeed = 2.0;\n    /**\n     * `true` to enable Dolly-in to the mouse cursor coords.\n     * @category Properties\n     */\n\n    this.dollyToCursor = false;\n    /**\n     * @category Properties\n     */\n\n    this.dragToOffset = false;\n    /**\n     * The same as `.screenSpacePanning` in three.js's OrbitControls.\n     * @category Properties\n     */\n\n    this.verticalDragToForward = false;\n    /**\n     * Friction ratio of the boundary.\n     * @category Properties\n     */\n\n    this.boundaryFriction = 0.0;\n    /**\n     * Controls how soon the `rest` event fires as the camera slows.\n     * @category Properties\n     */\n\n    this.restThreshold = 0.01;\n    /**\n     * An array of Meshes to collide with camera.\n     * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n     * @category Properties\n     */\n\n    this.colliderMeshes = [];\n    /**\n     * Force cancel user dragging.\n     * @category Methods\n     */\n    // cancel will be overwritten in the constructor.\n\n    this.cancel = () => {};\n\n    this._enabled = true;\n    this._state = ACTION.NONE;\n    this._viewport = null;\n    this._dollyControlAmount = 0;\n    this._hasRested = true;\n    this._boundaryEnclosesCamera = false;\n    this._needsUpdate = true;\n    this._updatedLastTime = false;\n    this._elementRect = new DOMRect();\n    this._isDragging = false;\n    this._activePointers = [];\n    this._lockedPointer = null; // Use draggingSmoothTime over smoothTime while true.\n    // set automatically true on user-dragging start.\n    // set automatically false on programmable methods call.\n\n    this._isUserControllingRotate = false;\n    this._isUserControllingDolly = false;\n    this._isUserControllingTruck = false;\n    this._isUserControllingOffset = false;\n    this._isUserControllingZoom = false; // velocities for smoothDamp\n\n    this._thetaVelocity = {\n      value: 0\n    };\n    this._phiVelocity = {\n      value: 0\n    };\n    this._radiusVelocity = {\n      value: 0\n    };\n    this._targetVelocity = new THREE.Vector3();\n    this._focalOffsetVelocity = new THREE.Vector3();\n    this._zoomVelocity = {\n      value: 0\n    };\n\n    this._truckInternal = (deltaX, deltaY, dragToOffset) => {\n      let truckX;\n      let pedestalY;\n\n      if (isPerspectiveCamera(this._camera)) {\n        const offset = _v3A.copy(this._camera.position).sub(this._target); // half of the fov is center to top of screen\n\n\n        const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n        const targetDistance = offset.length() * Math.tan(fov * 0.5);\n        truckX = this.truckSpeed * deltaX * targetDistance / this._elementRect.height;\n        pedestalY = this.truckSpeed * deltaY * targetDistance / this._elementRect.height;\n      } else if (isOrthographicCamera(this._camera)) {\n        const camera = this._camera;\n        truckX = deltaX * (camera.right - camera.left) / camera.zoom / this._elementRect.width;\n        pedestalY = deltaY * (camera.top - camera.bottom) / camera.zoom / this._elementRect.height;\n      } else {\n        return;\n      }\n\n      if (this.verticalDragToForward) {\n        dragToOffset ? this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) : this.truck(truckX, 0, true);\n        this.forward(-pedestalY, true);\n      } else {\n        dragToOffset ? this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) : this.truck(truckX, pedestalY, true);\n      }\n    };\n\n    this._rotateInternal = (deltaX, deltaY) => {\n      const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height; // divide by *height* to refer the resolution\n\n      const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;\n      this.rotate(theta, phi, true);\n    };\n\n    this._dollyInternal = (delta, x, y) => {\n      const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);\n      const distance = this._sphericalEnd.radius * dollyScale;\n      const prevRadius = this._sphericalEnd.radius;\n      const signedPrevRadius = prevRadius * (delta >= 0 ? -1 : 1);\n      this.dollyTo(distance);\n\n      if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n        this._camera.getWorldDirection(_v3A);\n\n        this._targetEnd.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n\n        this._target.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n      }\n\n      if (this.dollyToCursor) {\n        this._dollyControlAmount += this._sphericalEnd.radius - prevRadius;\n\n        if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n          this._dollyControlAmount -= signedPrevRadius;\n        }\n\n        this._dollyControlCoord.set(x, y);\n      }\n    };\n\n    this._zoomInternal = (delta, x, y) => {\n      const zoomScale = Math.pow(0.95, delta * this.dollySpeed);\n      const prevZoom = this._zoomEnd; // for both PerspectiveCamera and OrthographicCamera\n\n      this.zoomTo(this._zoom * zoomScale);\n\n      if (this.dollyToCursor) {\n        this._dollyControlAmount += this._zoomEnd - prevZoom;\n\n        this._dollyControlCoord.set(x, y);\n      }\n    }; // Check if the user has installed THREE\n\n\n    if (typeof THREE === 'undefined') {\n      console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n    }\n\n    this._camera = camera;\n    this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);\n    this._yAxisUpSpaceInverse = this._yAxisUpSpace.clone().invert();\n    this._state = ACTION.NONE; // the location\n\n    this._target = new THREE.Vector3();\n    this._targetEnd = this._target.clone();\n    this._focalOffset = new THREE.Vector3();\n    this._focalOffsetEnd = this._focalOffset.clone(); // rotation\n\n    this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));\n    this._sphericalEnd = this._spherical.clone();\n    this._zoom = this._camera.zoom;\n    this._zoomEnd = this._zoom; // collisionTest uses nearPlane.s\n\n    this._nearPlaneCorners = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n\n    this._updateNearPlaneCorners(); // Target cannot move outside of this box\n\n\n    this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity)); // reset\n\n    this._cameraUp0 = this._camera.up.clone();\n    this._target0 = this._target.clone();\n    this._position0 = this._camera.position.clone();\n    this._zoom0 = this._zoom;\n    this._focalOffset0 = this._focalOffset.clone();\n    this._dollyControlAmount = 0;\n    this._dollyControlCoord = new THREE.Vector2(); // configs\n\n    this.mouseButtons = {\n      left: ACTION.ROTATE,\n      middle: ACTION.DOLLY,\n      right: ACTION.TRUCK,\n      wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY : isOrthographicCamera(this._camera) ? ACTION.ZOOM : ACTION.NONE\n    };\n    this.touches = {\n      one: ACTION.TOUCH_ROTATE,\n      two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK : isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK : ACTION.NONE,\n      three: ACTION.TOUCH_TRUCK\n    };\n    const dragStartPosition = new THREE.Vector2();\n    const lastDragPosition = new THREE.Vector2();\n    const dollyStart = new THREE.Vector2();\n\n    const onPointerDown = event => {\n      if (!this._enabled || !this._domElement) return; // Don't call `event.preventDefault()` on the pointerdown event\n      // to keep receiving pointermove evens outside dragging iframe\n      // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n\n      const mouseButton = event.pointerType !== 'mouse' ? null : (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT : (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE : (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT : null;\n\n      if (mouseButton !== null) {\n        const zombiePointer = this._findPointerByMouseButton(mouseButton);\n\n        zombiePointer && this._disposePointer(zombiePointer);\n      }\n\n      if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT && this._lockedPointer) return;\n      const pointer = {\n        pointerId: event.pointerId,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        deltaX: 0,\n        deltaY: 0,\n        mouseButton\n      };\n\n      this._activePointers.push(pointer); // eslint-disable-next-line no-undef\n\n\n      this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n\n      this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\n      this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n\n      this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n\n      this._isDragging = true;\n      startDragging(event);\n    };\n\n    const onMouseDown = event => {\n      if (!this._enabled || !this._domElement || this._lockedPointer) return;\n      const mouseButton = (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT : (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE : (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT : null;\n\n      if (mouseButton !== null) {\n        const zombiePointer = this._findPointerByMouseButton(mouseButton);\n\n        zombiePointer && this._disposePointer(zombiePointer);\n      }\n\n      const pointer = {\n        pointerId: 1,\n        clientX: event.clientX,\n        clientY: event.clientY,\n        deltaX: 0,\n        deltaY: 0,\n        mouseButton: (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT : (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.MIDDLE : (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.RIGHT : null\n      };\n\n      this._activePointers.push(pointer); // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n      // eslint-disable-next-line no-undef\n\n\n      this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\n      this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\n      this._domElement.ownerDocument.addEventListener('mousemove', onMouseMove);\n\n      this._domElement.ownerDocument.addEventListener('mouseup', onMouseUp);\n\n      this._isDragging = true;\n      startDragging(event);\n    };\n\n    const onPointerMove = event => {\n      if (event.cancelable) event.preventDefault();\n      const pointerId = event.pointerId;\n\n      const pointer = this._lockedPointer || this._findPointerById(pointerId);\n\n      if (!pointer) return;\n      pointer.clientX = event.clientX;\n      pointer.clientY = event.clientY;\n      pointer.deltaX = event.movementX;\n      pointer.deltaY = event.movementY;\n      this._state = 0;\n\n      if (event.pointerType === 'touch') {\n        switch (this._activePointers.length) {\n          case 1:\n            this._state = this.touches.one;\n            break;\n\n          case 2:\n            this._state = this.touches.two;\n            break;\n\n          case 3:\n            this._state = this.touches.three;\n            break;\n        }\n      } else {\n        if (!this._isDragging && this._lockedPointer || this._isDragging && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n          this._state = this._state | this.mouseButtons.left;\n        }\n\n        if (this._isDragging && (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n          this._state = this._state | this.mouseButtons.middle;\n        }\n\n        if (this._isDragging && (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n          this._state = this._state | this.mouseButtons.right;\n        }\n      }\n\n      dragging();\n    };\n\n    const onMouseMove = event => {\n      const pointer = this._lockedPointer || this._findPointerById(1);\n\n      if (!pointer) return;\n      pointer.clientX = event.clientX;\n      pointer.clientY = event.clientY;\n      pointer.deltaX = event.movementX;\n      pointer.deltaY = event.movementY;\n      this._state = 0;\n\n      if (this._lockedPointer || (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n        this._state = this._state | this.mouseButtons.left;\n      }\n\n      if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n        this._state = this._state | this.mouseButtons.middle;\n      }\n\n      if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n        this._state = this._state | this.mouseButtons.right;\n      }\n\n      dragging();\n    };\n\n    const onPointerUp = event => {\n      const pointer = this._findPointerById(event.pointerId);\n\n      if (pointer && pointer === this._lockedPointer) return;\n      pointer && this._disposePointer(pointer);\n\n      if (event.pointerType === 'touch') {\n        switch (this._activePointers.length) {\n          case 0:\n            this._state = ACTION.NONE;\n            break;\n\n          case 1:\n            this._state = this.touches.one;\n            break;\n\n          case 2:\n            this._state = this.touches.two;\n            break;\n\n          case 3:\n            this._state = this.touches.three;\n            break;\n        }\n      } else {\n        this._state = ACTION.NONE;\n      }\n\n      endDragging();\n    };\n\n    const onMouseUp = () => {\n      const pointer = this._findPointerById(1);\n\n      if (pointer && pointer === this._lockedPointer) return;\n      pointer && this._disposePointer(pointer);\n      this._state = ACTION.NONE;\n      endDragging();\n    };\n\n    let lastScrollTimeStamp = -1;\n\n    const onMouseWheel = event => {\n      if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE) return;\n      event.preventDefault();\n\n      if (this.dollyToCursor || this.mouseButtons.wheel === ACTION.ROTATE || this.mouseButtons.wheel === ACTION.TRUCK) {\n        const now = performance.now(); // only need to fire this at scroll start.\n\n        if (lastScrollTimeStamp - now < 1000) this._getClientRect(this._elementRect);\n        lastScrollTimeStamp = now;\n      } // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n\n\n      const deltaYFactor = isMac ? -1 : -3;\n      const delta = event.deltaMode === 1 ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n      const x = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n      const y = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n\n      switch (this.mouseButtons.wheel) {\n        case ACTION.ROTATE:\n          {\n            this._rotateInternal(event.deltaX, event.deltaY);\n\n            this._isUserControllingRotate = true;\n            break;\n          }\n\n        case ACTION.TRUCK:\n          {\n            this._truckInternal(event.deltaX, event.deltaY, false);\n\n            this._isUserControllingTruck = true;\n            break;\n          }\n\n        case ACTION.OFFSET:\n          {\n            this._truckInternal(event.deltaX, event.deltaY, true);\n\n            this._isUserControllingOffset = true;\n            break;\n          }\n\n        case ACTION.DOLLY:\n          {\n            this._dollyInternal(-delta, x, y);\n\n            this._isUserControllingDolly = true;\n            break;\n          }\n\n        case ACTION.ZOOM:\n          {\n            this._zoomInternal(-delta, x, y);\n\n            this._isUserControllingZoom = true;\n            break;\n          }\n      }\n\n      this.dispatchEvent({\n        type: 'control'\n      });\n    };\n\n    const onContextMenu = event => {\n      if (!this._domElement || !this._enabled) return; // contextmenu event is fired right after pointerdown/mousedown.\n      // remove attached handlers and active pointer, if interrupted by contextmenu.\n\n      if (this.mouseButtons.right === CameraControls.ACTION.NONE) {\n        const pointerId = event instanceof PointerEvent ? event.pointerId : event instanceof MouseEvent ? 0 : 0;\n\n        const pointer = this._findPointerById(pointerId);\n\n        pointer && this._disposePointer(pointer); // eslint-disable-next-line no-undef\n\n        this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n          passive: false\n        });\n\n        this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\n        this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\n        this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\n        return;\n      }\n\n      event.preventDefault();\n    };\n\n    const startDragging = event => {\n      if (!this._enabled) return;\n      extractClientCoordFromEvent(this._activePointers, _v2);\n\n      this._getClientRect(this._elementRect);\n\n      dragStartPosition.copy(_v2);\n      lastDragPosition.copy(_v2);\n      const isMultiTouch = this._activePointers.length >= 2;\n\n      if (isMultiTouch) {\n        // 2 finger pinch\n        const dx = _v2.x - this._activePointers[1].clientX;\n        const dy = _v2.y - this._activePointers[1].clientY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        dollyStart.set(0, distance); // center coords of 2 finger truck\n\n        const x = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;\n        const y = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;\n        lastDragPosition.set(x, y);\n      }\n\n      this._state = 0;\n\n      if (!event) {\n        if (this._lockedPointer) this._state = this._state | this.mouseButtons.left;\n      } else if ('pointerType' in event && event.pointerType === 'touch') {\n        switch (this._activePointers.length) {\n          case 1:\n            this._state = this.touches.one;\n            break;\n\n          case 2:\n            this._state = this.touches.two;\n            break;\n\n          case 3:\n            this._state = this.touches.three;\n            break;\n        }\n      } else {\n        if (!this._lockedPointer && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n          this._state = this._state | this.mouseButtons.left;\n        }\n\n        if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n          this._state = this._state | this.mouseButtons.middle;\n        }\n\n        if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n          this._state = this._state | this.mouseButtons.right;\n        }\n      } // stop current movement on drag start\n\n\n      if ((this._state & ACTION.ROTATE) === ACTION.ROTATE || (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        this._sphericalEnd.theta = this._spherical.theta;\n        this._sphericalEnd.phi = this._spherical.phi;\n        this._thetaVelocity.value = 0;\n        this._phiVelocity.value = 0;\n      }\n\n      if ((this._state & ACTION.TRUCK) === ACTION.TRUCK || (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n        this._targetEnd.copy(this._target);\n\n        this._targetVelocity.set(0, 0, 0);\n      }\n\n      if ((this._state & ACTION.DOLLY) === ACTION.DOLLY || (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE) {\n        this._sphericalEnd.radius = this._spherical.radius;\n        this._radiusVelocity.value = 0;\n      }\n\n      if ((this._state & ACTION.ZOOM) === ACTION.ZOOM || (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        this._zoomEnd = this._zoom;\n        this._zoomVelocity.value = 0;\n      }\n\n      if ((this._state & ACTION.OFFSET) === ACTION.OFFSET || (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n        this._focalOffsetEnd.copy(this._focalOffset);\n\n        this._focalOffsetVelocity.set(0, 0, 0);\n      }\n\n      this.dispatchEvent({\n        type: 'controlstart'\n      });\n    };\n\n    const dragging = () => {\n      if (!this._enabled) return;\n      extractClientCoordFromEvent(this._activePointers, _v2); // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n      // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n\n      const isPointerLockActive = this._domElement && document.pointerLockElement === this._domElement;\n      const lockedPointer = isPointerLockActive ? this._lockedPointer || this._activePointers[0] : null;\n      const deltaX = lockedPointer ? -lockedPointer.deltaX : lastDragPosition.x - _v2.x;\n      const deltaY = lockedPointer ? -lockedPointer.deltaY : lastDragPosition.y - _v2.y;\n      lastDragPosition.copy(_v2);\n\n      if ((this._state & ACTION.ROTATE) === ACTION.ROTATE || (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        this._rotateInternal(deltaX, deltaY);\n\n        this._isUserControllingRotate = true;\n      }\n\n      if ((this._state & ACTION.DOLLY) === ACTION.DOLLY || (this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n        const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n        const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n        const dollyDirection = this.dollyDragInverted ? -1 : 1;\n\n        if ((this._state & ACTION.DOLLY) === ACTION.DOLLY) {\n          this._dollyInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\n          this._isUserControllingDolly = true;\n        } else {\n          this._zoomInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\n          this._isUserControllingZoom = true;\n        }\n      }\n\n      if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n        const dx = _v2.x - this._activePointers[1].clientX;\n        const dy = _v2.y - this._activePointers[1].clientY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const dollyDelta = dollyStart.y - distance;\n        dollyStart.set(0, distance);\n        const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n        const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n\n        if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY || (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET) {\n          this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\n          this._isUserControllingDolly = true;\n        } else {\n          this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\n          this._isUserControllingZoom = true;\n        }\n      }\n\n      if ((this._state & ACTION.TRUCK) === ACTION.TRUCK || (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK || (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK || (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n        this._truckInternal(deltaX, deltaY, false);\n\n        this._isUserControllingTruck = true;\n      }\n\n      if ((this._state & ACTION.OFFSET) === ACTION.OFFSET || (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET || (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET || (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n        this._truckInternal(deltaX, deltaY, true);\n\n        this._isUserControllingOffset = true;\n      }\n\n      this.dispatchEvent({\n        type: 'control'\n      });\n    };\n\n    const endDragging = () => {\n      extractClientCoordFromEvent(this._activePointers, _v2);\n      lastDragPosition.copy(_v2);\n\n      if (this._activePointers.length === 0 || this._activePointers.length === 1 && this._activePointers[0] === this._lockedPointer) {\n        this._isDragging = false;\n      }\n\n      if (this._activePointers.length === 0 && this._domElement) {\n        // eslint-disable-next-line no-undef\n        this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n          passive: false\n        });\n\n        this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\n        this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\n        this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\n        this.dispatchEvent({\n          type: 'controlend'\n        });\n      }\n    };\n\n    this.lockPointer = () => {\n      if (!this._enabled || !this._domElement) return;\n      this.cancel(); // Element.requestPointerLock is allowed to happen without any pointer active - create a faux one for compatibility with controls\n\n      this._lockedPointer = {\n        pointerId: -1,\n        clientX: 0,\n        clientY: 0,\n        deltaX: 0,\n        deltaY: 0,\n        mouseButton: null\n      };\n\n      this._activePointers.push(this._lockedPointer); // eslint-disable-next-line no-undef\n\n\n      this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n\n      this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\n      this._domElement.requestPointerLock();\n\n      this._domElement.ownerDocument.addEventListener('pointerlockchange', onPointerLockChange);\n\n      this._domElement.ownerDocument.addEventListener('pointerlockerror', onPointerLockError);\n\n      this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n\n      this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n\n      startDragging();\n    };\n\n    this.unlockPointer = () => {\n      if (this._lockedPointer !== null) {\n        this._disposePointer(this._lockedPointer);\n\n        this._lockedPointer = null;\n      }\n\n      document.exitPointerLock();\n      this.cancel();\n      if (!this._domElement) return;\n\n      this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n\n      this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n    };\n\n    const onPointerLockChange = () => {\n      const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;\n      if (!isPointerLockActive) this.unlockPointer();\n    };\n\n    const onPointerLockError = () => {\n      this.unlockPointer();\n    };\n\n    this._addAllEventListeners = domElement => {\n      this._domElement = domElement;\n      this._domElement.style.touchAction = 'none';\n      this._domElement.style.userSelect = 'none';\n      this._domElement.style.webkitUserSelect = 'none';\n\n      this._domElement.addEventListener('pointerdown', onPointerDown);\n\n      isPointerEventsNotSupported && this._domElement.addEventListener('mousedown', onMouseDown);\n\n      this._domElement.addEventListener('pointercancel', onPointerUp);\n\n      this._domElement.addEventListener('wheel', onMouseWheel, {\n        passive: false\n      });\n\n      this._domElement.addEventListener('contextmenu', onContextMenu);\n    };\n\n    this._removeAllEventListeners = () => {\n      if (!this._domElement) return;\n      this._domElement.style.touchAction = '';\n      this._domElement.style.userSelect = '';\n      this._domElement.style.webkitUserSelect = '';\n\n      this._domElement.removeEventListener('pointerdown', onPointerDown);\n\n      this._domElement.removeEventListener('mousedown', onMouseDown);\n\n      this._domElement.removeEventListener('pointercancel', onPointerUp); // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n      // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n      // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n      // eslint-disable-next-line no-undef\n\n\n      this._domElement.removeEventListener('wheel', onMouseWheel, {\n        passive: false\n      });\n\n      this._domElement.removeEventListener('contextmenu', onContextMenu); // eslint-disable-next-line no-undef\n\n\n      this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, {\n        passive: false\n      });\n\n      this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\n      this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\n      this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\n      this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n\n      this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n    };\n\n    this.cancel = () => {\n      if (this._state === ACTION.NONE) return;\n      this._state = ACTION.NONE;\n      this._activePointers.length = 0;\n      endDragging();\n    };\n\n    if (domElement) this.connect(domElement);\n    this.update(0);\n  }\n  /**\n   * The camera to be controlled\n   * @category Properties\n   */\n\n\n  get camera() {\n    return this._camera;\n  }\n\n  set camera(camera) {\n    this._camera = camera;\n    this.updateCameraUp();\n\n    this._camera.updateProjectionMatrix();\n\n    this._updateNearPlaneCorners();\n\n    this._needsUpdate = true;\n  }\n  /**\n   * Whether or not the controls are enabled.\n   * `false` to disable user dragging/touch-move, but all methods works.\n   * @category Properties\n   */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(enabled) {\n    this._enabled = enabled;\n    if (!this._domElement) return;\n\n    if (enabled) {\n      this._domElement.style.touchAction = 'none';\n      this._domElement.style.userSelect = 'none';\n      this._domElement.style.webkitUserSelect = 'none';\n    } else {\n      this.cancel();\n      this._domElement.style.touchAction = '';\n      this._domElement.style.userSelect = '';\n      this._domElement.style.webkitUserSelect = '';\n    }\n  }\n  /**\n   * Returns `true` if the controls are active updating.\n   * readonly value.\n   * @category Properties\n   */\n\n\n  get active() {\n    return !this._hasRested;\n  }\n  /**\n   * Getter for the current `ACTION`.\n   * readonly value.\n   * @category Properties\n   */\n\n\n  get currentAction() {\n    return this._state;\n  }\n  /**\n   * get/set Current distance.\n   * @category Properties\n   */\n\n\n  get distance() {\n    return this._spherical.radius;\n  }\n\n  set distance(distance) {\n    if (this._spherical.radius === distance && this._sphericalEnd.radius === distance) return;\n    this._spherical.radius = distance;\n    this._sphericalEnd.radius = distance;\n    this._needsUpdate = true;\n  } // horizontal angle\n\n  /**\n   * get/set the azimuth angle (horizontal) in radians.\n   * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n   * @category Properties\n   */\n\n\n  get azimuthAngle() {\n    return this._spherical.theta;\n  }\n\n  set azimuthAngle(azimuthAngle) {\n    if (this._spherical.theta === azimuthAngle && this._sphericalEnd.theta === azimuthAngle) return;\n    this._spherical.theta = azimuthAngle;\n    this._sphericalEnd.theta = azimuthAngle;\n    this._needsUpdate = true;\n  } // vertical angle\n\n  /**\n   * get/set the polar angle (vertical) in radians.\n   * @category Properties\n   */\n\n\n  get polarAngle() {\n    return this._spherical.phi;\n  }\n\n  set polarAngle(polarAngle) {\n    if (this._spherical.phi === polarAngle && this._sphericalEnd.phi === polarAngle) return;\n    this._spherical.phi = polarAngle;\n    this._sphericalEnd.phi = polarAngle;\n    this._needsUpdate = true;\n  }\n  /**\n   * Whether camera position should be enclosed in the boundary or not.\n   * @category Properties\n   */\n\n\n  get boundaryEnclosesCamera() {\n    return this._boundaryEnclosesCamera;\n  }\n\n  set boundaryEnclosesCamera(boundaryEnclosesCamera) {\n    this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n    this._needsUpdate = true;\n  }\n  /**\n   * Adds the specified event listener.\n   * Applicable event types (which is `K`) are:\n   * | Event name          | Timing |\n   * | ------------------- | ------ |\n   * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n   * | `'control'`         | When the user controls the camera (dragging). |\n   * | `'controlend'`      | When the user ends to control the camera. ¹ |\n   * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n   * | `'update'`          | When the camera position is updated. |\n   * | `'wake'`            | When the camera starts moving. |\n   * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n   * | `'sleep'`           | When the camera end moving. |\n   *\n   * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n   * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n   *\n   * e.g.\n   * ```\n   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n   * ```\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n\n\n  addEventListener(type, listener) {\n    super.addEventListener(type, listener);\n  }\n  /**\n   * Removes the specified event listener\n   * e.g.\n   * ```\n   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n   * ```\n   * @param type event name\n   * @param listener handler function\n   * @category Methods\n   */\n\n\n  removeEventListener(type, listener) {\n    super.removeEventListener(type, listener);\n  }\n  /**\n   * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n   * Every value is added to the current value.\n   * @param azimuthAngle Azimuth rotate angle. In radian.\n   * @param polarAngle Polar rotate angle. In radian.\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  rotate(azimuthAngle, polarAngle) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n  }\n  /**\n   * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n   *\n   * e.g.\n   * ```\n   * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n   * ```\n   * @param azimuthAngle Azimuth rotate angle. In radian.\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  rotateAzimuthTo(azimuthAngle) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n  }\n  /**\n   * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n   *\n   * e.g.\n   * ```\n   * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n   * ```\n   * @param polarAngle Polar rotate angle. In radian.\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  rotatePolarTo(polarAngle) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n  }\n  /**\n   * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n   * Camera view will rotate over the orbit pivot absolutely:\n   *\n   * azimuthAngle\n   * ```\n   *       0º\n   *         \\\n   * 90º -----+----- -90º\n   *           \\\n   *           180º\n   * ```\n   * | direction | angle                  |\n   * | --------- | ---------------------- |\n   * | front     | 0º                     |\n   * | left      | 90º (`Math.PI / 2`)    |\n   * | right     | -90º (`- Math.PI / 2`) |\n   * | back      | 180º (`Math.PI`)       |\n   *\n   * polarAngle\n   * ```\n   *     180º\n   *      |\n   *      90º\n   *      |\n   *      0º\n   * ```\n   * | direction            | angle                  |\n   * | -------------------- | ---------------------- |\n   * | top/sky              | 180º (`Math.PI`)       |\n   * | horizontal from view | 90º (`Math.PI / 2`)    |\n   * | bottom/floor         | 0º                     |\n   *\n   * @param azimuthAngle Azimuth rotate angle to. In radian.\n   * @param polarAngle Polar rotate angle to. In radian.\n   * @param enableTransition  Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  rotateTo(azimuthAngle, polarAngle) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this._isUserControllingRotate = false;\n    const theta = clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n    const phi = clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n    this._sphericalEnd.theta = theta;\n    this._sphericalEnd.phi = phi;\n\n    this._sphericalEnd.makeSafe();\n\n    this._needsUpdate = true;\n\n    if (!enableTransition) {\n      this._spherical.theta = this._sphericalEnd.theta;\n      this._spherical.phi = this._sphericalEnd.phi;\n    }\n\n    const resolveImmediately = !enableTransition || approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Dolly in/out camera position.\n   * @param distance Distance of dollyIn. Negative number for dollyOut.\n   * @param enableTransition Whether to move smoothly or immediately.\n   * @category Methods\n   */\n\n\n  dolly(distance) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n  }\n  /**\n   * Dolly in/out camera position to given distance.\n   * @param distance Distance of dolly.\n   * @param enableTransition Whether to move smoothly or immediately.\n   * @category Methods\n   */\n\n\n  dollyTo(distance) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this._isUserControllingDolly = false;\n    const lastRadius = this._sphericalEnd.radius;\n    const newRadius = clamp(distance, this.minDistance, this.maxDistance);\n    const hasCollider = this.colliderMeshes.length >= 1;\n\n    if (hasCollider) {\n      const maxDistanceByCollisionTest = this._collisionTest();\n\n      const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n      const isDollyIn = lastRadius > newRadius;\n      if (!isDollyIn && isCollided) return Promise.resolve();\n      this._sphericalEnd.radius = Math.min(newRadius, maxDistanceByCollisionTest);\n    } else {\n      this._sphericalEnd.radius = newRadius;\n    }\n\n    this._needsUpdate = true;\n\n    if (!enableTransition) {\n      this._spherical.radius = this._sphericalEnd.radius;\n    }\n\n    const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Zoom in/out camera. The value is added to camera zoom.\n   * Limits set with `.minZoom` and `.maxZoom`\n   * @param zoomStep zoom scale\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  zoom(zoomStep) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n  }\n  /**\n   * Zoom in/out camera to given scale. The value overwrites camera zoom.\n   * Limits set with .minZoom and .maxZoom\n   * @param zoom\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  zoomTo(zoom) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this._isUserControllingZoom = false;\n    this._zoomEnd = clamp(zoom, this.minZoom, this.maxZoom);\n    this._needsUpdate = true;\n\n    if (!enableTransition) {\n      this._zoom = this._zoomEnd;\n    }\n\n    const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * @deprecated `pan()` has been renamed to `truck()`\n   * @category Methods\n   */\n\n\n  pan(x, y) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    console.warn('`pan` has been renamed to `truck`');\n    return this.truck(x, y, enableTransition);\n  }\n  /**\n   * Truck and pedestal camera using current azimuthal angle\n   * @param x Horizontal translate amount\n   * @param y Vertical translate amount\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  truck(x, y) {\n    let enableTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    this._camera.updateMatrix();\n\n    _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n\n    _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n\n    _xColumn.multiplyScalar(x);\n\n    _yColumn.multiplyScalar(-y);\n\n    const offset = _v3A.copy(_xColumn).add(_yColumn);\n\n    const to = _v3B.copy(this._targetEnd).add(offset);\n\n    return this.moveTo(to.x, to.y, to.z, enableTransition);\n  }\n  /**\n   * Move forward / backward.\n   * @param distance Amount to move forward / backward. Negative value to move backward\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  forward(distance) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n\n    _v3A.crossVectors(this._camera.up, _v3A);\n\n    _v3A.multiplyScalar(distance);\n\n    const to = _v3B.copy(this._targetEnd).add(_v3A);\n\n    return this.moveTo(to.x, to.y, to.z, enableTransition);\n  }\n  /**\n   * Move up / down.\n   * @param height Amount to move up / down. Negative value to move down\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  elevate(height) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _v3A.copy(this._camera.up).multiplyScalar(height);\n\n    return this.moveTo(this._targetEnd.x + _v3A.x, this._targetEnd.y + _v3A.y, this._targetEnd.z + _v3A.z, enableTransition);\n  }\n  /**\n   * Move target position to given point.\n   * @param x x coord to move center position\n   * @param y y coord to move center position\n   * @param z z coord to move center position\n   * @param enableTransition Whether to move smoothly or immediately\n   * @category Methods\n   */\n\n\n  moveTo(x, y, z) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this._isUserControllingTruck = false;\n\n    const offset = _v3A.set(x, y, z).sub(this._targetEnd);\n\n    this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n\n    this._needsUpdate = true;\n\n    if (!enableTransition) {\n      this._target.copy(this._targetEnd);\n    }\n\n    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Look in the given point direction.\n   * @param x point x.\n   * @param y point y.\n   * @param z point z.\n   * @param enableTransition Whether to move smoothly or immediately.\n   * @returns Transition end promise\n   * @category Methods\n   */\n\n\n  lookInDirectionOf(x, y, z) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    const point = _v3A.set(x, y, z);\n\n    const direction = point.sub(this._targetEnd).normalize();\n    const position = direction.multiplyScalar(-this._sphericalEnd.radius);\n    return this.setPosition(position.x, position.y, position.z, enableTransition);\n  }\n  /**\n   * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n   * set `cover: true` to fill enter screen.\n   * e.g.\n   * ```\n   * cameraControls.fitToBox( myMesh );\n   * ```\n   * @param box3OrObject Axis aligned bounding box to fit the view.\n   * @param enableTransition Whether to move smoothly or immediately.\n   * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n   * @returns Transition end promise\n   * @category Methods\n   */\n\n\n  fitToBox(box3OrObject, enableTransition) {\n    let {\n      cover = false,\n      paddingLeft = 0,\n      paddingRight = 0,\n      paddingBottom = 0,\n      paddingTop = 0\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const promises = [];\n    const aabb = box3OrObject.isBox3 ? _box3A.copy(box3OrObject) : _box3A.setFromObject(box3OrObject);\n\n    if (aabb.isEmpty()) {\n      console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n      Promise.resolve();\n    } // round to closest axis ( forward | backward | right | left | top | bottom )\n\n\n    const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n    const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n    promises.push(this.rotateTo(theta, phi, enableTransition));\n\n    const normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n\n    const rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n\n    const viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n\n    if (viewFromPolar) {\n      rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n    }\n\n    rotation.multiply(this._yAxisUpSpaceInverse); // make oriented bounding box\n\n    const bb = _box3B.makeEmpty(); // left bottom back corner\n\n\n    _v3B.copy(aabb.min).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // right bottom back corner\n\n    _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // left top back corner\n\n    _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // right top back corner\n\n    _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // left bottom front corner\n\n    _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // right bottom front corner\n\n    _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // left top front corner\n\n    _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // right top front corner\n\n    _v3B.copy(aabb.max).applyQuaternion(rotation);\n\n    bb.expandByPoint(_v3B); // add padding\n\n    bb.min.x -= paddingLeft;\n    bb.min.y -= paddingBottom;\n    bb.max.x += paddingRight;\n    bb.max.y += paddingTop;\n    rotation.setFromUnitVectors(_AXIS_Z, normal);\n\n    if (viewFromPolar) {\n      rotation.premultiply(_quaternionB.invert());\n    }\n\n    rotation.premultiply(this._yAxisUpSpace);\n    const bbSize = bb.getSize(_v3A);\n    const center = bb.getCenter(_v3B).applyQuaternion(rotation);\n\n    if (isPerspectiveCamera(this._camera)) {\n      const distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n      promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n      promises.push(this.dollyTo(distance, enableTransition));\n      promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n    } else if (isOrthographicCamera(this._camera)) {\n      const camera = this._camera;\n      const width = camera.right - camera.left;\n      const height = camera.top - camera.bottom;\n      const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n      promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n      promises.push(this.zoomTo(zoom, enableTransition));\n      promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n    }\n\n    return Promise.all(promises);\n  }\n  /**\n   * Fit the viewport to the sphere or the bounding sphere of the object.\n   * @param sphereOrMesh\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  fitToSphere(sphereOrMesh, enableTransition) {\n    const promises = [];\n    const isSphere = sphereOrMesh instanceof THREE.Sphere;\n    const boundingSphere = isSphere ? _sphere.copy(sphereOrMesh) : CameraControls.createBoundingSphere(sphereOrMesh, _sphere);\n    promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n\n    if (isPerspectiveCamera(this._camera)) {\n      const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n      promises.push(this.dollyTo(distanceToFit, enableTransition));\n    } else if (isOrthographicCamera(this._camera)) {\n      const width = this._camera.right - this._camera.left;\n      const height = this._camera.top - this._camera.bottom;\n      const diameter = 2 * boundingSphere.radius;\n      const zoom = Math.min(width / diameter, height / diameter);\n      promises.push(this.zoomTo(zoom, enableTransition));\n    }\n\n    promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n    return Promise.all(promises);\n  }\n  /**\n   * Look at the `target` from the `position`.\n   * @param positionX\n   * @param positionY\n   * @param positionZ\n   * @param targetX\n   * @param targetY\n   * @param targetZ\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ) {\n    let enableTransition = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this._isUserControllingRotate = false;\n    this._isUserControllingDolly = false;\n    this._isUserControllingTruck = false;\n\n    const target = _v3B.set(targetX, targetY, targetZ);\n\n    const position = _v3A.set(positionX, positionY, positionZ);\n\n    this._targetEnd.copy(target);\n\n    this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n\n    this.normalizeRotations();\n    this._needsUpdate = true;\n\n    if (!enableTransition) {\n      this._target.copy(this._targetEnd);\n\n      this._spherical.copy(this._sphericalEnd);\n    }\n\n    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Similar to setLookAt, but it interpolates between two states.\n   * @param positionAX\n   * @param positionAY\n   * @param positionAZ\n   * @param targetAX\n   * @param targetAY\n   * @param targetAZ\n   * @param positionBX\n   * @param positionBY\n   * @param positionBZ\n   * @param targetBX\n   * @param targetBY\n   * @param targetBZ\n   * @param t\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t) {\n    let enableTransition = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : false;\n    this._isUserControllingRotate = false;\n    this._isUserControllingDolly = false;\n    this._isUserControllingTruck = false;\n\n    const targetA = _v3A.set(targetAX, targetAY, targetAZ);\n\n    const positionA = _v3B.set(positionAX, positionAY, positionAZ);\n\n    _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n\n    const targetB = _v3C.set(targetBX, targetBY, targetBZ);\n\n    const positionB = _v3B.set(positionBX, positionBY, positionBZ);\n\n    _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n\n    this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n\n\n    const deltaTheta = _sphericalB.theta - _sphericalA.theta;\n    const deltaPhi = _sphericalB.phi - _sphericalA.phi;\n    const deltaRadius = _sphericalB.radius - _sphericalA.radius;\n\n    this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n\n    this.normalizeRotations();\n    this._needsUpdate = true;\n\n    if (!enableTransition) {\n      this._target.copy(this._targetEnd);\n\n      this._spherical.copy(this._sphericalEnd);\n    }\n\n    const resolveImmediately = !enableTransition || approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) && approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) && approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) && approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Set angle and distance by given position.\n   * An alias of `setLookAt()`, without target change. Thus keep gazing at the current target\n   * @param positionX\n   * @param positionY\n   * @param positionZ\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  setPosition(positionX, positionY, positionZ) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n  }\n  /**\n   * Set the target position where gaze at.\n   * An alias of `setLookAt()`, without position change. Thus keep the same position.\n   * @param targetX\n   * @param targetY\n   * @param targetZ\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  setTarget(targetX, targetY, targetZ) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const pos = this.getPosition(_v3A);\n    const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition); // see https://github.com/yomotsu/camera-controls/issues/335\n\n    this._sphericalEnd.phi = clamp(this.polarAngle, this.minPolarAngle, this.maxPolarAngle);\n    return promise;\n  }\n  /**\n   * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n   * @param x\n   * @param y\n   * @param z\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  setFocalOffset(x, y, z) {\n    let enableTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this._isUserControllingOffset = false;\n\n    this._focalOffsetEnd.set(x, y, z);\n\n    this._needsUpdate = true;\n    if (!enableTransition) this._focalOffset.copy(this._focalOffsetEnd);\n    const resolveImmediately = !enableTransition || approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) && approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) && approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n    return this._createOnRestPromise(resolveImmediately);\n  }\n  /**\n   * Set orbit point without moving the camera.\n   * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n   * @param targetX\n   * @param targetY\n   * @param targetZ\n   * @category Methods\n   */\n\n\n  setOrbitPoint(targetX, targetY, targetZ) {\n    this._camera.updateMatrixWorld();\n\n    _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n\n    _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n\n    _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n\n    const position = _v3A.set(targetX, targetY, targetZ);\n\n    const distance = position.distanceTo(this._camera.position);\n    const cameraToPoint = position.sub(this._camera.position);\n\n    _xColumn.multiplyScalar(cameraToPoint.x);\n\n    _yColumn.multiplyScalar(cameraToPoint.y);\n\n    _zColumn.multiplyScalar(cameraToPoint.z);\n\n    _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n\n    _v3A.z = _v3A.z + distance;\n    this.dollyTo(distance, false);\n    this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n    this.moveTo(targetX, targetY, targetZ, false);\n  }\n  /**\n   * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n   * @param box3\n   * @category Methods\n   */\n\n\n  setBoundary(box3) {\n    if (!box3) {\n      this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n\n      this._boundary.max.set(Infinity, Infinity, Infinity);\n\n      this._needsUpdate = true;\n      return;\n    }\n\n    this._boundary.copy(box3);\n\n    this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n\n    this._needsUpdate = true;\n  }\n  /**\n   * Set (or unset) the current viewport.\n   * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n   * @param viewportOrX\n   * @param y\n   * @param width\n   * @param height\n   * @category Methods\n   */\n\n\n  setViewport(viewportOrX, y, width, height) {\n    if (viewportOrX === null) {\n      // null\n      this._viewport = null;\n      return;\n    }\n\n    this._viewport = this._viewport || new THREE.Vector4();\n\n    if (typeof viewportOrX === 'number') {\n      // number\n      this._viewport.set(viewportOrX, y, width, height);\n    } else {\n      // Vector4\n      this._viewport.copy(viewportOrX);\n    }\n  }\n  /**\n   * Calculate the distance to fit the box.\n   * @param width box width\n   * @param height box height\n   * @param depth box depth\n   * @returns distance\n   * @category Methods\n   */\n\n\n  getDistanceToFitBox(width, height, depth) {\n    let cover = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox')) return this._spherical.radius;\n    const boundingRectAspect = width / height;\n    const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n    const aspect = this._camera.aspect;\n    const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n    return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n  }\n  /**\n   * Calculate the distance to fit the sphere.\n   * @param radius sphere radius\n   * @returns distance\n   * @category Methods\n   */\n\n\n  getDistanceToFitSphere(radius) {\n    if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere')) return this._spherical.radius; // https://stackoverflow.com/a/44849975\n\n    const vFOV = this._camera.getEffectiveFOV() * DEG2RAD;\n    const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n    const fov = 1 < this._camera.aspect ? vFOV : hFOV;\n    return radius / Math.sin(fov * 0.5);\n  }\n  /**\n   * Returns its current gazing target, which is the center position of the orbit.\n   * @param out current gazing target\n   * @category Methods\n   */\n\n\n  getTarget(out) {\n    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n\n    return _out.copy(this._targetEnd);\n  }\n  /**\n   * Returns its current position.\n   * @param out current position\n   * @category Methods\n   */\n\n\n  getPosition(out) {\n    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n\n    return _out.setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);\n  }\n  /**\n   * Returns its current focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n   * @param out current focal offset\n   * @category Methods\n   */\n\n\n  getFocalOffset(out) {\n    const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n\n    return _out.copy(this._focalOffsetEnd);\n  }\n  /**\n   * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n   * @category Methods\n   */\n\n\n  normalizeRotations() {\n    this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n    if (this._sphericalEnd.theta < 0) this._sphericalEnd.theta += PI_2;\n    this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n  }\n  /**\n   * Reset all rotation and position to defaults.\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  reset() {\n    let enableTransition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!approxEquals(this._camera.up.x, this._cameraUp0.x) || !approxEquals(this._camera.up.y, this._cameraUp0.y) || !approxEquals(this._camera.up.z, this._cameraUp0.z)) {\n      this._camera.up.copy(this._cameraUp0);\n\n      const position = this.getPosition(_v3A);\n      this.updateCameraUp();\n      this.setPosition(position.x, position.y, position.z);\n    }\n\n    const promises = [this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition), this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition), this.zoomTo(this._zoom0, enableTransition)];\n    return Promise.all(promises);\n  }\n  /**\n   * Set current camera position as the default position.\n   * @category Methods\n   */\n\n\n  saveState() {\n    this._cameraUp0.copy(this._camera.up);\n\n    this.getTarget(this._target0);\n    this.getPosition(this._position0);\n    this._zoom0 = this._zoom;\n\n    this._focalOffset0.copy(this._focalOffset);\n  }\n  /**\n   * Sync camera-up direction.\n   * When camera-up vector is changed, `.updateCameraUp()` must be called.\n   * @category Methods\n   */\n\n\n  updateCameraUp() {\n    this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n\n    this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace).invert();\n  }\n  /**\n   * Apply current camera-up direction to the camera.\n   * The orbit system will be re-initialized with the current position.\n   * @category Methods\n   */\n\n\n  applyCameraUp() {\n    const cameraDirection = _v3A.subVectors(this._target, this._camera.position).normalize(); // So first find the vector off to the side, orthogonal to both this.object.up and\n    // the \"view\" vector.\n\n\n    const side = _v3B.crossVectors(cameraDirection, this._camera.up).normalize(); // Then find the vector orthogonal to both this \"side\" vector and the \"view\" vector.\n    // This vector will be the new \"up\" vector.\n\n\n    this._camera.up.crossVectors(side, cameraDirection).normalize();\n\n    this._camera.updateMatrixWorld();\n\n    const position = this.getPosition(_v3A);\n    this.updateCameraUp();\n    this.setPosition(position.x, position.y, position.z);\n  }\n  /**\n   * Update camera position and directions.\n   * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n   * @param delta\n   * @returns updated\n   * @category Methods\n   */\n\n\n  update(delta) {\n    const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n    const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n    const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n\n    const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n\n    const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n\n    const deltaZoom = this._zoomEnd - this._zoom; // update theta\n\n    if (approxZero(deltaTheta)) {\n      this._thetaVelocity.value = 0;\n      this._spherical.theta = this._sphericalEnd.theta;\n    } else {\n      const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n      this._spherical.theta = smoothDamp(this._spherical.theta, this._sphericalEnd.theta, this._thetaVelocity, smoothTime, Infinity, delta);\n      this._needsUpdate = true;\n    } // update phi\n\n\n    if (approxZero(deltaPhi)) {\n      this._phiVelocity.value = 0;\n      this._spherical.phi = this._sphericalEnd.phi;\n    } else {\n      const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n      this._spherical.phi = smoothDamp(this._spherical.phi, this._sphericalEnd.phi, this._phiVelocity, smoothTime, Infinity, delta);\n      this._needsUpdate = true;\n    } // update distance\n\n\n    if (approxZero(deltaRadius)) {\n      this._radiusVelocity.value = 0;\n      this._spherical.radius = this._sphericalEnd.radius;\n    } else {\n      const smoothTime = this._isUserControllingDolly ? this.draggingSmoothTime : this.smoothTime;\n      this._spherical.radius = smoothDamp(this._spherical.radius, this._sphericalEnd.radius, this._radiusVelocity, smoothTime, this.maxSpeed, delta);\n      this._needsUpdate = true;\n    } // update target position\n\n\n    if (approxZero(deltaTarget.x) && approxZero(deltaTarget.y) && approxZero(deltaTarget.z)) {\n      this._targetVelocity.set(0, 0, 0);\n\n      this._target.copy(this._targetEnd);\n    } else {\n      const smoothTime = this._isUserControllingTruck ? this.draggingSmoothTime : this.smoothTime;\n      smoothDampVec3(this._target, this._targetEnd, this._targetVelocity, smoothTime, this.maxSpeed, delta, this._target);\n      this._needsUpdate = true;\n    } // update focalOffset\n\n\n    if (approxZero(deltaOffset.x) && approxZero(deltaOffset.y) && approxZero(deltaOffset.z)) {\n      this._focalOffsetVelocity.set(0, 0, 0);\n\n      this._focalOffset.copy(this._focalOffsetEnd);\n    } else {\n      const smoothTime = this._isUserControllingOffset ? this.draggingSmoothTime : this.smoothTime;\n      smoothDampVec3(this._focalOffset, this._focalOffsetEnd, this._focalOffsetVelocity, smoothTime, this.maxSpeed, delta, this._focalOffset);\n      this._needsUpdate = true;\n    }\n\n    if (this._dollyControlAmount !== 0) {\n      if (isPerspectiveCamera(this._camera)) {\n        const camera = this._camera;\n\n        const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n\n        const planeX = _v3B.copy(cameraDirection).cross(camera.up).normalize();\n\n        if (planeX.lengthSq() === 0) planeX.x = 1.0;\n\n        const planeY = _v3C.crossVectors(planeX, cameraDirection);\n\n        const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * DEG2RAD * 0.5);\n        const prevRadius = this._sphericalEnd.radius - this._dollyControlAmount;\n        const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n\n        const cursor = _v3A.copy(this._targetEnd).add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect)).add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n\n        this._targetEnd.lerp(cursor, lerpRatio);\n      } else if (isOrthographicCamera(this._camera)) {\n        const camera = this._camera;\n\n        const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); //.sub( _v3B.set( this._focalOffset.x, this._focalOffset.y, 0 ) );\n\n\n        const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);\n\n        const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));\n\n        const prevZoom = this._zoom - this._dollyControlAmount;\n        const lerpRatio = -(prevZoom - this._zoomEnd) / this._zoom; // find the \"distance\" (aka plane constant in three.js) of Plane\n        // from a given position (this._targetEnd) and normal vector (cameraDirection)\n        // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n\n        const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n\n        const prevPlaneConstant = this._targetEnd.dot(cameraDirection);\n\n        this._targetEnd.lerp(cursor, lerpRatio);\n\n        const newPlaneConstant = this._targetEnd.dot(cameraDirection); // Pull back the camera depth that has moved, to be the camera stationary as zoom\n\n\n        const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n\n        this._targetEnd.sub(pullBack);\n      }\n\n      this._target.copy(this._targetEnd); // target position may be moved beyond boundary.\n\n\n      this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n\n      this._dollyControlAmount = 0;\n    } // update zoom\n\n\n    if (approxZero(deltaZoom)) {\n      this._zoomVelocity.value = 0;\n      this._zoom = this._zoomEnd;\n    } else {\n      const smoothTime = this._isUserControllingZoom ? this.draggingSmoothTime : this.smoothTime;\n      this._zoom = smoothDamp(this._zoom, this._zoomEnd, this._zoomVelocity, smoothTime, Infinity, delta);\n    }\n\n    if (this._camera.zoom !== this._zoom) {\n      this._camera.zoom = this._zoom;\n\n      this._camera.updateProjectionMatrix();\n\n      this._updateNearPlaneCorners();\n\n      this._needsUpdate = true;\n    } // collision detection\n\n\n    const maxDistance = this._collisionTest();\n\n    this._spherical.radius = Math.min(this._spherical.radius, maxDistance); // decompose spherical to the camera position\n\n    this._spherical.makeSafe();\n\n    this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n\n    this._camera.lookAt(this._target); // set offset after the orbit movement\n\n\n    const affectOffset = !approxZero(this._focalOffset.x) || !approxZero(this._focalOffset.y) || !approxZero(this._focalOffset.z);\n\n    if (affectOffset) {\n      this._camera.updateMatrixWorld();\n\n      _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n\n      _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n\n      _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n\n      _xColumn.multiplyScalar(this._focalOffset.x);\n\n      _yColumn.multiplyScalar(-this._focalOffset.y);\n\n      _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n\n\n      _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n\n      this._camera.position.add(_v3A);\n    }\n\n    if (this._boundaryEnclosesCamera) {\n      this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n    }\n\n    const updated = this._needsUpdate;\n\n    if (updated && !this._updatedLastTime) {\n      this._hasRested = false;\n      this.dispatchEvent({\n        type: 'wake'\n      });\n      this.dispatchEvent({\n        type: 'update'\n      });\n    } else if (updated) {\n      this.dispatchEvent({\n        type: 'update'\n      });\n\n      if (approxZero(deltaTheta, this.restThreshold) && approxZero(deltaPhi, this.restThreshold) && approxZero(deltaRadius, this.restThreshold) && approxZero(deltaTarget.x, this.restThreshold) && approxZero(deltaTarget.y, this.restThreshold) && approxZero(deltaTarget.z, this.restThreshold) && approxZero(deltaOffset.x, this.restThreshold) && approxZero(deltaOffset.y, this.restThreshold) && approxZero(deltaOffset.z, this.restThreshold) && approxZero(deltaZoom, this.restThreshold) && !this._hasRested) {\n        this._hasRested = true;\n        this.dispatchEvent({\n          type: 'rest'\n        });\n      }\n    } else if (!updated && this._updatedLastTime) {\n      this.dispatchEvent({\n        type: 'sleep'\n      });\n    }\n\n    this._updatedLastTime = updated;\n    this._needsUpdate = false;\n    return updated;\n  }\n  /**\n   * Get all state in JSON string\n   * @category Methods\n   */\n\n\n  toJSON() {\n    return JSON.stringify({\n      enabled: this._enabled,\n      minDistance: this.minDistance,\n      maxDistance: infinityToMaxNumber(this.maxDistance),\n      minZoom: this.minZoom,\n      maxZoom: infinityToMaxNumber(this.maxZoom),\n      minPolarAngle: this.minPolarAngle,\n      maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n      minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n      maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n      smoothTime: this.smoothTime,\n      draggingSmoothTime: this.draggingSmoothTime,\n      dollySpeed: this.dollySpeed,\n      truckSpeed: this.truckSpeed,\n      dollyToCursor: this.dollyToCursor,\n      verticalDragToForward: this.verticalDragToForward,\n      target: this._targetEnd.toArray(),\n      position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n      zoom: this._zoomEnd,\n      focalOffset: this._focalOffsetEnd.toArray(),\n      target0: this._target0.toArray(),\n      position0: this._position0.toArray(),\n      zoom0: this._zoom0,\n      focalOffset0: this._focalOffset0.toArray()\n    });\n  }\n  /**\n   * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n   * @param json\n   * @param enableTransition\n   * @category Methods\n   */\n\n\n  fromJSON(json) {\n    let enableTransition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const obj = JSON.parse(json);\n    this.enabled = obj.enabled;\n    this.minDistance = obj.minDistance;\n    this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n    this.minZoom = obj.minZoom;\n    this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n    this.minPolarAngle = obj.minPolarAngle;\n    this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n    this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n    this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n    this.smoothTime = obj.smoothTime;\n    this.draggingSmoothTime = obj.draggingSmoothTime;\n    this.dollySpeed = obj.dollySpeed;\n    this.truckSpeed = obj.truckSpeed;\n    this.dollyToCursor = obj.dollyToCursor;\n    this.verticalDragToForward = obj.verticalDragToForward;\n\n    this._target0.fromArray(obj.target0);\n\n    this._position0.fromArray(obj.position0);\n\n    this._zoom0 = obj.zoom0;\n\n    this._focalOffset0.fromArray(obj.focalOffset0);\n\n    this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n\n    _sphericalA.setFromVector3(_v3A.fromArray(obj.position).sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n\n    this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n    this.dollyTo(_sphericalA.radius, enableTransition);\n    this.zoomTo(obj.zoom, enableTransition);\n    this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n    this._needsUpdate = true;\n  }\n  /**\n   * Attach all internal event handlers to enable drag control.\n   * @category Methods\n   */\n\n\n  connect(domElement) {\n    if (this._domElement) {\n      console.warn('camera-controls is already connected.');\n      return;\n    }\n\n    domElement.setAttribute('data-camera-controls-version', VERSION);\n\n    this._addAllEventListeners(domElement);\n  }\n  /**\n   * Detach all internal event handlers to disable drag control.\n   */\n\n\n  disconnect() {\n    this.cancel();\n\n    this._removeAllEventListeners();\n\n    if (this._domElement) {\n      this._domElement.removeAttribute('data-camera-controls-version');\n\n      this._domElement = undefined;\n    }\n  }\n  /**\n   * Dispose the cameraControls instance itself, remove all eventListeners.\n   * @category Methods\n   */\n\n\n  dispose() {\n    // remove all user event listeners\n    this.removeAllEventListeners(); // remove all internal event listeners\n\n    this.disconnect();\n  }\n\n  _findPointerById(pointerId) {\n    return this._activePointers.find(activePointer => activePointer.pointerId === pointerId);\n  }\n\n  _findPointerByMouseButton(mouseButton) {\n    return this._activePointers.find(activePointer => activePointer.mouseButton === mouseButton);\n  }\n\n  _disposePointer(pointer) {\n    this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n  }\n\n  _encloseToBoundary(position, offset, friction) {\n    const offsetLength2 = offset.lengthSq();\n\n    if (offsetLength2 === 0.0) {\n      // sanity check\n      return position;\n    } // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n\n\n    const newTarget = _v3B.copy(offset).add(position); // target\n\n\n    const clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n\n\n    const deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n\n    const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n\n    if (deltaClampedTargetLength2 === 0.0) {\n      // when the position doesn't have to be clamped\n      return position.add(offset);\n    } else if (deltaClampedTargetLength2 === offsetLength2) {\n      // when the position is completely stuck\n      return position;\n    } else if (friction === 0.0) {\n      return position.add(offset).add(deltaClampedTarget);\n    } else {\n      const offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n      return position.add(_v3B.copy(offset).multiplyScalar(offsetFactor)).add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n    }\n  }\n\n  _updateNearPlaneCorners() {\n    if (isPerspectiveCamera(this._camera)) {\n      const camera = this._camera;\n      const near = camera.near;\n      const fov = camera.getEffectiveFOV() * DEG2RAD;\n      const heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n\n      const widthHalf = heightHalf * camera.aspect; // near plain half width\n\n      this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n\n      this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n\n      this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n\n      this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n    } else if (isOrthographicCamera(this._camera)) {\n      const camera = this._camera;\n      const zoomInv = 1 / camera.zoom;\n      const left = camera.left * zoomInv;\n      const right = camera.right * zoomInv;\n      const top = camera.top * zoomInv;\n      const bottom = camera.bottom * zoomInv;\n\n      this._nearPlaneCorners[0].set(left, top, 0);\n\n      this._nearPlaneCorners[1].set(right, top, 0);\n\n      this._nearPlaneCorners[2].set(right, bottom, 0);\n\n      this._nearPlaneCorners[3].set(left, bottom, 0);\n    }\n  } // lateUpdate\n\n\n  _collisionTest() {\n    let distance = Infinity;\n    const hasCollider = this.colliderMeshes.length >= 1;\n    if (!hasCollider) return distance;\n    if (notSupportedInOrthographicCamera(this._camera, '_collisionTest')) return distance; // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n\n    const direction = _v3A.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);\n\n    _rotationMatrix.lookAt(_ORIGIN, direction, this._camera.up);\n\n    for (let i = 0; i < 4; i++) {\n      const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n\n      nearPlaneCorner.applyMatrix4(_rotationMatrix);\n\n      const origin = _v3C.addVectors(this._target, nearPlaneCorner);\n\n      _raycaster.set(origin, direction);\n\n      _raycaster.far = this._spherical.radius + 1;\n\n      const intersects = _raycaster.intersectObjects(this.colliderMeshes);\n\n      if (intersects.length !== 0 && intersects[0].distance < distance) {\n        distance = intersects[0].distance;\n      }\n    }\n\n    return distance;\n  }\n  /**\n   * Get its client rect and package into given `DOMRect` .\n   */\n\n\n  _getClientRect(target) {\n    if (!this._domElement) return;\n\n    const rect = this._domElement.getBoundingClientRect();\n\n    target.x = rect.left;\n    target.y = rect.top;\n\n    if (this._viewport) {\n      target.x += this._viewport.x;\n      target.y += rect.height - this._viewport.w - this._viewport.y;\n      target.width = this._viewport.z;\n      target.height = this._viewport.w;\n    } else {\n      target.width = rect.width;\n      target.height = rect.height;\n    }\n\n    return target;\n  }\n\n  _createOnRestPromise(resolveImmediately) {\n    if (resolveImmediately) return Promise.resolve();\n    this._hasRested = false;\n    this.dispatchEvent({\n      type: 'transitionstart'\n    });\n    return new Promise(resolve => {\n      const onResolve = () => {\n        this.removeEventListener('rest', onResolve);\n        resolve();\n      };\n\n      this.addEventListener('rest', onResolve);\n    });\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  _addAllEventListeners(_domElement) {}\n\n  _removeAllEventListeners() {}\n  /**\n   * backward compatible\n   * @deprecated use smoothTime (in seconds) instead\n   * @category Properties\n   */\n\n\n  get dampingFactor() {\n    console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n    return 0;\n  }\n  /**\n   * backward compatible\n   * @deprecated use smoothTime (in seconds) instead\n   * @category Properties\n   */\n\n\n  set dampingFactor(_) {\n    console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n  }\n  /**\n   * backward compatible\n   * @deprecated use draggingSmoothTime (in seconds) instead\n   * @category Properties\n   */\n\n\n  get draggingDampingFactor() {\n    console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n    return 0;\n  }\n  /**\n   * backward compatible\n   * @deprecated use draggingSmoothTime (in seconds) instead\n   * @category Properties\n   */\n\n\n  set draggingDampingFactor(_) {\n    console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n  }\n\n  static createBoundingSphere(object3d) {\n    let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new THREE.Sphere();\n    const boundingSphere = out;\n    const center = boundingSphere.center;\n\n    _box3A.makeEmpty(); // find the center\n\n\n    object3d.traverseVisible(object => {\n      if (!object.isMesh) return;\n\n      _box3A.expandByObject(object);\n    });\n\n    _box3A.getCenter(center); // find the radius\n\n\n    let maxRadiusSq = 0;\n    object3d.traverseVisible(object => {\n      if (!object.isMesh) return;\n      const mesh = object;\n      const geometry = mesh.geometry.clone();\n      geometry.applyMatrix4(mesh.matrixWorld);\n      const bufferGeometry = geometry;\n      const position = bufferGeometry.attributes.position;\n\n      for (let i = 0, l = position.count; i < l; i++) {\n        _v3A.fromBufferAttribute(position, i);\n\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n      }\n    });\n    boundingSphere.radius = Math.sqrt(maxRadiusSq);\n    return boundingSphere;\n  }\n\n}\n\nexport { CameraControls as default };","map":{"version":3,"names":["MOUSE_BUTTON","LEFT","RIGHT","MIDDLE","ACTION","Object","freeze","NONE","ROTATE","TRUCK","OFFSET","DOLLY","ZOOM","TOUCH_ROTATE","TOUCH_TRUCK","TOUCH_OFFSET","TOUCH_DOLLY","TOUCH_ZOOM","TOUCH_DOLLY_TRUCK","TOUCH_DOLLY_OFFSET","TOUCH_DOLLY_ROTATE","TOUCH_ZOOM_TRUCK","TOUCH_ZOOM_OFFSET","TOUCH_ZOOM_ROTATE","isPerspectiveCamera","camera","isOrthographicCamera","PI_2","Math","PI","PI_HALF","EPSILON","DEG2RAD","clamp","value","min","max","approxZero","number","error","abs","approxEquals","a","b","roundToStep","step","round","infinityToMaxNumber","isFinite","Number","MAX_VALUE","maxNumberToInfinity","Infinity","smoothDamp","current","target","currentVelocityRef","smoothTime","maxSpeed","deltaTime","omega","x","exp","change","originalTo","maxChange","temp","output","smoothDampVec3","out","targetX","targetY","y","targetZ","z","changeX","changeY","changeZ","originalToX","originalToY","originalToZ","maxChangeSq","magnitudeSq","magnitude","sqrt","tempX","tempY","tempZ","origMinusCurrentX","origMinusCurrentY","origMinusCurrentZ","outMinusOrigX","outMinusOrigY","outMinusOrigZ","extractClientCoordFromEvent","pointers","set","forEach","pointer","clientX","clientY","length","notSupportedInOrthographicCamera","message","console","warn","EventDispatcher","constructor","_listeners","addEventListener","type","listener","listeners","undefined","indexOf","push","hasEventListener","removeEventListener","listenerArray","index","splice","removeAllEventListeners","Array","isArray","dispatchEvent","event","array","slice","i","l","call","VERSION","TOUCH_DOLLY_FACTOR","isBrowser","window","isMac","test","navigator","platform","isPointerEventsNotSupported","THREE","_ORIGIN","_AXIS_Y","_AXIS_Z","_v2","_v3A","_v3B","_v3C","_xColumn","_yColumn","_zColumn","_deltaTarget","_deltaOffset","_sphericalA","_sphericalB","_box3A","_box3B","_sphere","_quaternionA","_quaternionB","_rotationMatrix","_raycaster","CameraControls","install","libs","Vector3","Vector2","Spherical","Box3","Sphere","Quaternion","Matrix4","Raycaster","domElement","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","maxDistance","infinityDolly","minZoom","maxZoom","draggingSmoothTime","azimuthRotateSpeed","polarRotateSpeed","dollySpeed","dollyDragInverted","truckSpeed","dollyToCursor","dragToOffset","verticalDragToForward","boundaryFriction","restThreshold","colliderMeshes","cancel","_enabled","_state","_viewport","_dollyControlAmount","_hasRested","_boundaryEnclosesCamera","_needsUpdate","_updatedLastTime","_elementRect","DOMRect","_isDragging","_activePointers","_lockedPointer","_isUserControllingRotate","_isUserControllingDolly","_isUserControllingTruck","_isUserControllingOffset","_isUserControllingZoom","_thetaVelocity","_phiVelocity","_radiusVelocity","_targetVelocity","_focalOffsetVelocity","_zoomVelocity","_truckInternal","deltaX","deltaY","truckX","pedestalY","_camera","offset","copy","position","sub","_target","fov","getEffectiveFOV","targetDistance","tan","height","right","left","zoom","width","top","bottom","setFocalOffset","_focalOffsetEnd","truck","forward","_rotateInternal","theta","phi","rotate","_dollyInternal","delta","dollyScale","pow","distance","_sphericalEnd","radius","prevRadius","signedPrevRadius","dollyTo","getWorldDirection","_targetEnd","add","normalize","multiplyScalar","_dollyControlCoord","_zoomInternal","zoomScale","prevZoom","_zoomEnd","zoomTo","_zoom","_yAxisUpSpace","setFromUnitVectors","up","_yAxisUpSpaceInverse","clone","invert","_focalOffset","_spherical","setFromVector3","applyQuaternion","_nearPlaneCorners","_updateNearPlaneCorners","_boundary","_cameraUp0","_target0","_position0","_zoom0","_focalOffset0","mouseButtons","middle","wheel","touches","one","two","three","dragStartPosition","lastDragPosition","dollyStart","onPointerDown","_domElement","mouseButton","pointerType","buttons","zombiePointer","_findPointerByMouseButton","_disposePointer","pointerId","ownerDocument","onPointerMove","passive","onPointerUp","startDragging","onMouseDown","onMouseMove","onMouseUp","cancelable","preventDefault","_findPointerById","movementX","movementY","dragging","endDragging","lastScrollTimeStamp","onMouseWheel","now","performance","_getClientRect","deltaYFactor","deltaMode","onContextMenu","PointerEvent","MouseEvent","isMultiTouch","dx","dy","isPointerLockActive","document","pointerLockElement","lockedPointer","dollyX","dollyY","dollyDirection","dollyDelta","lockPointer","requestPointerLock","onPointerLockChange","onPointerLockError","unlockPointer","exitPointerLock","_addAllEventListeners","style","touchAction","userSelect","webkitUserSelect","_removeAllEventListeners","connect","update","updateCameraUp","updateProjectionMatrix","enabled","active","currentAction","azimuthAngle","polarAngle","boundaryEnclosesCamera","enableTransition","rotateTo","rotateAzimuthTo","rotatePolarTo","makeSafe","resolveImmediately","_createOnRestPromise","dolly","lastRadius","newRadius","hasCollider","maxDistanceByCollisionTest","_collisionTest","isCollided","isDollyIn","Promise","resolve","zoomStep","pan","updateMatrix","setFromMatrixColumn","matrix","to","moveTo","crossVectors","elevate","_encloseToBoundary","lookInDirectionOf","point","direction","setPosition","fitToBox","box3OrObject","cover","paddingLeft","paddingRight","paddingBottom","paddingTop","promises","aabb","isBox3","setFromObject","isEmpty","normal","setFromSpherical","rotation","viewFromPolar","multiply","setFromAxisAngle","bb","makeEmpty","expandByPoint","setX","setY","setZ","premultiply","bbSize","getSize","center","getCenter","getDistanceToFitBox","all","fitToSphere","sphereOrMesh","isSphere","boundingSphere","createBoundingSphere","distanceToFit","getDistanceToFitSphere","diameter","setLookAt","positionX","positionY","positionZ","normalizeRotations","lerpLookAt","positionAX","positionAY","positionAZ","targetAX","targetAY","targetAZ","positionBX","positionBY","positionBZ","targetBX","targetBY","targetBZ","t","targetA","positionA","targetB","positionB","lerp","deltaTheta","deltaPhi","deltaRadius","setTarget","pos","getPosition","promise","setOrbitPoint","updateMatrixWorld","matrixWorldInverse","distanceTo","cameraToPoint","setBoundary","box3","clampPoint","setViewport","viewportOrX","Vector4","depth","boundingRectAspect","aspect","heightToFit","vFOV","hFOV","atan","sin","getTarget","_out","isVector3","getFocalOffset","reset","saveState","applyCameraUp","cameraDirection","subVectors","side","deltaTarget","deltaOffset","deltaZoom","negate","planeX","cross","lengthSq","planeY","worldToScreen","lerpRatio","cursor","worldCursorPosition","near","far","unproject","quaternion","dot","prevPlaneConstant","newPlaneConstant","pullBack","lookAt","affectOffset","updated","toJSON","JSON","stringify","toArray","focalOffset","target0","position0","zoom0","focalOffset0","fromJSON","json","obj","parse","fromArray","setAttribute","disconnect","removeAttribute","dispose","find","activePointer","friction","offsetLength2","newTarget","clampedTarget","deltaClampedTarget","deltaClampedTargetLength2","offsetFactor","heightHalf","widthHalf","zoomInv","divideScalar","nearPlaneCorner","applyMatrix4","origin","addVectors","intersects","intersectObjects","rect","getBoundingClientRect","w","onResolve","dampingFactor","_","draggingDampingFactor","object3d","traverseVisible","object","isMesh","expandByObject","maxRadiusSq","mesh","geometry","matrixWorld","bufferGeometry","attributes","count","fromBufferAttribute","distanceToSquared","default"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/camera-controls/dist/camera-controls.module.js"],"sourcesContent":["/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\nconst MOUSE_BUTTON = {\n    LEFT: 1,\n    RIGHT: 2,\n    MIDDLE: 4,\n};\nconst ACTION = Object.freeze({\n    NONE: 0,\n    ROTATE: 1,\n    TRUCK: 2,\n    OFFSET: 4,\n    DOLLY: 8,\n    ZOOM: 16,\n    TOUCH_ROTATE: 32,\n    TOUCH_TRUCK: 64,\n    TOUCH_OFFSET: 128,\n    TOUCH_DOLLY: 256,\n    TOUCH_ZOOM: 512,\n    TOUCH_DOLLY_TRUCK: 1024,\n    TOUCH_DOLLY_OFFSET: 2048,\n    TOUCH_DOLLY_ROTATE: 4096,\n    TOUCH_ZOOM_TRUCK: 8192,\n    TOUCH_ZOOM_OFFSET: 16384,\n    TOUCH_ZOOM_ROTATE: 32768,\n});\nfunction isPerspectiveCamera(camera) {\n    return camera.isPerspectiveCamera;\n}\nfunction isOrthographicCamera(camera) {\n    return camera.isOrthographicCamera;\n}\n\nconst PI_2 = Math.PI * 2;\nconst PI_HALF = Math.PI / 2;\n\nconst EPSILON = 1e-5;\nconst DEG2RAD = Math.PI / 180;\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nfunction approxZero(number, error = EPSILON) {\n    return Math.abs(number) < error;\n}\nfunction approxEquals(a, b, error = EPSILON) {\n    return approxZero(a - b, error);\n}\nfunction roundToStep(value, step) {\n    return Math.round(value / step) * step;\n}\nfunction infinityToMaxNumber(value) {\n    if (isFinite(value))\n        return value;\n    if (value < 0)\n        return -Number.MAX_VALUE;\n    return Number.MAX_VALUE;\n}\nfunction maxNumberToInfinity(value) {\n    if (Math.abs(value) < Number.MAX_VALUE)\n        return value;\n    return value * Infinity;\n}\n// https://docs.unity3d.com/ScriptReference/Mathf.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Mathf.cs#L308\nfunction smoothDamp(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime) {\n    // Based on Game Programming Gems 4 Chapter 1.10\n    smoothTime = Math.max(0.0001, smoothTime);\n    const omega = 2 / smoothTime;\n    const x = omega * deltaTime;\n    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n    let change = current - target;\n    const originalTo = target;\n    // Clamp maximum speed\n    const maxChange = maxSpeed * smoothTime;\n    change = clamp(change, -maxChange, maxChange);\n    target = current - change;\n    const temp = (currentVelocityRef.value + omega * change) * deltaTime;\n    currentVelocityRef.value = (currentVelocityRef.value - omega * temp) * exp;\n    let output = target + (change + temp) * exp;\n    // Prevent overshooting\n    if (originalTo - current > 0.0 === output > originalTo) {\n        output = originalTo;\n        currentVelocityRef.value = (output - originalTo) / deltaTime;\n    }\n    return output;\n}\n// https://docs.unity3d.com/ScriptReference/Vector3.SmoothDamp.html\n// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Vector3.cs#L97\nfunction smoothDampVec3(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime, out) {\n    // Based on Game Programming Gems 4 Chapter 1.10\n    smoothTime = Math.max(0.0001, smoothTime);\n    const omega = 2 / smoothTime;\n    const x = omega * deltaTime;\n    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n    let targetX = target.x;\n    let targetY = target.y;\n    let targetZ = target.z;\n    let changeX = current.x - targetX;\n    let changeY = current.y - targetY;\n    let changeZ = current.z - targetZ;\n    const originalToX = targetX;\n    const originalToY = targetY;\n    const originalToZ = targetZ;\n    // Clamp maximum speed\n    const maxChange = maxSpeed * smoothTime;\n    const maxChangeSq = maxChange * maxChange;\n    const magnitudeSq = changeX * changeX + changeY * changeY + changeZ * changeZ;\n    if (magnitudeSq > maxChangeSq) {\n        const magnitude = Math.sqrt(magnitudeSq);\n        changeX = changeX / magnitude * maxChange;\n        changeY = changeY / magnitude * maxChange;\n        changeZ = changeZ / magnitude * maxChange;\n    }\n    targetX = current.x - changeX;\n    targetY = current.y - changeY;\n    targetZ = current.z - changeZ;\n    const tempX = (currentVelocityRef.x + omega * changeX) * deltaTime;\n    const tempY = (currentVelocityRef.y + omega * changeY) * deltaTime;\n    const tempZ = (currentVelocityRef.z + omega * changeZ) * deltaTime;\n    currentVelocityRef.x = (currentVelocityRef.x - omega * tempX) * exp;\n    currentVelocityRef.y = (currentVelocityRef.y - omega * tempY) * exp;\n    currentVelocityRef.z = (currentVelocityRef.z - omega * tempZ) * exp;\n    out.x = targetX + (changeX + tempX) * exp;\n    out.y = targetY + (changeY + tempY) * exp;\n    out.z = targetZ + (changeZ + tempZ) * exp;\n    // Prevent overshooting\n    const origMinusCurrentX = originalToX - current.x;\n    const origMinusCurrentY = originalToY - current.y;\n    const origMinusCurrentZ = originalToZ - current.z;\n    const outMinusOrigX = out.x - originalToX;\n    const outMinusOrigY = out.y - originalToY;\n    const outMinusOrigZ = out.z - originalToZ;\n    if (origMinusCurrentX * outMinusOrigX + origMinusCurrentY * outMinusOrigY + origMinusCurrentZ * outMinusOrigZ > 0) {\n        out.x = originalToX;\n        out.y = originalToY;\n        out.z = originalToZ;\n        currentVelocityRef.x = (out.x - originalToX) / deltaTime;\n        currentVelocityRef.y = (out.y - originalToY) / deltaTime;\n        currentVelocityRef.z = (out.z - originalToZ) / deltaTime;\n    }\n    return out;\n}\n\nfunction extractClientCoordFromEvent(pointers, out) {\n    out.set(0, 0);\n    pointers.forEach((pointer) => {\n        out.x += pointer.clientX;\n        out.y += pointer.clientY;\n    });\n    out.x /= pointers.length;\n    out.y /= pointers.length;\n}\n\nfunction notSupportedInOrthographicCamera(camera, message) {\n    if (isOrthographicCamera(camera)) {\n        console.warn(`${message} is not supported in OrthographicCamera`);\n        return true;\n    }\n    return false;\n}\n\nclass EventDispatcher {\n    constructor() {\n        this._listeners = {};\n    }\n    /**\n     * Adds the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        const listeners = this._listeners;\n        if (listeners[type] === undefined)\n            listeners[type] = [];\n        if (listeners[type].indexOf(listener) === -1)\n            listeners[type].push(listener);\n    }\n    /**\n     * Presence of the specified event listener.\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    hasEventListener(type, listener) {\n        const listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    }\n    /**\n     * Removes the specified event listener\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[type];\n        if (listenerArray !== undefined) {\n            const index = listenerArray.indexOf(listener);\n            if (index !== -1)\n                listenerArray.splice(index, 1);\n        }\n    }\n    /**\n     * Removes all event listeners\n     * @param type event name\n     * @category Methods\n     */\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = {};\n            return;\n        }\n        if (Array.isArray(this._listeners[type]))\n            this._listeners[type].length = 0;\n    }\n    /**\n     * Fire an event type.\n     * @param event DispatcherEvent\n     * @category Methods\n     */\n    dispatchEvent(event) {\n        const listeners = this._listeners;\n        const listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            const array = listenerArray.slice(0);\n            for (let i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n}\n\nconst VERSION = '2.3.5'; // will be replaced with `version` in package.json during the build process.\nconst TOUCH_DOLLY_FACTOR = 1 / 8;\nconst isBrowser = typeof window !== 'undefined';\nconst isMac = isBrowser && /Mac/.test(navigator.platform);\nconst isPointerEventsNotSupported = !(isBrowser && 'PointerEvent' in window); // macOS Safari 12 does not support PointerEvents API\nlet THREE;\nlet _ORIGIN;\nlet _AXIS_Y;\nlet _AXIS_Z;\nlet _v2;\nlet _v3A;\nlet _v3B;\nlet _v3C;\nlet _xColumn;\nlet _yColumn;\nlet _zColumn;\nlet _deltaTarget;\nlet _deltaOffset;\nlet _sphericalA;\nlet _sphericalB;\nlet _box3A;\nlet _box3B;\nlet _sphere;\nlet _quaternionA;\nlet _quaternionB;\nlet _rotationMatrix;\nlet _raycaster;\nclass CameraControls extends EventDispatcher {\n    /**\n     * Injects THREE as the dependency. You can then proceed to use CameraControls.\n     *\n     * e.g\n     * ```javascript\n     * CameraControls.install( { THREE: THREE } );\n     * ```\n     *\n     * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n     *\n     * ```js\n     * import {\n     * \tVector2,\n     * \tVector3,\n     * \tVector4,\n     * \tQuaternion,\n     * \tMatrix4,\n     * \tSpherical,\n     * \tBox3,\n     * \tSphere,\n     * \tRaycaster,\n     * \tMathUtils,\n     * } from 'three';\n     *\n     * const subsetOfTHREE = {\n     * \tVector2   : Vector2,\n     * \tVector3   : Vector3,\n     * \tVector4   : Vector4,\n     * \tQuaternion: Quaternion,\n     * \tMatrix4   : Matrix4,\n     * \tSpherical : Spherical,\n     * \tBox3      : Box3,\n     * \tSphere    : Sphere,\n     * \tRaycaster : Raycaster,\n     * };\n\n     * CameraControls.install( { THREE: subsetOfTHREE } );\n     * ```\n     * @category Statics\n     */\n    static install(libs) {\n        THREE = libs.THREE;\n        _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n        _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n        _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n        _v2 = new THREE.Vector2();\n        _v3A = new THREE.Vector3();\n        _v3B = new THREE.Vector3();\n        _v3C = new THREE.Vector3();\n        _xColumn = new THREE.Vector3();\n        _yColumn = new THREE.Vector3();\n        _zColumn = new THREE.Vector3();\n        _deltaTarget = new THREE.Vector3();\n        _deltaOffset = new THREE.Vector3();\n        _sphericalA = new THREE.Spherical();\n        _sphericalB = new THREE.Spherical();\n        _box3A = new THREE.Box3();\n        _box3B = new THREE.Box3();\n        _sphere = new THREE.Sphere();\n        _quaternionA = new THREE.Quaternion();\n        _quaternionB = new THREE.Quaternion();\n        _rotationMatrix = new THREE.Matrix4();\n        _raycaster = new THREE.Raycaster();\n    }\n    /**\n     * list all ACTIONs\n     * @category Statics\n     */\n    static get ACTION() {\n        return ACTION;\n    }\n    /**\n     * Creates a `CameraControls` instance.\n     *\n     * Note:\n     * You **must install** three.js before using camera-controls. see [#install](#install)\n     * Not doing so will lead to runtime errors (`undefined` references to THREE).\n     *\n     * e.g.\n     * ```\n     * CameraControls.install( { THREE } );\n     * const cameraControls = new CameraControls( camera, domElement );\n     * ```\n     *\n     * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n     * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n     * @category Constructor\n     */\n    constructor(camera, domElement) {\n        super();\n        /**\n         * Minimum vertical angle in radians.\n         * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n         * The default value is `0`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = 0;\n         * ```\n         * @category Properties\n         */\n        this.minPolarAngle = 0; // radians\n        /**\n         * Maximum vertical angle in radians.\n         * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n         * The default value is `Math.PI`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxPolarAngle = Math.PI;\n         * ```\n         * @category Properties\n         */\n        this.maxPolarAngle = Math.PI; // radians\n        /**\n         * Minimum horizontal angle in radians.\n         * The angle has to be less than `.maxAzimuthAngle`.\n         * The default value is `- Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.minAzimuthAngle = - Infinity;\n         * ```\n         * @category Properties\n         */\n        this.minAzimuthAngle = -Infinity; // radians\n        /**\n         * Maximum horizontal angle in radians.\n         * The angle has to be greater than `.minAzimuthAngle`.\n         * The default value is `Infinity`.\n         *\n         * e.g.\n         * ```\n         * cameraControls.maxAzimuthAngle = Infinity;\n         * ```\n         * @category Properties\n         */\n        this.maxAzimuthAngle = Infinity; // radians\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        /**\n         * Minimum distance for dolly. The value must be higher than `0`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.minDistance = 0;\n        /**\n         * Maximum distance for dolly. The value must be higher than `minDistance`.\n         * PerspectiveCamera only.\n         * @category Properties\n         */\n        this.maxDistance = Infinity;\n        /**\n         * `true` to enable Infinity Dolly.\n         * When the Dolly distance is less than the `minDistance`, radius of the sphere will be set `minDistance` automatically.\n         * @category Properties\n         */\n        this.infinityDolly = false;\n        /**\n         * Minimum camera zoom.\n         * @category Properties\n         */\n        this.minZoom = 0.01;\n        /**\n         * Maximum camera zoom.\n         * @category Properties\n         */\n        this.maxZoom = Infinity;\n        /**\n         * Approximate time in seconds to reach the target. A smaller value will reach the target faster.\n         * @category Properties\n         */\n        this.smoothTime = 0.25;\n        /**\n         * the smoothTime while dragging\n         * @category Properties\n         */\n        this.draggingSmoothTime = 0.125;\n        /**\n         * Max transition speed in unit-per-seconds\n         * @category Properties\n         */\n        this.maxSpeed = Infinity;\n        /**\n         * Speed of azimuth (horizontal) rotation.\n         * @category Properties\n         */\n        this.azimuthRotateSpeed = 1.0;\n        /**\n         * Speed of polar (vertical) rotation.\n         * @category Properties\n         */\n        this.polarRotateSpeed = 1.0;\n        /**\n         * Speed of mouse-wheel dollying.\n         * @category Properties\n         */\n        this.dollySpeed = 1.0;\n        /**\n         * `true` to invert direction when dollying or zooming via drag\n         * @category Properties\n         */\n        this.dollyDragInverted = false;\n        /**\n         * Speed of drag for truck and pedestal.\n         * @category Properties\n         */\n        this.truckSpeed = 2.0;\n        /**\n         * `true` to enable Dolly-in to the mouse cursor coords.\n         * @category Properties\n         */\n        this.dollyToCursor = false;\n        /**\n         * @category Properties\n         */\n        this.dragToOffset = false;\n        /**\n         * The same as `.screenSpacePanning` in three.js's OrbitControls.\n         * @category Properties\n         */\n        this.verticalDragToForward = false;\n        /**\n         * Friction ratio of the boundary.\n         * @category Properties\n         */\n        this.boundaryFriction = 0.0;\n        /**\n         * Controls how soon the `rest` event fires as the camera slows.\n         * @category Properties\n         */\n        this.restThreshold = 0.01;\n        /**\n         * An array of Meshes to collide with camera.\n         * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n         * @category Properties\n         */\n        this.colliderMeshes = [];\n        /**\n         * Force cancel user dragging.\n         * @category Methods\n         */\n        // cancel will be overwritten in the constructor.\n        this.cancel = () => { };\n        this._enabled = true;\n        this._state = ACTION.NONE;\n        this._viewport = null;\n        this._dollyControlAmount = 0;\n        this._hasRested = true;\n        this._boundaryEnclosesCamera = false;\n        this._needsUpdate = true;\n        this._updatedLastTime = false;\n        this._elementRect = new DOMRect();\n        this._isDragging = false;\n        this._activePointers = [];\n        this._lockedPointer = null;\n        // Use draggingSmoothTime over smoothTime while true.\n        // set automatically true on user-dragging start.\n        // set automatically false on programmable methods call.\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        this._isUserControllingOffset = false;\n        this._isUserControllingZoom = false;\n        // velocities for smoothDamp\n        this._thetaVelocity = { value: 0 };\n        this._phiVelocity = { value: 0 };\n        this._radiusVelocity = { value: 0 };\n        this._targetVelocity = new THREE.Vector3();\n        this._focalOffsetVelocity = new THREE.Vector3();\n        this._zoomVelocity = { value: 0 };\n        this._truckInternal = (deltaX, deltaY, dragToOffset) => {\n            let truckX;\n            let pedestalY;\n            if (isPerspectiveCamera(this._camera)) {\n                const offset = _v3A.copy(this._camera.position).sub(this._target);\n                // half of the fov is center to top of screen\n                const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n                const targetDistance = offset.length() * Math.tan(fov * 0.5);\n                truckX = (this.truckSpeed * deltaX * targetDistance / this._elementRect.height);\n                pedestalY = (this.truckSpeed * deltaY * targetDistance / this._elementRect.height);\n            }\n            else if (isOrthographicCamera(this._camera)) {\n                const camera = this._camera;\n                truckX = deltaX * (camera.right - camera.left) / camera.zoom / this._elementRect.width;\n                pedestalY = deltaY * (camera.top - camera.bottom) / camera.zoom / this._elementRect.height;\n            }\n            else {\n                return;\n            }\n            if (this.verticalDragToForward) {\n                dragToOffset ?\n                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) :\n                    this.truck(truckX, 0, true);\n                this.forward(-pedestalY, true);\n            }\n            else {\n                dragToOffset ?\n                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) :\n                    this.truck(truckX, pedestalY, true);\n            }\n        };\n        this._rotateInternal = (deltaX, deltaY) => {\n            const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height; // divide by *height* to refer the resolution\n            const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;\n            this.rotate(theta, phi, true);\n        };\n        this._dollyInternal = (delta, x, y) => {\n            const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);\n            const distance = this._sphericalEnd.radius * dollyScale;\n            const prevRadius = this._sphericalEnd.radius;\n            const signedPrevRadius = prevRadius * (delta >= 0 ? -1 : 1);\n            this.dollyTo(distance);\n            if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n                this._camera.getWorldDirection(_v3A);\n                this._targetEnd.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n                this._target.add(_v3A.normalize().multiplyScalar(signedPrevRadius));\n            }\n            if (this.dollyToCursor) {\n                this._dollyControlAmount += this._sphericalEnd.radius - prevRadius;\n                if (this.infinityDolly && (distance < this.minDistance || this.maxDistance === this.minDistance)) {\n                    this._dollyControlAmount -= signedPrevRadius;\n                }\n                this._dollyControlCoord.set(x, y);\n            }\n        };\n        this._zoomInternal = (delta, x, y) => {\n            const zoomScale = Math.pow(0.95, delta * this.dollySpeed);\n            const prevZoom = this._zoomEnd;\n            // for both PerspectiveCamera and OrthographicCamera\n            this.zoomTo(this._zoom * zoomScale);\n            if (this.dollyToCursor) {\n                this._dollyControlAmount += this._zoomEnd - prevZoom;\n                this._dollyControlCoord.set(x, y);\n            }\n        };\n        // Check if the user has installed THREE\n        if (typeof THREE === 'undefined') {\n            console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n        }\n        this._camera = camera;\n        this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);\n        this._yAxisUpSpaceInverse = this._yAxisUpSpace.clone().invert();\n        this._state = ACTION.NONE;\n        // the location\n        this._target = new THREE.Vector3();\n        this._targetEnd = this._target.clone();\n        this._focalOffset = new THREE.Vector3();\n        this._focalOffsetEnd = this._focalOffset.clone();\n        // rotation\n        this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));\n        this._sphericalEnd = this._spherical.clone();\n        this._zoom = this._camera.zoom;\n        this._zoomEnd = this._zoom;\n        // collisionTest uses nearPlane.s\n        this._nearPlaneCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n        ];\n        this._updateNearPlaneCorners();\n        // Target cannot move outside of this box\n        this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));\n        // reset\n        this._cameraUp0 = this._camera.up.clone();\n        this._target0 = this._target.clone();\n        this._position0 = this._camera.position.clone();\n        this._zoom0 = this._zoom;\n        this._focalOffset0 = this._focalOffset.clone();\n        this._dollyControlAmount = 0;\n        this._dollyControlCoord = new THREE.Vector2();\n        // configs\n        this.mouseButtons = {\n            left: ACTION.ROTATE,\n            middle: ACTION.DOLLY,\n            right: ACTION.TRUCK,\n            wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY :\n                isOrthographicCamera(this._camera) ? ACTION.ZOOM :\n                    ACTION.NONE,\n        };\n        this.touches = {\n            one: ACTION.TOUCH_ROTATE,\n            two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK :\n                isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK :\n                    ACTION.NONE,\n            three: ACTION.TOUCH_TRUCK,\n        };\n        const dragStartPosition = new THREE.Vector2();\n        const lastDragPosition = new THREE.Vector2();\n        const dollyStart = new THREE.Vector2();\n        const onPointerDown = (event) => {\n            if (!this._enabled || !this._domElement)\n                return;\n            // Don't call `event.preventDefault()` on the pointerdown event\n            // to keep receiving pointermove evens outside dragging iframe\n            // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n            const mouseButton = event.pointerType !== 'mouse' ? null :\n                (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n                    (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE :\n                        (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT :\n                            null;\n            if (mouseButton !== null) {\n                const zombiePointer = this._findPointerByMouseButton(mouseButton);\n                zombiePointer && this._disposePointer(zombiePointer);\n            }\n            if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT && this._lockedPointer)\n                return;\n            const pointer = {\n                pointerId: event.pointerId,\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton,\n            };\n            this._activePointers.push(pointer);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n            this._isDragging = true;\n            startDragging(event);\n        };\n        const onMouseDown = (event) => {\n            if (!this._enabled || !this._domElement || this._lockedPointer)\n                return;\n            const mouseButton = (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n                (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE :\n                    (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT :\n                        null;\n            if (mouseButton !== null) {\n                const zombiePointer = this._findPointerByMouseButton(mouseButton);\n                zombiePointer && this._disposePointer(zombiePointer);\n            }\n            const pointer = {\n                pointerId: 1,\n                clientX: event.clientX,\n                clientY: event.clientY,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton: (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n                    (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.MIDDLE :\n                        (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.RIGHT :\n                            null,\n            };\n            this._activePointers.push(pointer);\n            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n            this._domElement.ownerDocument.addEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.addEventListener('mouseup', onMouseUp);\n            this._isDragging = true;\n            startDragging(event);\n        };\n        const onPointerMove = (event) => {\n            if (event.cancelable)\n                event.preventDefault();\n            const pointerId = event.pointerId;\n            const pointer = this._lockedPointer || this._findPointerById(pointerId);\n            if (!pointer)\n                return;\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            pointer.deltaX = event.movementX;\n            pointer.deltaY = event.movementY;\n            this._state = 0;\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                if ((!this._isDragging && this._lockedPointer) ||\n                    this._isDragging && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if (this._isDragging && (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if (this._isDragging && (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            dragging();\n        };\n        const onMouseMove = (event) => {\n            const pointer = this._lockedPointer || this._findPointerById(1);\n            if (!pointer)\n                return;\n            pointer.clientX = event.clientX;\n            pointer.clientY = event.clientY;\n            pointer.deltaX = event.movementX;\n            pointer.deltaY = event.movementY;\n            this._state = 0;\n            if (this._lockedPointer ||\n                (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                this._state = this._state | this.mouseButtons.left;\n            }\n            if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                this._state = this._state | this.mouseButtons.middle;\n            }\n            if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                this._state = this._state | this.mouseButtons.right;\n            }\n            dragging();\n        };\n        const onPointerUp = (event) => {\n            const pointer = this._findPointerById(event.pointerId);\n            if (pointer && pointer === this._lockedPointer)\n                return;\n            pointer && this._disposePointer(pointer);\n            if (event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 0:\n                        this._state = ACTION.NONE;\n                        break;\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                this._state = ACTION.NONE;\n            }\n            endDragging();\n        };\n        const onMouseUp = () => {\n            const pointer = this._findPointerById(1);\n            if (pointer && pointer === this._lockedPointer)\n                return;\n            pointer && this._disposePointer(pointer);\n            this._state = ACTION.NONE;\n            endDragging();\n        };\n        let lastScrollTimeStamp = -1;\n        const onMouseWheel = (event) => {\n            if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE)\n                return;\n            event.preventDefault();\n            if (this.dollyToCursor ||\n                this.mouseButtons.wheel === ACTION.ROTATE ||\n                this.mouseButtons.wheel === ACTION.TRUCK) {\n                const now = performance.now();\n                // only need to fire this at scroll start.\n                if (lastScrollTimeStamp - now < 1000)\n                    this._getClientRect(this._elementRect);\n                lastScrollTimeStamp = now;\n            }\n            // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n            const deltaYFactor = isMac ? -1 : -3;\n            const delta = (event.deltaMode === 1) ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n            const x = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n            const y = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n            switch (this.mouseButtons.wheel) {\n                case ACTION.ROTATE: {\n                    this._rotateInternal(event.deltaX, event.deltaY);\n                    this._isUserControllingRotate = true;\n                    break;\n                }\n                case ACTION.TRUCK: {\n                    this._truckInternal(event.deltaX, event.deltaY, false);\n                    this._isUserControllingTruck = true;\n                    break;\n                }\n                case ACTION.OFFSET: {\n                    this._truckInternal(event.deltaX, event.deltaY, true);\n                    this._isUserControllingOffset = true;\n                    break;\n                }\n                case ACTION.DOLLY: {\n                    this._dollyInternal(-delta, x, y);\n                    this._isUserControllingDolly = true;\n                    break;\n                }\n                case ACTION.ZOOM: {\n                    this._zoomInternal(-delta, x, y);\n                    this._isUserControllingZoom = true;\n                    break;\n                }\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const onContextMenu = (event) => {\n            if (!this._domElement || !this._enabled)\n                return;\n            // contextmenu event is fired right after pointerdown/mousedown.\n            // remove attached handlers and active pointer, if interrupted by contextmenu.\n            if (this.mouseButtons.right === CameraControls.ACTION.NONE) {\n                const pointerId = event instanceof PointerEvent ? event.pointerId :\n                    event instanceof MouseEvent ? 0 :\n                        0;\n                const pointer = this._findPointerById(pointerId);\n                pointer && this._disposePointer(pointer);\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n                this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n                this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n                return;\n            }\n            event.preventDefault();\n        };\n        const startDragging = (event) => {\n            if (!this._enabled)\n                return;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            this._getClientRect(this._elementRect);\n            dragStartPosition.copy(_v2);\n            lastDragPosition.copy(_v2);\n            const isMultiTouch = this._activePointers.length >= 2;\n            if (isMultiTouch) {\n                // 2 finger pinch\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                dollyStart.set(0, distance);\n                // center coords of 2 finger truck\n                const x = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;\n                const y = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;\n                lastDragPosition.set(x, y);\n            }\n            this._state = 0;\n            if (!event) {\n                if (this._lockedPointer)\n                    this._state = this._state | this.mouseButtons.left;\n            }\n            else if ('pointerType' in event && event.pointerType === 'touch') {\n                switch (this._activePointers.length) {\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n            }\n            else {\n                if (!this._lockedPointer && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n                    this._state = this._state | this.mouseButtons.left;\n                }\n                if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n                    this._state = this._state | this.mouseButtons.middle;\n                }\n                if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n                    this._state = this._state | this.mouseButtons.right;\n                }\n            }\n            // stop current movement on drag start\n            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._sphericalEnd.theta = this._spherical.theta;\n                this._sphericalEnd.phi = this._spherical.phi;\n                this._thetaVelocity.value = 0;\n                this._phiVelocity.value = 0;\n            }\n            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n                this._targetEnd.copy(this._target);\n                this._targetVelocity.set(0, 0, 0);\n            }\n            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n                (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE) {\n                this._sphericalEnd.radius = this._spherical.radius;\n                this._radiusVelocity.value = 0;\n            }\n            if ((this._state & ACTION.ZOOM) === ACTION.ZOOM ||\n                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._zoomEnd = this._zoom;\n                this._zoomVelocity.value = 0;\n            }\n            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n                this._focalOffsetEnd.copy(this._focalOffset);\n                this._focalOffsetVelocity.set(0, 0, 0);\n            }\n            this.dispatchEvent({ type: 'controlstart' });\n        };\n        const dragging = () => {\n            if (!this._enabled)\n                return;\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n            // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n            const isPointerLockActive = this._domElement && document.pointerLockElement === this._domElement;\n            const lockedPointer = isPointerLockActive ? this._lockedPointer || this._activePointers[0] : null;\n            const deltaX = lockedPointer ? -lockedPointer.deltaX : lastDragPosition.x - _v2.x;\n            const deltaY = lockedPointer ? -lockedPointer.deltaY : lastDragPosition.y - _v2.y;\n            lastDragPosition.copy(_v2);\n            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                this._rotateInternal(deltaX, deltaY);\n                this._isUserControllingRotate = true;\n            }\n            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n                (this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n                const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                const dollyDirection = this.dollyDragInverted ? -1 : 1;\n                if ((this._state & ACTION.DOLLY) === ACTION.DOLLY) {\n                    this._dollyInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingDolly = true;\n                }\n                else {\n                    this._zoomInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingZoom = true;\n                }\n            }\n            if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n                const dx = _v2.x - this._activePointers[1].clientX;\n                const dy = _v2.y - this._activePointers[1].clientY;\n                const distance = Math.sqrt(dx * dx + dy * dy);\n                const dollyDelta = dollyStart.y - distance;\n                dollyStart.set(0, distance);\n                const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n                const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n                    (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n                    (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                    (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET) {\n                    this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingDolly = true;\n                }\n                else {\n                    this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n                    this._isUserControllingZoom = true;\n                }\n            }\n            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n                this._truckInternal(deltaX, deltaY, false);\n                this._isUserControllingTruck = true;\n            }\n            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n                this._truckInternal(deltaX, deltaY, true);\n                this._isUserControllingOffset = true;\n            }\n            this.dispatchEvent({ type: 'control' });\n        };\n        const endDragging = () => {\n            extractClientCoordFromEvent(this._activePointers, _v2);\n            lastDragPosition.copy(_v2);\n            if (this._activePointers.length === 0 ||\n                (this._activePointers.length === 1 && this._activePointers[0] === this._lockedPointer)) {\n                this._isDragging = false;\n            }\n            if (this._activePointers.length === 0 && this._domElement) {\n                // eslint-disable-next-line no-undef\n                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n                this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n                this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n                this.dispatchEvent({ type: 'controlend' });\n            }\n        };\n        this.lockPointer = () => {\n            if (!this._enabled || !this._domElement)\n                return;\n            this.cancel();\n            // Element.requestPointerLock is allowed to happen without any pointer active - create a faux one for compatibility with controls\n            this._lockedPointer = {\n                pointerId: -1,\n                clientX: 0,\n                clientY: 0,\n                deltaX: 0,\n                deltaY: 0,\n                mouseButton: null,\n            };\n            this._activePointers.push(this._lockedPointer);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.requestPointerLock();\n            this._domElement.ownerDocument.addEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.addEventListener('pointerlockerror', onPointerLockError);\n            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n            startDragging();\n        };\n        this.unlockPointer = () => {\n            if (this._lockedPointer !== null) {\n                this._disposePointer(this._lockedPointer);\n                this._lockedPointer = null;\n            }\n            document.exitPointerLock();\n            this.cancel();\n            if (!this._domElement)\n                return;\n            this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n        };\n        const onPointerLockChange = () => {\n            const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;\n            if (!isPointerLockActive)\n                this.unlockPointer();\n        };\n        const onPointerLockError = () => {\n            this.unlockPointer();\n        };\n        this._addAllEventListeners = (domElement) => {\n            this._domElement = domElement;\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n            this._domElement.addEventListener('pointerdown', onPointerDown);\n            isPointerEventsNotSupported && this._domElement.addEventListener('mousedown', onMouseDown);\n            this._domElement.addEventListener('pointercancel', onPointerUp);\n            this._domElement.addEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.addEventListener('contextmenu', onContextMenu);\n        };\n        this._removeAllEventListeners = () => {\n            if (!this._domElement)\n                return;\n            this._domElement.style.touchAction = '';\n            this._domElement.style.userSelect = '';\n            this._domElement.style.webkitUserSelect = '';\n            this._domElement.removeEventListener('pointerdown', onPointerDown);\n            this._domElement.removeEventListener('mousedown', onMouseDown);\n            this._domElement.removeEventListener('pointercancel', onPointerUp);\n            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n            // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n            // eslint-disable-next-line no-undef\n            this._domElement.removeEventListener('wheel', onMouseWheel, { passive: false });\n            this._domElement.removeEventListener('contextmenu', onContextMenu);\n            // eslint-disable-next-line no-undef\n            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n            this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n            this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n        };\n        this.cancel = () => {\n            if (this._state === ACTION.NONE)\n                return;\n            this._state = ACTION.NONE;\n            this._activePointers.length = 0;\n            endDragging();\n        };\n        if (domElement)\n            this.connect(domElement);\n        this.update(0);\n    }\n    /**\n     * The camera to be controlled\n     * @category Properties\n     */\n    get camera() {\n        return this._camera;\n    }\n    set camera(camera) {\n        this._camera = camera;\n        this.updateCameraUp();\n        this._camera.updateProjectionMatrix();\n        this._updateNearPlaneCorners();\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether or not the controls are enabled.\n     * `false` to disable user dragging/touch-move, but all methods works.\n     * @category Properties\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(enabled) {\n        this._enabled = enabled;\n        if (!this._domElement)\n            return;\n        if (enabled) {\n            this._domElement.style.touchAction = 'none';\n            this._domElement.style.userSelect = 'none';\n            this._domElement.style.webkitUserSelect = 'none';\n        }\n        else {\n            this.cancel();\n            this._domElement.style.touchAction = '';\n            this._domElement.style.userSelect = '';\n            this._domElement.style.webkitUserSelect = '';\n        }\n    }\n    /**\n     * Returns `true` if the controls are active updating.\n     * readonly value.\n     * @category Properties\n     */\n    get active() {\n        return !this._hasRested;\n    }\n    /**\n     * Getter for the current `ACTION`.\n     * readonly value.\n     * @category Properties\n     */\n    get currentAction() {\n        return this._state;\n    }\n    /**\n     * get/set Current distance.\n     * @category Properties\n     */\n    get distance() {\n        return this._spherical.radius;\n    }\n    set distance(distance) {\n        if (this._spherical.radius === distance &&\n            this._sphericalEnd.radius === distance)\n            return;\n        this._spherical.radius = distance;\n        this._sphericalEnd.radius = distance;\n        this._needsUpdate = true;\n    }\n    // horizontal angle\n    /**\n     * get/set the azimuth angle (horizontal) in radians.\n     * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n     * @category Properties\n     */\n    get azimuthAngle() {\n        return this._spherical.theta;\n    }\n    set azimuthAngle(azimuthAngle) {\n        if (this._spherical.theta === azimuthAngle &&\n            this._sphericalEnd.theta === azimuthAngle)\n            return;\n        this._spherical.theta = azimuthAngle;\n        this._sphericalEnd.theta = azimuthAngle;\n        this._needsUpdate = true;\n    }\n    // vertical angle\n    /**\n     * get/set the polar angle (vertical) in radians.\n     * @category Properties\n     */\n    get polarAngle() {\n        return this._spherical.phi;\n    }\n    set polarAngle(polarAngle) {\n        if (this._spherical.phi === polarAngle &&\n            this._sphericalEnd.phi === polarAngle)\n            return;\n        this._spherical.phi = polarAngle;\n        this._sphericalEnd.phi = polarAngle;\n        this._needsUpdate = true;\n    }\n    /**\n     * Whether camera position should be enclosed in the boundary or not.\n     * @category Properties\n     */\n    get boundaryEnclosesCamera() {\n        return this._boundaryEnclosesCamera;\n    }\n    set boundaryEnclosesCamera(boundaryEnclosesCamera) {\n        this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n        this._needsUpdate = true;\n    }\n    /**\n     * Adds the specified event listener.\n     * Applicable event types (which is `K`) are:\n     * | Event name          | Timing |\n     * | ------------------- | ------ |\n     * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n     * | `'control'`         | When the user controls the camera (dragging). |\n     * | `'controlend'`      | When the user ends to control the camera. ¹ |\n     * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n     * | `'update'`          | When the camera position is updated. |\n     * | `'wake'`            | When the camera starts moving. |\n     * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n     * | `'sleep'`           | When the camera end moving. |\n     *\n     * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n     * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n     *\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    addEventListener(type, listener) {\n        super.addEventListener(type, listener);\n    }\n    /**\n     * Removes the specified event listener\n     * e.g.\n     * ```\n     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n     * ```\n     * @param type event name\n     * @param listener handler function\n     * @category Methods\n     */\n    removeEventListener(type, listener) {\n        super.removeEventListener(type, listener);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n     * Every value is added to the current value.\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotate(azimuthAngle, polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param azimuthAngle Azimuth rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateAzimuthTo(azimuthAngle, enableTransition = false) {\n        return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n    }\n    /**\n     * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n     *\n     * e.g.\n     * ```\n     * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n     * ```\n     * @param polarAngle Polar rotate angle. In radian.\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotatePolarTo(polarAngle, enableTransition = false) {\n        return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n    }\n    /**\n     * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n     * Camera view will rotate over the orbit pivot absolutely:\n     *\n     * azimuthAngle\n     * ```\n     *       0º\n     *         \\\n     * 90º -----+----- -90º\n     *           \\\n     *           180º\n     * ```\n     * | direction | angle                  |\n     * | --------- | ---------------------- |\n     * | front     | 0º                     |\n     * | left      | 90º (`Math.PI / 2`)    |\n     * | right     | -90º (`- Math.PI / 2`) |\n     * | back      | 180º (`Math.PI`)       |\n     *\n     * polarAngle\n     * ```\n     *     180º\n     *      |\n     *      90º\n     *      |\n     *      0º\n     * ```\n     * | direction            | angle                  |\n     * | -------------------- | ---------------------- |\n     * | top/sky              | 180º (`Math.PI`)       |\n     * | horizontal from view | 90º (`Math.PI / 2`)    |\n     * | bottom/floor         | 0º                     |\n     *\n     * @param azimuthAngle Azimuth rotate angle to. In radian.\n     * @param polarAngle Polar rotate angle to. In radian.\n     * @param enableTransition  Whether to move smoothly or immediately\n     * @category Methods\n     */\n    rotateTo(azimuthAngle, polarAngle, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        const theta = clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n        const phi = clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n        this._sphericalEnd.theta = theta;\n        this._sphericalEnd.phi = phi;\n        this._sphericalEnd.makeSafe();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.theta = this._sphericalEnd.theta;\n            this._spherical.phi = this._sphericalEnd.phi;\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Dolly in/out camera position.\n     * @param distance Distance of dollyIn. Negative number for dollyOut.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dolly(distance, enableTransition = false) {\n        return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n    }\n    /**\n     * Dolly in/out camera position to given distance.\n     * @param distance Distance of dolly.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @category Methods\n     */\n    dollyTo(distance, enableTransition = false) {\n        this._isUserControllingDolly = false;\n        const lastRadius = this._sphericalEnd.radius;\n        const newRadius = clamp(distance, this.minDistance, this.maxDistance);\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (hasCollider) {\n            const maxDistanceByCollisionTest = this._collisionTest();\n            const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n            const isDollyIn = lastRadius > newRadius;\n            if (!isDollyIn && isCollided)\n                return Promise.resolve();\n            this._sphericalEnd.radius = Math.min(newRadius, maxDistanceByCollisionTest);\n        }\n        else {\n            this._sphericalEnd.radius = newRadius;\n        }\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._spherical.radius = this._sphericalEnd.radius;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Zoom in/out camera. The value is added to camera zoom.\n     * Limits set with `.minZoom` and `.maxZoom`\n     * @param zoomStep zoom scale\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    zoom(zoomStep, enableTransition = false) {\n        return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n    }\n    /**\n     * Zoom in/out camera to given scale. The value overwrites camera zoom.\n     * Limits set with .minZoom and .maxZoom\n     * @param zoom\n     * @param enableTransition\n     * @category Methods\n     */\n    zoomTo(zoom, enableTransition = false) {\n        this._isUserControllingZoom = false;\n        this._zoomEnd = clamp(zoom, this.minZoom, this.maxZoom);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._zoom = this._zoomEnd;\n        }\n        const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * @deprecated `pan()` has been renamed to `truck()`\n     * @category Methods\n     */\n    pan(x, y, enableTransition = false) {\n        console.warn('`pan` has been renamed to `truck`');\n        return this.truck(x, y, enableTransition);\n    }\n    /**\n     * Truck and pedestal camera using current azimuthal angle\n     * @param x Horizontal translate amount\n     * @param y Vertical translate amount\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    truck(x, y, enableTransition = false) {\n        this._camera.updateMatrix();\n        _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n        _xColumn.multiplyScalar(x);\n        _yColumn.multiplyScalar(-y);\n        const offset = _v3A.copy(_xColumn).add(_yColumn);\n        const to = _v3B.copy(this._targetEnd).add(offset);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move forward / backward.\n     * @param distance Amount to move forward / backward. Negative value to move backward\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    forward(distance, enableTransition = false) {\n        _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n        _v3A.crossVectors(this._camera.up, _v3A);\n        _v3A.multiplyScalar(distance);\n        const to = _v3B.copy(this._targetEnd).add(_v3A);\n        return this.moveTo(to.x, to.y, to.z, enableTransition);\n    }\n    /**\n     * Move up / down.\n     * @param height Amount to move up / down. Negative value to move down\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    elevate(height, enableTransition = false) {\n        _v3A.copy(this._camera.up).multiplyScalar(height);\n        return this.moveTo(this._targetEnd.x + _v3A.x, this._targetEnd.y + _v3A.y, this._targetEnd.z + _v3A.z, enableTransition);\n    }\n    /**\n     * Move target position to given point.\n     * @param x x coord to move center position\n     * @param y y coord to move center position\n     * @param z z coord to move center position\n     * @param enableTransition Whether to move smoothly or immediately\n     * @category Methods\n     */\n    moveTo(x, y, z, enableTransition = false) {\n        this._isUserControllingTruck = false;\n        const offset = _v3A.set(x, y, z).sub(this._targetEnd);\n        this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Look in the given point direction.\n     * @param x point x.\n     * @param y point y.\n     * @param z point z.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @returns Transition end promise\n     * @category Methods\n     */\n    lookInDirectionOf(x, y, z, enableTransition = false) {\n        const point = _v3A.set(x, y, z);\n        const direction = point.sub(this._targetEnd).normalize();\n        const position = direction.multiplyScalar(-this._sphericalEnd.radius);\n        return this.setPosition(position.x, position.y, position.z, enableTransition);\n    }\n    /**\n     * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n     * set `cover: true` to fill enter screen.\n     * e.g.\n     * ```\n     * cameraControls.fitToBox( myMesh );\n     * ```\n     * @param box3OrObject Axis aligned bounding box to fit the view.\n     * @param enableTransition Whether to move smoothly or immediately.\n     * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n     * @returns Transition end promise\n     * @category Methods\n     */\n    fitToBox(box3OrObject, enableTransition, { cover = false, paddingLeft = 0, paddingRight = 0, paddingBottom = 0, paddingTop = 0 } = {}) {\n        const promises = [];\n        const aabb = box3OrObject.isBox3\n            ? _box3A.copy(box3OrObject)\n            : _box3A.setFromObject(box3OrObject);\n        if (aabb.isEmpty()) {\n            console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n            Promise.resolve();\n        }\n        // round to closest axis ( forward | backward | right | left | top | bottom )\n        const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n        const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n        promises.push(this.rotateTo(theta, phi, enableTransition));\n        const normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n        const rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n        const viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n        if (viewFromPolar) {\n            rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n        }\n        rotation.multiply(this._yAxisUpSpaceInverse);\n        // make oriented bounding box\n        const bb = _box3B.makeEmpty();\n        // left bottom back corner\n        _v3B.copy(aabb.min).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom back corner\n        _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top back corner\n        _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top back corner\n        _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left bottom front corner\n        _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right bottom front corner\n        _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // left top front corner\n        _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // right top front corner\n        _v3B.copy(aabb.max).applyQuaternion(rotation);\n        bb.expandByPoint(_v3B);\n        // add padding\n        bb.min.x -= paddingLeft;\n        bb.min.y -= paddingBottom;\n        bb.max.x += paddingRight;\n        bb.max.y += paddingTop;\n        rotation.setFromUnitVectors(_AXIS_Z, normal);\n        if (viewFromPolar) {\n            rotation.premultiply(_quaternionB.invert());\n        }\n        rotation.premultiply(this._yAxisUpSpace);\n        const bbSize = bb.getSize(_v3A);\n        const center = bb.getCenter(_v3B).applyQuaternion(rotation);\n        if (isPerspectiveCamera(this._camera)) {\n            const distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.dollyTo(distance, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const width = camera.right - camera.left;\n            const height = camera.top - camera.bottom;\n            const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n            promises.push(this.zoomTo(zoom, enableTransition));\n            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * Fit the viewport to the sphere or the bounding sphere of the object.\n     * @param sphereOrMesh\n     * @param enableTransition\n     * @category Methods\n     */\n    fitToSphere(sphereOrMesh, enableTransition) {\n        const promises = [];\n        const isSphere = sphereOrMesh instanceof THREE.Sphere;\n        const boundingSphere = isSphere ?\n            _sphere.copy(sphereOrMesh) :\n            CameraControls.createBoundingSphere(sphereOrMesh, _sphere);\n        promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n        if (isPerspectiveCamera(this._camera)) {\n            const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n            promises.push(this.dollyTo(distanceToFit, enableTransition));\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const width = this._camera.right - this._camera.left;\n            const height = this._camera.top - this._camera.bottom;\n            const diameter = 2 * boundingSphere.radius;\n            const zoom = Math.min(width / diameter, height / diameter);\n            promises.push(this.zoomTo(zoom, enableTransition));\n        }\n        promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n        return Promise.all(promises);\n    }\n    /**\n     * Look at the `target` from the `position`.\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        const target = _v3B.set(targetX, targetY, targetZ);\n        const position = _v3A.set(positionX, positionY, positionZ);\n        this._targetEnd.copy(target);\n        this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Similar to setLookAt, but it interpolates between two states.\n     * @param positionAX\n     * @param positionAY\n     * @param positionAZ\n     * @param targetAX\n     * @param targetAY\n     * @param targetAZ\n     * @param positionBX\n     * @param positionBY\n     * @param positionBZ\n     * @param targetBX\n     * @param targetBY\n     * @param targetBZ\n     * @param t\n     * @param enableTransition\n     * @category Methods\n     */\n    lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t, enableTransition = false) {\n        this._isUserControllingRotate = false;\n        this._isUserControllingDolly = false;\n        this._isUserControllingTruck = false;\n        const targetA = _v3A.set(targetAX, targetAY, targetAZ);\n        const positionA = _v3B.set(positionAX, positionAY, positionAZ);\n        _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n        const targetB = _v3C.set(targetBX, targetBY, targetBZ);\n        const positionB = _v3B.set(positionBX, positionBY, positionBZ);\n        _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n        this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n        const deltaTheta = _sphericalB.theta - _sphericalA.theta;\n        const deltaPhi = _sphericalB.phi - _sphericalA.phi;\n        const deltaRadius = _sphericalB.radius - _sphericalA.radius;\n        this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n        this.normalizeRotations();\n        this._needsUpdate = true;\n        if (!enableTransition) {\n            this._target.copy(this._targetEnd);\n            this._spherical.copy(this._sphericalEnd);\n        }\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set angle and distance by given position.\n     * An alias of `setLookAt()`, without target change. Thus keep gazing at the current target\n     * @param positionX\n     * @param positionY\n     * @param positionZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setPosition(positionX, positionY, positionZ, enableTransition = false) {\n        return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n    }\n    /**\n     * Set the target position where gaze at.\n     * An alias of `setLookAt()`, without position change. Thus keep the same position.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @param enableTransition\n     * @category Methods\n     */\n    setTarget(targetX, targetY, targetZ, enableTransition = false) {\n        const pos = this.getPosition(_v3A);\n        const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);\n        // see https://github.com/yomotsu/camera-controls/issues/335\n        this._sphericalEnd.phi = clamp(this.polarAngle, this.minPolarAngle, this.maxPolarAngle);\n        return promise;\n    }\n    /**\n     * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n     * @param x\n     * @param y\n     * @param z\n     * @param enableTransition\n     * @category Methods\n     */\n    setFocalOffset(x, y, z, enableTransition = false) {\n        this._isUserControllingOffset = false;\n        this._focalOffsetEnd.set(x, y, z);\n        this._needsUpdate = true;\n        if (!enableTransition)\n            this._focalOffset.copy(this._focalOffsetEnd);\n        const resolveImmediately = !enableTransition ||\n            approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) &&\n                approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) &&\n                approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(resolveImmediately);\n    }\n    /**\n     * Set orbit point without moving the camera.\n     * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n     * @param targetX\n     * @param targetY\n     * @param targetZ\n     * @category Methods\n     */\n    setOrbitPoint(targetX, targetY, targetZ) {\n        this._camera.updateMatrixWorld();\n        _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n        _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n        _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n        const position = _v3A.set(targetX, targetY, targetZ);\n        const distance = position.distanceTo(this._camera.position);\n        const cameraToPoint = position.sub(this._camera.position);\n        _xColumn.multiplyScalar(cameraToPoint.x);\n        _yColumn.multiplyScalar(cameraToPoint.y);\n        _zColumn.multiplyScalar(cameraToPoint.z);\n        _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n        _v3A.z = _v3A.z + distance;\n        this.dollyTo(distance, false);\n        this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n        this.moveTo(targetX, targetY, targetZ, false);\n    }\n    /**\n     * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n     * @param box3\n     * @category Methods\n     */\n    setBoundary(box3) {\n        if (!box3) {\n            this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n            this._boundary.max.set(Infinity, Infinity, Infinity);\n            this._needsUpdate = true;\n            return;\n        }\n        this._boundary.copy(box3);\n        this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n        this._needsUpdate = true;\n    }\n    /**\n     * Set (or unset) the current viewport.\n     * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n     * @param viewportOrX\n     * @param y\n     * @param width\n     * @param height\n     * @category Methods\n     */\n    setViewport(viewportOrX, y, width, height) {\n        if (viewportOrX === null) { // null\n            this._viewport = null;\n            return;\n        }\n        this._viewport = this._viewport || new THREE.Vector4();\n        if (typeof viewportOrX === 'number') { // number\n            this._viewport.set(viewportOrX, y, width, height);\n        }\n        else { // Vector4\n            this._viewport.copy(viewportOrX);\n        }\n    }\n    /**\n     * Calculate the distance to fit the box.\n     * @param width box width\n     * @param height box height\n     * @param depth box depth\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitBox(width, height, depth, cover = false) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox'))\n            return this._spherical.radius;\n        const boundingRectAspect = width / height;\n        const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n        const aspect = this._camera.aspect;\n        const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n        return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n    }\n    /**\n     * Calculate the distance to fit the sphere.\n     * @param radius sphere radius\n     * @returns distance\n     * @category Methods\n     */\n    getDistanceToFitSphere(radius) {\n        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere'))\n            return this._spherical.radius;\n        // https://stackoverflow.com/a/44849975\n        const vFOV = this._camera.getEffectiveFOV() * DEG2RAD;\n        const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n        const fov = 1 < this._camera.aspect ? vFOV : hFOV;\n        return radius / (Math.sin(fov * 0.5));\n    }\n    /**\n     * Returns its current gazing target, which is the center position of the orbit.\n     * @param out current gazing target\n     * @category Methods\n     */\n    getTarget(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(this._targetEnd);\n    }\n    /**\n     * Returns its current position.\n     * @param out current position\n     * @category Methods\n     */\n    getPosition(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);\n    }\n    /**\n     * Returns its current focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n     * @param out current focal offset\n     * @category Methods\n     */\n    getFocalOffset(out) {\n        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n        return _out.copy(this._focalOffsetEnd);\n    }\n    /**\n     * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n     * @category Methods\n     */\n    normalizeRotations() {\n        this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n        if (this._sphericalEnd.theta < 0)\n            this._sphericalEnd.theta += PI_2;\n        this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n    }\n    /**\n     * Reset all rotation and position to defaults.\n     * @param enableTransition\n     * @category Methods\n     */\n    reset(enableTransition = false) {\n        if (!approxEquals(this._camera.up.x, this._cameraUp0.x) ||\n            !approxEquals(this._camera.up.y, this._cameraUp0.y) ||\n            !approxEquals(this._camera.up.z, this._cameraUp0.z)) {\n            this._camera.up.copy(this._cameraUp0);\n            const position = this.getPosition(_v3A);\n            this.updateCameraUp();\n            this.setPosition(position.x, position.y, position.z);\n        }\n        const promises = [\n            this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition),\n            this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition),\n            this.zoomTo(this._zoom0, enableTransition),\n        ];\n        return Promise.all(promises);\n    }\n    /**\n     * Set current camera position as the default position.\n     * @category Methods\n     */\n    saveState() {\n        this._cameraUp0.copy(this._camera.up);\n        this.getTarget(this._target0);\n        this.getPosition(this._position0);\n        this._zoom0 = this._zoom;\n        this._focalOffset0.copy(this._focalOffset);\n    }\n    /**\n     * Sync camera-up direction.\n     * When camera-up vector is changed, `.updateCameraUp()` must be called.\n     * @category Methods\n     */\n    updateCameraUp() {\n        this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n        this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace).invert();\n    }\n    /**\n     * Apply current camera-up direction to the camera.\n     * The orbit system will be re-initialized with the current position.\n     * @category Methods\n     */\n    applyCameraUp() {\n        const cameraDirection = _v3A.subVectors(this._target, this._camera.position).normalize();\n        // So first find the vector off to the side, orthogonal to both this.object.up and\n        // the \"view\" vector.\n        const side = _v3B.crossVectors(cameraDirection, this._camera.up).normalize();\n        // Then find the vector orthogonal to both this \"side\" vector and the \"view\" vector.\n        // This vector will be the new \"up\" vector.\n        this._camera.up.crossVectors(side, cameraDirection).normalize();\n        this._camera.updateMatrixWorld();\n        const position = this.getPosition(_v3A);\n        this.updateCameraUp();\n        this.setPosition(position.x, position.y, position.z);\n    }\n    /**\n     * Update camera position and directions.\n     * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n     * @param delta\n     * @returns updated\n     * @category Methods\n     */\n    update(delta) {\n        const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n        const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n        const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n        const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n        const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n        const deltaZoom = this._zoomEnd - this._zoom;\n        // update theta\n        if (approxZero(deltaTheta)) {\n            this._thetaVelocity.value = 0;\n            this._spherical.theta = this._sphericalEnd.theta;\n        }\n        else {\n            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.theta = smoothDamp(this._spherical.theta, this._sphericalEnd.theta, this._thetaVelocity, smoothTime, Infinity, delta);\n            this._needsUpdate = true;\n        }\n        // update phi\n        if (approxZero(deltaPhi)) {\n            this._phiVelocity.value = 0;\n            this._spherical.phi = this._sphericalEnd.phi;\n        }\n        else {\n            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.phi = smoothDamp(this._spherical.phi, this._sphericalEnd.phi, this._phiVelocity, smoothTime, Infinity, delta);\n            this._needsUpdate = true;\n        }\n        // update distance\n        if (approxZero(deltaRadius)) {\n            this._radiusVelocity.value = 0;\n            this._spherical.radius = this._sphericalEnd.radius;\n        }\n        else {\n            const smoothTime = this._isUserControllingDolly ? this.draggingSmoothTime : this.smoothTime;\n            this._spherical.radius = smoothDamp(this._spherical.radius, this._sphericalEnd.radius, this._radiusVelocity, smoothTime, this.maxSpeed, delta);\n            this._needsUpdate = true;\n        }\n        // update target position\n        if (approxZero(deltaTarget.x) && approxZero(deltaTarget.y) && approxZero(deltaTarget.z)) {\n            this._targetVelocity.set(0, 0, 0);\n            this._target.copy(this._targetEnd);\n        }\n        else {\n            const smoothTime = this._isUserControllingTruck ? this.draggingSmoothTime : this.smoothTime;\n            smoothDampVec3(this._target, this._targetEnd, this._targetVelocity, smoothTime, this.maxSpeed, delta, this._target);\n            this._needsUpdate = true;\n        }\n        // update focalOffset\n        if (approxZero(deltaOffset.x) && approxZero(deltaOffset.y) && approxZero(deltaOffset.z)) {\n            this._focalOffsetVelocity.set(0, 0, 0);\n            this._focalOffset.copy(this._focalOffsetEnd);\n        }\n        else {\n            const smoothTime = this._isUserControllingOffset ? this.draggingSmoothTime : this.smoothTime;\n            smoothDampVec3(this._focalOffset, this._focalOffsetEnd, this._focalOffsetVelocity, smoothTime, this.maxSpeed, delta, this._focalOffset);\n            this._needsUpdate = true;\n        }\n        if (this._dollyControlAmount !== 0) {\n            if (isPerspectiveCamera(this._camera)) {\n                const camera = this._camera;\n                const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n                const planeX = _v3B.copy(cameraDirection).cross(camera.up).normalize();\n                if (planeX.lengthSq() === 0)\n                    planeX.x = 1.0;\n                const planeY = _v3C.crossVectors(planeX, cameraDirection);\n                const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * DEG2RAD * 0.5);\n                const prevRadius = this._sphericalEnd.radius - this._dollyControlAmount;\n                const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n                const cursor = _v3A.copy(this._targetEnd)\n                    .add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect))\n                    .add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n                this._targetEnd.lerp(cursor, lerpRatio);\n            }\n            else if (isOrthographicCamera(this._camera)) {\n                const camera = this._camera;\n                const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); //.sub( _v3B.set( this._focalOffset.x, this._focalOffset.y, 0 ) );\n                const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);\n                const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));\n                const prevZoom = this._zoom - this._dollyControlAmount;\n                const lerpRatio = -(prevZoom - this._zoomEnd) / this._zoom;\n                // find the \"distance\" (aka plane constant in three.js) of Plane\n                // from a given position (this._targetEnd) and normal vector (cameraDirection)\n                // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n                const cameraDirection = _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate();\n                const prevPlaneConstant = this._targetEnd.dot(cameraDirection);\n                this._targetEnd.lerp(cursor, lerpRatio);\n                const newPlaneConstant = this._targetEnd.dot(cameraDirection);\n                // Pull back the camera depth that has moved, to be the camera stationary as zoom\n                const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n                this._targetEnd.sub(pullBack);\n            }\n            this._target.copy(this._targetEnd);\n            // target position may be moved beyond boundary.\n            this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n            this._dollyControlAmount = 0;\n        }\n        // update zoom\n        if (approxZero(deltaZoom)) {\n            this._zoomVelocity.value = 0;\n            this._zoom = this._zoomEnd;\n        }\n        else {\n            const smoothTime = this._isUserControllingZoom ? this.draggingSmoothTime : this.smoothTime;\n            this._zoom = smoothDamp(this._zoom, this._zoomEnd, this._zoomVelocity, smoothTime, Infinity, delta);\n        }\n        if (this._camera.zoom !== this._zoom) {\n            this._camera.zoom = this._zoom;\n            this._camera.updateProjectionMatrix();\n            this._updateNearPlaneCorners();\n            this._needsUpdate = true;\n        }\n        // collision detection\n        const maxDistance = this._collisionTest();\n        this._spherical.radius = Math.min(this._spherical.radius, maxDistance);\n        // decompose spherical to the camera position\n        this._spherical.makeSafe();\n        this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n        this._camera.lookAt(this._target);\n        // set offset after the orbit movement\n        const affectOffset = !approxZero(this._focalOffset.x) ||\n            !approxZero(this._focalOffset.y) ||\n            !approxZero(this._focalOffset.z);\n        if (affectOffset) {\n            this._camera.updateMatrixWorld();\n            _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n            _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n            _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n            _xColumn.multiplyScalar(this._focalOffset.x);\n            _yColumn.multiplyScalar(-this._focalOffset.y);\n            _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n            _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n            this._camera.position.add(_v3A);\n        }\n        if (this._boundaryEnclosesCamera) {\n            this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n        }\n        const updated = this._needsUpdate;\n        if (updated && !this._updatedLastTime) {\n            this._hasRested = false;\n            this.dispatchEvent({ type: 'wake' });\n            this.dispatchEvent({ type: 'update' });\n        }\n        else if (updated) {\n            this.dispatchEvent({ type: 'update' });\n            if (approxZero(deltaTheta, this.restThreshold) &&\n                approxZero(deltaPhi, this.restThreshold) &&\n                approxZero(deltaRadius, this.restThreshold) &&\n                approxZero(deltaTarget.x, this.restThreshold) &&\n                approxZero(deltaTarget.y, this.restThreshold) &&\n                approxZero(deltaTarget.z, this.restThreshold) &&\n                approxZero(deltaOffset.x, this.restThreshold) &&\n                approxZero(deltaOffset.y, this.restThreshold) &&\n                approxZero(deltaOffset.z, this.restThreshold) &&\n                approxZero(deltaZoom, this.restThreshold) &&\n                !this._hasRested) {\n                this._hasRested = true;\n                this.dispatchEvent({ type: 'rest' });\n            }\n        }\n        else if (!updated && this._updatedLastTime) {\n            this.dispatchEvent({ type: 'sleep' });\n        }\n        this._updatedLastTime = updated;\n        this._needsUpdate = false;\n        return updated;\n    }\n    /**\n     * Get all state in JSON string\n     * @category Methods\n     */\n    toJSON() {\n        return JSON.stringify({\n            enabled: this._enabled,\n            minDistance: this.minDistance,\n            maxDistance: infinityToMaxNumber(this.maxDistance),\n            minZoom: this.minZoom,\n            maxZoom: infinityToMaxNumber(this.maxZoom),\n            minPolarAngle: this.minPolarAngle,\n            maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n            minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n            maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n            smoothTime: this.smoothTime,\n            draggingSmoothTime: this.draggingSmoothTime,\n            dollySpeed: this.dollySpeed,\n            truckSpeed: this.truckSpeed,\n            dollyToCursor: this.dollyToCursor,\n            verticalDragToForward: this.verticalDragToForward,\n            target: this._targetEnd.toArray(),\n            position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n            zoom: this._zoomEnd,\n            focalOffset: this._focalOffsetEnd.toArray(),\n            target0: this._target0.toArray(),\n            position0: this._position0.toArray(),\n            zoom0: this._zoom0,\n            focalOffset0: this._focalOffset0.toArray(),\n        });\n    }\n    /**\n     * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n     * @param json\n     * @param enableTransition\n     * @category Methods\n     */\n    fromJSON(json, enableTransition = false) {\n        const obj = JSON.parse(json);\n        this.enabled = obj.enabled;\n        this.minDistance = obj.minDistance;\n        this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n        this.minZoom = obj.minZoom;\n        this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n        this.minPolarAngle = obj.minPolarAngle;\n        this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n        this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n        this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n        this.smoothTime = obj.smoothTime;\n        this.draggingSmoothTime = obj.draggingSmoothTime;\n        this.dollySpeed = obj.dollySpeed;\n        this.truckSpeed = obj.truckSpeed;\n        this.dollyToCursor = obj.dollyToCursor;\n        this.verticalDragToForward = obj.verticalDragToForward;\n        this._target0.fromArray(obj.target0);\n        this._position0.fromArray(obj.position0);\n        this._zoom0 = obj.zoom0;\n        this._focalOffset0.fromArray(obj.focalOffset0);\n        this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n        _sphericalA.setFromVector3(_v3A.fromArray(obj.position).sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n        this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n        this.dollyTo(_sphericalA.radius, enableTransition);\n        this.zoomTo(obj.zoom, enableTransition);\n        this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n        this._needsUpdate = true;\n    }\n    /**\n     * Attach all internal event handlers to enable drag control.\n     * @category Methods\n     */\n    connect(domElement) {\n        if (this._domElement) {\n            console.warn('camera-controls is already connected.');\n            return;\n        }\n        domElement.setAttribute('data-camera-controls-version', VERSION);\n        this._addAllEventListeners(domElement);\n    }\n    /**\n     * Detach all internal event handlers to disable drag control.\n     */\n    disconnect() {\n        this.cancel();\n        this._removeAllEventListeners();\n        if (this._domElement) {\n            this._domElement.removeAttribute('data-camera-controls-version');\n            this._domElement = undefined;\n        }\n    }\n    /**\n     * Dispose the cameraControls instance itself, remove all eventListeners.\n     * @category Methods\n     */\n    dispose() {\n        // remove all user event listeners\n        this.removeAllEventListeners();\n        // remove all internal event listeners\n        this.disconnect();\n    }\n    _findPointerById(pointerId) {\n        return this._activePointers.find((activePointer) => activePointer.pointerId === pointerId);\n    }\n    _findPointerByMouseButton(mouseButton) {\n        return this._activePointers.find((activePointer) => activePointer.mouseButton === mouseButton);\n    }\n    _disposePointer(pointer) {\n        this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n    }\n    _encloseToBoundary(position, offset, friction) {\n        const offsetLength2 = offset.lengthSq();\n        if (offsetLength2 === 0.0) { // sanity check\n            return position;\n        }\n        // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n        const newTarget = _v3B.copy(offset).add(position); // target\n        const clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n        const deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n        const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n        if (deltaClampedTargetLength2 === 0.0) { // when the position doesn't have to be clamped\n            return position.add(offset);\n        }\n        else if (deltaClampedTargetLength2 === offsetLength2) { // when the position is completely stuck\n            return position;\n        }\n        else if (friction === 0.0) {\n            return position.add(offset).add(deltaClampedTarget);\n        }\n        else {\n            const offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n            return position\n                .add(_v3B.copy(offset).multiplyScalar(offsetFactor))\n                .add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n        }\n    }\n    _updateNearPlaneCorners() {\n        if (isPerspectiveCamera(this._camera)) {\n            const camera = this._camera;\n            const near = camera.near;\n            const fov = camera.getEffectiveFOV() * DEG2RAD;\n            const heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n            const widthHalf = heightHalf * camera.aspect; // near plain half width\n            this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n            this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n            this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n        }\n        else if (isOrthographicCamera(this._camera)) {\n            const camera = this._camera;\n            const zoomInv = 1 / camera.zoom;\n            const left = camera.left * zoomInv;\n            const right = camera.right * zoomInv;\n            const top = camera.top * zoomInv;\n            const bottom = camera.bottom * zoomInv;\n            this._nearPlaneCorners[0].set(left, top, 0);\n            this._nearPlaneCorners[1].set(right, top, 0);\n            this._nearPlaneCorners[2].set(right, bottom, 0);\n            this._nearPlaneCorners[3].set(left, bottom, 0);\n        }\n    }\n    // lateUpdate\n    _collisionTest() {\n        let distance = Infinity;\n        const hasCollider = this.colliderMeshes.length >= 1;\n        if (!hasCollider)\n            return distance;\n        if (notSupportedInOrthographicCamera(this._camera, '_collisionTest'))\n            return distance;\n        // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n        const direction = _v3A.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);\n        _rotationMatrix.lookAt(_ORIGIN, direction, this._camera.up);\n        for (let i = 0; i < 4; i++) {\n            const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n            nearPlaneCorner.applyMatrix4(_rotationMatrix);\n            const origin = _v3C.addVectors(this._target, nearPlaneCorner);\n            _raycaster.set(origin, direction);\n            _raycaster.far = this._spherical.radius + 1;\n            const intersects = _raycaster.intersectObjects(this.colliderMeshes);\n            if (intersects.length !== 0 && intersects[0].distance < distance) {\n                distance = intersects[0].distance;\n            }\n        }\n        return distance;\n    }\n    /**\n     * Get its client rect and package into given `DOMRect` .\n     */\n    _getClientRect(target) {\n        if (!this._domElement)\n            return;\n        const rect = this._domElement.getBoundingClientRect();\n        target.x = rect.left;\n        target.y = rect.top;\n        if (this._viewport) {\n            target.x += this._viewport.x;\n            target.y += rect.height - this._viewport.w - this._viewport.y;\n            target.width = this._viewport.z;\n            target.height = this._viewport.w;\n        }\n        else {\n            target.width = rect.width;\n            target.height = rect.height;\n        }\n        return target;\n    }\n    _createOnRestPromise(resolveImmediately) {\n        if (resolveImmediately)\n            return Promise.resolve();\n        this._hasRested = false;\n        this.dispatchEvent({ type: 'transitionstart' });\n        return new Promise((resolve) => {\n            const onResolve = () => {\n                this.removeEventListener('rest', onResolve);\n                resolve();\n            };\n            this.addEventListener('rest', onResolve);\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _addAllEventListeners(_domElement) { }\n    _removeAllEventListeners() { }\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */\n    get dampingFactor() {\n        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n        return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use smoothTime (in seconds) instead\n     * @category Properties\n     */\n    set dampingFactor(_) {\n        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */\n    get draggingDampingFactor() {\n        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n        return 0;\n    }\n    /**\n     * backward compatible\n     * @deprecated use draggingSmoothTime (in seconds) instead\n     * @category Properties\n     */\n    set draggingDampingFactor(_) {\n        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n    }\n    static createBoundingSphere(object3d, out = new THREE.Sphere()) {\n        const boundingSphere = out;\n        const center = boundingSphere.center;\n        _box3A.makeEmpty();\n        // find the center\n        object3d.traverseVisible((object) => {\n            if (!object.isMesh)\n                return;\n            _box3A.expandByObject(object);\n        });\n        _box3A.getCenter(center);\n        // find the radius\n        let maxRadiusSq = 0;\n        object3d.traverseVisible((object) => {\n            if (!object.isMesh)\n                return;\n            const mesh = object;\n            const geometry = mesh.geometry.clone();\n            geometry.applyMatrix4(mesh.matrixWorld);\n            const bufferGeometry = geometry;\n            const position = bufferGeometry.attributes.position;\n            for (let i = 0, l = position.count; i < l; i++) {\n                _v3A.fromBufferAttribute(position, i);\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n            }\n        });\n        boundingSphere.radius = Math.sqrt(maxRadiusSq);\n        return boundingSphere;\n    }\n}\n\nexport { CameraControls as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}