{"ast":null,"code":"import _slicedToArray from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport * as React from \"react\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return a;\n};\n\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\n\nfunction traverseFiber(fiber, ascending, selector) {\n  if (!fiber) return;\n  if (selector(fiber) === true) return fiber;\n  var child = ascending ? fiber.return : fiber.child;\n\n  while (child) {\n    var match = traverseFiber(child, ascending, selector);\n    if (match) return match;\n    child = ascending ? null : child.sibling;\n  }\n}\n\nfunction wrapContext(context) {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get: function get() {\n          return null;\n        },\n        set: function set() {}\n      },\n      _currentRenderer2: {\n        get: function get() {\n          return null;\n        },\n        set: function set() {}\n      }\n    });\n  } catch (_) {\n    return context;\n  }\n}\n\nvar FiberContext = wrapContext(React.createContext(null));\n\nvar FiberProvider = /*#__PURE__*/function (_React$Component) {\n  _inherits(FiberProvider, _React$Component);\n\n  var _super = _createSuper(FiberProvider);\n\n  function FiberProvider() {\n    _classCallCheck(this, FiberProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FiberProvider, [{\n    key: \"render\",\n    value: function render() {\n      return /* @__PURE__ */React.createElement(FiberContext.Provider, {\n        value: this._reactInternals\n      }, this.props.children);\n    }\n  }]);\n\n  return FiberProvider;\n}(React.Component);\n\nvar _React$__SECRET_INTER = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n    ReactCurrentOwner = _React$__SECRET_INTER.ReactCurrentOwner,\n    ReactCurrentDispatcher = _React$__SECRET_INTER.ReactCurrentDispatcher;\n\nfunction useFiber() {\n  var root = React.useContext(FiberContext);\n  if (root === null) throw new Error(\"its-fine: useFiber must be called within a <FiberProvider />!\");\n  var id = React.useId();\n  var fiber = React.useMemo(function () {\n    for (var _i = 0, _arr = [ReactCurrentOwner == null ? void 0 : ReactCurrentOwner.current, root, root == null ? void 0 : root.alternate]; _i < _arr.length; _i++) {\n      var maybeFiber = _arr[_i];\n      if (!maybeFiber) continue;\n      var fiber2 = traverseFiber(maybeFiber, false, function (node) {\n        var state = node.memoizedState;\n\n        while (state) {\n          if (state.memoizedState === id) return true;\n          state = state.next;\n        }\n      });\n      if (fiber2) return fiber2;\n    }\n  }, [root, id]);\n  return fiber;\n}\n\nfunction useContainer() {\n  var fiber = useFiber();\n  var root = React.useMemo(function () {\n    return traverseFiber(fiber, true, function (node) {\n      var _a;\n\n      return ((_a = node.stateNode) == null ? void 0 : _a.containerInfo) != null;\n    });\n  }, [fiber]);\n  return root == null ? void 0 : root.stateNode.containerInfo;\n}\n\nfunction useNearestChild(type) {\n  var fiber = useFiber();\n  var childRef = React.useRef();\n  React.useLayoutEffect(function () {\n    var _a;\n\n    childRef.current = (_a = traverseFiber(fiber, false, function (node) {\n      return typeof node.type === \"string\" && (type === void 0 || node.type === type);\n    })) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return childRef;\n}\n\nfunction useNearestParent(type) {\n  var fiber = useFiber();\n  var parentRef = React.useRef();\n  React.useLayoutEffect(function () {\n    var _a;\n\n    parentRef.current = (_a = traverseFiber(fiber, true, function (node) {\n      return typeof node.type === \"string\" && (type === void 0 || node.type === type);\n    })) == null ? void 0 : _a.stateNode;\n  }, [fiber]);\n  return parentRef;\n}\n\nfunction useContextMap() {\n  var _a, _b;\n\n  var fiber = useFiber();\n\n  var _React$useState = React.useState(function () {\n    return /* @__PURE__ */new Map();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      contextMap = _React$useState2[0];\n\n  contextMap.clear();\n  var node = fiber;\n\n  while (node) {\n    var context = (_a = node.type) == null ? void 0 : _a._context;\n\n    if (context && context !== FiberContext && !contextMap.has(context)) {\n      contextMap.set(context, (_b = ReactCurrentDispatcher == null ? void 0 : ReactCurrentDispatcher.current) == null ? void 0 : _b.readContext(wrapContext(context)));\n    }\n\n    node = node.return;\n  }\n\n  return contextMap;\n}\n\nfunction useContextBridge() {\n  var contextMap = useContextMap();\n  return React.useMemo(function () {\n    return Array.from(contextMap.keys()).reduce(function (Prev, context) {\n      return function (props) {\n        return /* @__PURE__ */React.createElement(Prev, null, /* @__PURE__ */React.createElement(context.Provider, __spreadProps(__spreadValues({}, props), {\n          value: contextMap.get(context)\n        })));\n      };\n    }, function (props) {\n      return /* @__PURE__ */React.createElement(FiberProvider, __spreadValues({}, props));\n    });\n  }, [contextMap]);\n}\n\nexport { FiberProvider, traverseFiber, useContainer, useContextBridge, useContextMap, useFiber, useNearestChild, useNearestParent };","map":{"version":3,"mappings":"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","names":["fiber","ascending","selector","child","return","match","traverseFiber","sibling","wrapContext","context","defineProperties","_currentRenderer","get","set","_currentRenderer2","_","FiberContext","React","createContext","FiberProvider","Provider","value","_reactInternals","props","children","Component","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ReactCurrentDispatcher","useFiber","useContext","root","Error","useId","useMemo","current","alternate","maybeFiber","node","state","memoizedState","id","next","useContainer","_a","containerInfo","stateNode","useNearestChild","type","useRef","useLayoutEffect","childRef","useNearestParent","parentRef","useContextMap","useState","Map","contextMap","clear","has","_b","readContext","useContextBridge","Array","from","keys","reduce","Prev"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/its-fine/src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport type ReactReconciler from 'react-reconciler'\n\n/**\n * Represents a react-internal Fiber node.\n */\nexport type Fiber<T = any> = Omit<ReactReconciler.Fiber, 'stateNode'> & { stateNode: T }\n\n/**\n * Represents a {@link Fiber} node selector for traversal.\n */\nexport type FiberSelector<T = any> = (\n  /** The current {@link Fiber} node. */\n  node: Fiber<T | null>,\n) => boolean | void\n\n/**\n * Traverses up or down a {@link Fiber}, return `true` to stop and select a node.\n */\nexport function traverseFiber<T = any>(\n  /** Input {@link Fiber} to traverse. */\n  fiber: Fiber | undefined,\n  /** Whether to ascend and walk up the tree. Will walk down if `false`. */\n  ascending: boolean,\n  /** A {@link Fiber} node selector, returns the first match when `true` is passed. */\n  selector: FiberSelector<T>,\n): Fiber<T> | undefined {\n  if (!fiber) return\n  if (selector(fiber) === true) return fiber\n\n  let child = ascending ? fiber.return : fiber.child\n  while (child) {\n    const match = traverseFiber(child, ascending, selector)\n    if (match) return match\n\n    child = ascending ? null : child.sibling\n  }\n}\n\n// In development, React will warn about using contexts between renderers.\n// Hide the warning because its-fine fixes this issue\n// https://github.com/facebook/react/pull/12779\nfunction wrapContext<T>(context: React.Context<T>): React.Context<T> {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n      _currentRenderer2: {\n        get() {\n          return null\n        },\n        set() {},\n      },\n    })\n  } catch (_) {\n    return context\n  }\n}\n\nconst FiberContext = wrapContext(React.createContext<Fiber>(null!))\n\n/**\n * A react-internal {@link Fiber} provider. This component binds React children to the React Fiber tree. Call its-fine hooks within this.\n */\nexport class FiberProvider extends React.Component<{ children?: React.ReactNode }> {\n  private _reactInternals!: Fiber\n\n  render() {\n    return <FiberContext.Provider value={this._reactInternals}>{this.props.children}</FiberContext.Provider>\n  }\n}\n\ninterface ReactInternal {\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentOwner: React.RefObject<Fiber>\n    ReactCurrentDispatcher: React.RefObject<{ readContext<T>(context: React.Context<T>): T }>\n  }\n}\n\nconst { ReactCurrentOwner, ReactCurrentDispatcher } = (React as unknown as ReactInternal)\n  .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\n/**\n * Returns the current react-internal {@link Fiber}. This is an implementation detail of [react-reconciler](https://github.com/facebook/react/tree/main/packages/react-reconciler).\n */\nexport function useFiber(): Fiber<null> | undefined {\n  const root = React.useContext(FiberContext)\n  if (root === null) throw new Error('its-fine: useFiber must be called within a <FiberProvider />!')\n\n  // In development mode, React will expose the current component's Fiber as ReactCurrentOwner.\n  // In production, we don't have this luxury and must traverse from FiberProvider via useId\n  const id = React.useId()\n  const fiber = React.useMemo(() => {\n    for (const maybeFiber of [ReactCurrentOwner?.current, root, root?.alternate]) {\n      if (!maybeFiber) continue\n      const fiber = traverseFiber<null>(maybeFiber, false, (node) => {\n        let state = node.memoizedState\n        while (state) {\n          if (state.memoizedState === id) return true\n          state = state.next\n        }\n      })\n      if (fiber) return fiber\n    }\n  }, [root, id])\n\n  return fiber\n}\n\n/**\n * Represents a react-reconciler container instance.\n */\nexport interface ContainerInstance<T = any> {\n  containerInfo: T\n}\n\n/**\n * Returns the current react-reconciler container info passed to {@link ReactReconciler.Reconciler.createContainer}.\n *\n * In react-dom, a container will point to the root DOM element; in react-three-fiber, it will point to the root Zustand store.\n */\nexport function useContainer<T = any>(): T | undefined {\n  const fiber = useFiber()\n  const root = React.useMemo(\n    () => traverseFiber<ContainerInstance<T>>(fiber, true, (node) => node.stateNode?.containerInfo != null),\n    [fiber],\n  )\n\n  return root?.stateNode.containerInfo\n}\n\n/**\n * Returns the nearest react-reconciler child instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestChild<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const childRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    childRef.current = traverseFiber<T>(\n      fiber,\n      false,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return childRef\n}\n\n/**\n * Returns the nearest react-reconciler parent instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\n *\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\n */\nexport function useNearestParent<T = any>(\n  /** An optional element type to filter to. */\n  type?: keyof JSX.IntrinsicElements,\n): React.MutableRefObject<T | undefined> {\n  const fiber = useFiber()\n  const parentRef = React.useRef<T>()\n\n  React.useLayoutEffect(() => {\n    parentRef.current = traverseFiber<T>(\n      fiber,\n      true,\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\n    )?.stateNode\n  }, [fiber])\n\n  return parentRef\n}\n\nexport type ContextMap = Map<React.Context<any>, any> & {\n  get<T>(context: React.Context<T>): T | undefined\n}\n\n/**\n * Returns a map of all contexts and their values.\n */\nexport function useContextMap(): ContextMap {\n  const fiber = useFiber()\n  const [contextMap] = React.useState(() => new Map<React.Context<any>, any>())\n\n  // Collect live context\n  contextMap.clear()\n  let node = fiber\n  while (node) {\n    const context = node.type?._context\n    if (context && context !== FiberContext && !contextMap.has(context)) {\n      contextMap.set(context, ReactCurrentDispatcher?.current?.readContext(wrapContext(context)))\n    }\n    node = node.return!\n  }\n\n  return contextMap\n}\n\n/**\n * Represents a react-context bridge provider component.\n */\nexport type ContextBridge = React.FC<React.PropsWithChildren<{}>>\n\n/**\n * React Context currently cannot be shared across [React renderers](https://reactjs.org/docs/codebase-overview.html#renderers) but explicitly forwarded between providers (see [react#17275](https://github.com/facebook/react/issues/17275)). This hook returns a {@link ContextBridge} of live context providers to pierce Context across renderers.\n *\n * Pass {@link ContextBridge} as a component to a secondary renderer to enable context-sharing within its children.\n */\nexport function useContextBridge(): ContextBridge {\n  const contextMap = useContextMap()\n\n  // Flatten context and their memoized values into a `ContextBridge` provider\n  return React.useMemo(\n    () =>\n      Array.from(contextMap.keys()).reduce(\n        (Prev, context) => (props) =>\n          (\n            <Prev>\n              <context.Provider {...props} value={contextMap.get(context)} />\n            </Prev>\n          ),\n        (props) => <FiberProvider {...props} />,\n      ),\n    [contextMap],\n  )\n}\n"]},"metadata":{},"sourceType":"module"}