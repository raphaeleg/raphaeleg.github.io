{"ast":null,"code":"import _construct from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"points\", \"closed\", \"curveType\", \"tension\", \"segments\", \"vertexColors\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\nvar CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine(_ref, ref) {\n  var points = _ref.points,\n      _ref$closed = _ref.closed,\n      closed = _ref$closed === void 0 ? false : _ref$closed,\n      _ref$curveType = _ref.curveType,\n      curveType = _ref$curveType === void 0 ? 'centripetal' : _ref$curveType,\n      _ref$tension = _ref.tension,\n      tension = _ref$tension === void 0 ? 0.5 : _ref$tension,\n      _ref$segments = _ref.segments,\n      segments = _ref$segments === void 0 ? 20 : _ref$segments,\n      vertexColors = _ref.vertexColors,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var curve = React.useMemo(function () {\n    var mappedPoints = points.map(function (pt) {\n      return pt instanceof Vector3 ? pt : _construct(Vector3, _toConsumableArray(pt));\n    });\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  var segmentedPoints = React.useMemo(function () {\n    return curve.getPoints(segments);\n  }, [curve, segments]);\n  var interpolatedVertexColors = React.useMemo(function () {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    var mappedColors = vertexColors.map(function (color) {\n      return color instanceof Color ? color : _construct(Color, _toConsumableArray(color));\n    });\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    var iColors = [mappedColors[0]];\n    var divisions = segments / (mappedColors.length - 1);\n\n    for (var i = 1; i < segments; i++) {\n      var alpha = i % divisions / divisions;\n      var colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\nexport { CatmullRomLine };","map":{"version":3,"names":["_extends","React","Vector3","CatmullRomCurve3","Color","Line","CatmullRomLine","forwardRef","ref","points","closed","curveType","tension","segments","vertexColors","rest","curve","useMemo","mappedPoints","map","pt","segmentedPoints","getPoints","interpolatedVertexColors","length","undefined","mappedColors","color","push","clone","iColors","divisions","i","alpha","colorIndex","Math","floor","lerp","createElement"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@react-three/drei/core/CatmullRomLine.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\n\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine({\n  points,\n  closed = false,\n  curveType = 'centripetal',\n  tension = 0.5,\n  segments = 20,\n  vertexColors,\n  ...rest\n}, ref) {\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\n\nexport { CatmullRomLine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}