{"ast":null,"code":"import _regeneratorRuntime from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\nvar _FORMAT_MAP, _TYPE_MAP, _ENCODING_MAP;\n\nimport { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nvar _taskCache = new WeakMap();\n\nvar _activeLoaders = 0;\n\nvar _zstd;\n\nvar KTX2Loader = /*#__PURE__*/function (_Loader) {\n  _inherits(KTX2Loader, _Loader);\n\n  var _super = _createSuper(KTX2Loader);\n\n  function KTX2Loader(manager) {\n    var _this;\n\n    _classCallCheck(this, KTX2Loader);\n\n    _this = _super.call(this, manager);\n    _this.transcoderPath = '';\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerPool = new WorkerPool();\n    _this.workerSourceURL = '';\n    _this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n\n    return _this;\n  }\n\n  _createClass(KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n        etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n        etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n        dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n        bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n        pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n      };\n\n      if (renderer.capabilities.isWebGL2) {\n        // https://github.com/mrdoob/three.js/pull/22928\n        this.workerConfig.etc1Supported = false;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      if (!this.transcoderPending) {\n        // Load transcoder wrapper.\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType('arraybuffer');\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              jsContent = _ref2[0],\n              binaryContent = _ref2[1];\n\n          var fn = KTX2Loader.BasisWorker.toString();\n          var body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n          _this2.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this2.transcoderBinary = binaryContent;\n\n          _this2.workerPool.setWorkerCreator(function () {\n            var worker = new Worker(_this2.workerSourceURL);\n\n            var transcoderBinary = _this2.transcoderBinary.slice(0);\n\n            worker.postMessage({\n              type: 'init',\n              config: _this2.workerConfig,\n              transcoderBinary: transcoderBinary\n            }, [transcoderBinary]);\n            return worker;\n          });\n        });\n\n        if (_activeLoaders > 0) {\n          // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n          console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n        }\n\n        _activeLoaders++;\n      }\n\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this3 = this;\n\n      if (this.workerConfig === null) {\n        throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n      }\n\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n        // again from this thread.\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n\n        _this3._createTexture(buffer).then(function (texture) {\n          return onLoad ? onLoad(texture) : null;\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"_createTextureFrom\",\n    value: function _createTextureFrom(transcodeResult) {\n      var mipmaps = transcodeResult.mipmaps,\n          width = transcodeResult.width,\n          height = transcodeResult.height,\n          format = transcodeResult.format,\n          type = transcodeResult.type,\n          error = transcodeResult.error,\n          dfdTransferFn = transcodeResult.dfdTransferFn,\n          dfdFlags = transcodeResult.dfdFlags;\n      if (type === 'error') return Promise.reject(error);\n      var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n     */\n\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffer) {\n      var _this4 = this;\n\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var container = read(new Uint8Array(buffer));\n\n      if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n        return createDataTexture(container);\n      } //\n\n\n      var taskConfig = config;\n      var texturePending = this.init().then(function () {\n        return _this4.workerPool.postMessage({\n          type: 'transcode',\n          buffer: buffer,\n          taskConfig: taskConfig\n        }, [buffer]);\n      }).then(function (e) {\n        return _this4._createTextureFrom(e.data);\n      }); // Cache the task result.\n\n      _taskCache.set(buffer, {\n        promise: texturePending\n      });\n\n      return texturePending;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  }]);\n\n  return KTX2Loader;\n}(Loader);\n/* CONSTANTS */\n\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  var TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  var BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(function () {\n          try {\n            var _transcode = transcode(message.buffer),\n                width = _transcode.width,\n                height = _transcode.height,\n                hasAlpha = _transcode.hasAlpha,\n                mipmaps = _transcode.mipmaps,\n                format = _transcode.format,\n                dfdTransferFn = _transcode.dfdTransferFn,\n                dfdFlags = _transcode.dfdFlags;\n\n            var buffers = [];\n\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format,\n              dfdTransferFn: dfdTransferFn,\n              dfdFlags: dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(function () {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    var ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n\n    var basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = ktx2File.getWidth();\n    var height = ktx2File.getHeight();\n    var levels = ktx2File.getLevels();\n    var hasAlpha = ktx2File.getHasAlpha();\n    var dfdTransferFn = ktx2File.getDFDTransferFunc();\n    var dfdFlags = ktx2File.getDFDFlags();\n\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n        transcoderFormat = _getTranscoderFormat.transcoderFormat,\n        engineFormat = _getTranscoderFormat.engineFormat;\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n\n    var mipmaps = [];\n\n    for (var mip = 0; mip < levels; mip++) {\n      var levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      var mipWidth = levelInfo.origWidth;\n      var mipHeight = levelInfo.origHeight;\n      var dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      var status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat,\n      dfdTransferFn: dfdTransferFn,\n      dfdFlags: dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  var FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\n\nvar FORMAT_MAP = (_FORMAT_MAP = {}, _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_UNORM, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_SRGB, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_UNORM, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_SRGB, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_SRGB, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_UNORM, RedFormat), _FORMAT_MAP);\nvar TYPE_MAP = (_TYPE_MAP = {}, _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_UNORM, UnsignedByteType), _TYPE_MAP);\nvar ENCODING_MAP = (_ENCODING_MAP = {}, _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8B8A8_SRGB, sRGBEncoding), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8_SRGB, sRGBEncoding), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8_SRGB, sRGBEncoding), _ENCODING_MAP);\n\nfunction createDataTexture(_x) {\n  return _createDataTexture.apply(this, arguments);\n}\n\nfunction _createDataTexture() {\n  _createDataTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(container) {\n    var vkFormat, pixelWidth, pixelHeight, pixelDepth, level, levelData, view, texture;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            vkFormat = container.vkFormat, pixelWidth = container.pixelWidth, pixelHeight = container.pixelHeight, pixelDepth = container.pixelDepth;\n\n            if (!(FORMAT_MAP[vkFormat] === undefined)) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n\n          case 3:\n            //\n            level = container.levels[0];\n\n            if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE)) {\n              _context2.next = 8;\n              break;\n            }\n\n            levelData = level.levelData;\n            _context2.next = 16;\n            break;\n\n          case 8:\n            if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD)) {\n              _context2.next = 15;\n              break;\n            }\n\n            if (!_zstd) {\n              _zstd = new Promise( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve) {\n                  var zstd;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          zstd = new ZSTDDecoder();\n                          _context.next = 3;\n                          return zstd.init();\n\n                        case 3:\n                          resolve(zstd);\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n            }\n\n            _context2.next = 12;\n            return _zstd;\n\n          case 12:\n            levelData = _context2.sent.decode(level.levelData, level.uncompressedByteLength);\n            _context2.next = 16;\n            break;\n\n          case 15:\n            throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n\n          case 16:\n            if (TYPE_MAP[vkFormat] === FloatType) {\n              view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n            } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n              view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n            } else {\n              view = levelData;\n            } //\n\n\n            texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n            texture.type = TYPE_MAP[vkFormat];\n            texture.format = FORMAT_MAP[vkFormat];\n            texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n            texture.needsUpdate = true; //\n\n            return _context2.abrupt(\"return\", Promise.resolve(texture));\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createDataTexture.apply(this, arguments);\n}\n\nexport { KTX2Loader };","map":{"version":3,"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","sRGBEncoding","LinearEncoding","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FloatType","HalfFloatType","DataTexture","Data3DTexture","RGFormat","RedFormat","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","path","num","setWorkerLimit","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","url","onLoad","onProgress","onError","Error","loader","load","buffer","cachedTask","get","promise","catch","_createTexture","texture","transcodeResult","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","minFilter","length","magFilter","generateMipmaps","needsUpdate","encoding","premultiplyAlpha","container","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","init","e","_createTextureFrom","data","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","transcode","hasAlpha","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","undefined","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","getTranscoderFormat","transcoderFormat","engineFormat","startTranscoding","mip","levelInfo","getImageLevelInfo","mipWidth","origWidth","mipHeight","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","value","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","supercompressionScheme","levelData","zstd","decode","uncompressedByteLength","view","Float32Array","byteOffset","byteLength","BYTES_PER_ELEMENT","Uint16Array"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n\n    return this;\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n\n      _activeLoaders++;\n    }\n\n    return this.transcoderPending;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n\n  _createTextureFrom(transcodeResult) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n   */\n\n\n  _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    } //\n\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data)); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      const mipWidth = levelInfo.origWidth;\n      const mipHeight = levelInfo.origHeight;\n      const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  } //\n\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  } //\n\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true; //\n\n  return Promise.resolve(texture);\n}\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}