{"ast":null,"code":"import _createClass from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nvar ParametricGeometries = {\n  klein: function klein(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    var x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    var y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function plane(width, height) {\n    return function (u, v, target) {\n      var x = u * width;\n      var y = 0;\n      var z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function mobius(u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    var v = 2 * Math.PI * t;\n    var a = 2;\n    var x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    var y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    var z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function mobius3d(u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    var phi = u / 2;\n    var major = 2.25,\n        a = 0.125,\n        b = 0.65;\n    var x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    var z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    var y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = /*#__PURE__*/function (_ParametricGeometry) {\n  _inherits(TubeGeometry, _ParametricGeometry);\n\n  var _super = _createSuper(TubeGeometry);\n\n  function TubeGeometry(path) {\n    var _this;\n\n    var segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var segmentsRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    var closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, TubeGeometry);\n\n    var numpoints = segments + 1;\n    var frames = path.computeFrenetFrames(segments, closed),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals;\n    var position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      var i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      var normal = normals[i];\n      var binormal = binormals[i];\n      var cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      var cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    _this = _super.call(this, ParametricTube, segments, segmentsRadius); // proxy internals\n\n    _this.tangents = tangents;\n    _this.normals = normals;\n    _this.binormals = binormals;\n    _this.path = path;\n    _this.segments = segments;\n    _this.radius = radius;\n    _this.segmentsRadius = segmentsRadius;\n    _this.closed = closed;\n    return _this;\n  }\n\n  return _createClass(TubeGeometry);\n}(ParametricGeometry);\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\n\nParametricGeometries.TorusKnotGeometry = /*#__PURE__*/function (_ParametricGeometries) {\n  _inherits(TorusKnotGeometry, _ParametricGeometries);\n\n  var _super2 = _createSuper(TorusKnotGeometry);\n\n  function TorusKnotGeometry() {\n    var _this2;\n\n    var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n    var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n    var segmentsT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n    var segmentsR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    var p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n    var q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n\n    _classCallCheck(this, TorusKnotGeometry);\n\n    var TorusKnotCurve = /*#__PURE__*/function (_Curve) {\n      _inherits(TorusKnotCurve, _Curve);\n\n      var _super3 = _createSuper(TorusKnotCurve);\n\n      function TorusKnotCurve() {\n        _classCallCheck(this, TorusKnotCurve);\n\n        return _super3.apply(this, arguments);\n      }\n\n      _createClass(TorusKnotCurve, [{\n        key: \"getPoint\",\n        value: function getPoint(t) {\n          var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n          var point = optionalTarget;\n          t *= Math.PI * 2;\n          var r = 0.5;\n          var x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          var y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          var z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }]);\n\n      return TorusKnotCurve;\n    }(Curve);\n\n    var segments = segmentsT;\n    var radiusSegments = segmentsR;\n    var extrudePath = new TorusKnotCurve();\n    _this2 = _super2.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n    _this2.radius = radius;\n    _this2.tube = tube;\n    _this2.segmentsT = segmentsT;\n    _this2.segmentsR = segmentsR;\n    _this2.p = p;\n    _this2.q = q;\n    return _this2;\n  }\n\n  return _createClass(TorusKnotGeometry);\n}(ParametricGeometries.TubeGeometry);\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\n\nParametricGeometries.SphereGeometry = /*#__PURE__*/function (_ParametricGeometry2) {\n  _inherits(SphereGeometry, _ParametricGeometry2);\n\n  var _super4 = _createSuper(SphereGeometry);\n\n  function SphereGeometry(size, u, v) {\n    _classCallCheck(this, SphereGeometry);\n\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      var x = size * Math.sin(u) * Math.cos(v);\n      var y = size * Math.sin(u) * Math.sin(v);\n      var z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n\n    return _super4.call(this, sphere, u, v);\n  }\n\n  return _createClass(SphereGeometry);\n}(ParametricGeometry);\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\n\nParametricGeometries.PlaneGeometry = /*#__PURE__*/function (_ParametricGeometry3) {\n  _inherits(PlaneGeometry, _ParametricGeometry3);\n\n  var _super5 = _createSuper(PlaneGeometry);\n\n  function PlaneGeometry(width, depth, segmentsWidth, segmentsDepth) {\n    _classCallCheck(this, PlaneGeometry);\n\n    function plane(u, v, target) {\n      var x = u * width;\n      var y = 0;\n      var z = v * depth;\n      target.set(x, y, z);\n    }\n\n    return _super5.call(this, plane, segmentsWidth, segmentsDepth);\n  }\n\n  return _createClass(PlaneGeometry);\n}(ParametricGeometry);\n\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","Curve","ParametricGeometry","ParametricGeometries","klein","v","u","target","Math","PI","x","z","cos","sin","y","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","path","segments","radius","segmentsRadius","closed","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, Curve } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n          tangents = frames.tangents,\n          normals = frames.normals,\n          binormals = frames.binormals;\n    const position = new Vector3();\n\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n\n    super(ParametricTube, segments, segmentsRadius); // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n  constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n    class TorusKnotCurve extends Curve {\n      getPoint(t, optionalTarget = new Vector3()) {\n        const point = optionalTarget;\n        t *= Math.PI * 2;\n        const r = 0.5;\n        const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        const z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n\n    }\n\n    const segments = segmentsT;\n    const radiusSegments = segmentsR;\n    const extrudePath = new TorusKnotCurve();\n    super(extrudePath, segments, tube, radiusSegments, true, false);\n    this.radius = radius;\n    this.tube = tube;\n    this.segmentsT = segmentsT;\n    this.segmentsR = segmentsR;\n    this.p = p;\n    this.q = q;\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n  constructor(size, u, v) {\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      const x = size * Math.sin(u) * Math.cos(v);\n      const y = size * Math.sin(u) * Math.sin(v);\n      const z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n\n    super(sphere, u, v);\n  }\n\n};\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n  constructor(width, depth, segmentsWidth, segmentsDepth) {\n    function plane(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * depth;\n      target.set(x, y, z);\n    }\n\n    super(plane, segmentsWidth, segmentsDepth);\n  }\n\n};\n\nexport { ParametricGeometries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}