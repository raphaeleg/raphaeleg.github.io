{"ast":null,"code":"import { WebGLRenderTarget, LinearFilter, HalfFloatType, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  renderToScreen = false;\n\n  constructor(_ref) {\n    let {\n      gl,\n      resolution,\n      width = 500,\n      height = 500,\n      minDepthThreshold = 0,\n      maxDepthThreshold = 1,\n      depthScale = 0,\n      depthToBlurRatioBias = 0.25\n    } = _ref;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      type: HalfFloatType\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l; // Apply the multi-pass blur.\n\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n\n}\n\nexport { BlurPass };","map":{"version":3,"names":["WebGLRenderTarget","LinearFilter","HalfFloatType","Vector2","Scene","Camera","BufferGeometry","BufferAttribute","Mesh","ConvolutionMaterial","BlurPass","renderToScreen","constructor","gl","resolution","width","height","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","renderTargetA","minFilter","magFilter","stencilBuffer","depthBuffer","type","renderTargetB","clone","convolutionMaterial","setTexelSize","setResolution","scene","camera","uniforms","value","defines","USE_DEPTH","vertices","Float32Array","uvs","geometry","setAttribute","screen","frustumCulled","add","render","renderer","inputBuffer","outputBuffer","material","depthTexture","kernel","lastRT","destRT","i","l","length","texture","setRenderTarget"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@react-three/drei/materials/BlurPass.js"],"sourcesContent":["import { WebGLRenderTarget, LinearFilter, HalfFloatType, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  renderToScreen = false;\n\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      type: HalfFloatType\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l; // Apply the multi-pass blur.\n\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n\n}\n\nexport { BlurPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}