{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/React.forwardRef((_ref, fref) => {\n  let {\n    scale = 10,\n    frames = Infinity,\n    opacity = 1,\n    width = 1,\n    height = 1,\n    blur = 1,\n    far = 10,\n    resolution = 512,\n    smooth = true,\n    color = '#000000',\n    depthWrite = false,\n    renderOrder,\n    ...props\n  } = _ref;\n  const ref = React.useRef(null);\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color)\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', // Colorize the shadow, multiply by the falloff so that the center can remain darker\n      'vec4( ucolor * fragCoordZ * 2.0, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  let initialBackground;\n  let initialOverrideMaterial;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      count++;\n      initialBackground = scene.background;\n      initialOverrideMaterial = scene.overrideMaterial;\n      ref.current.visible = false;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      ref.current.visible = true;\n      scene.overrideMaterial = initialOverrideMaterial;\n      scene.background = initialBackground;\n    }\n  });\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    map: renderTarget.texture,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","fref","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","color","depthWrite","renderOrder","props","ref","useRef","scene","state","gl","shadowCamera","Array","isArray","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","useMemo","WebGLRenderTarget","texture","generateMipmaps","PlaneGeometry","rotateX","Math","PI","Mesh","MeshDepthMaterial","depthTest","onBeforeCompile","shader","uniforms","ucolor","value","Color","fragmentShader","replace","ShaderMaterial","blurShadows","visible","material","tDiffuse","h","setRenderTarget","render","current","v","count","initialBackground","initialOverrideMaterial","background","overrideMaterial","useImperativeHandle","createElement","geometry","rotation","transparent","map","args"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@react-three/drei/core/ContactShadows.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, fref) => {\n  const ref = React.useRef(null);\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color)\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', // Colorize the shadow, multiply by the falloff so that the center can remain darker\n      'vec4( ucolor * fragCoordZ * 2.0, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  let initialBackground;\n  let initialOverrideMaterial;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      count++;\n      initialBackground = scene.background;\n      initialOverrideMaterial = scene.overrideMaterial;\n      ref.current.visible = false;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      ref.current.visible = true;\n      scene.overrideMaterial = initialOverrideMaterial;\n      scene.background = initialBackground;\n    }\n  });\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    map: renderTarget.texture,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}