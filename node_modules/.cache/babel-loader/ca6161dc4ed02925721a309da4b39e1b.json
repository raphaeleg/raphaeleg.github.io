{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  _tDepth = {\n    value: null\n  };\n  _distortionMap = {\n    value: null\n  };\n  _tDiffuse = {\n    value: null\n  };\n  _tDiffuseBlur = {\n    value: null\n  };\n  _textureMatrix = {\n    value: null\n  };\n  _hasBlur = {\n    value: false\n  };\n  _mirror = {\n    value: 0.0\n  };\n  _mixBlur = {\n    value: 0.0\n  };\n  _blurStrength = {\n    value: 0.5\n  };\n  _minDepthThreshold = {\n    value: 0.9\n  };\n  _maxDepthThreshold = {\n    value: 1\n  };\n  _depthScale = {\n    value: 0\n  };\n  _depthToBlurRatioBias = {\n    value: 0.25\n  };\n  _distortion = {\n    value: 1\n  };\n  _mixContrast = {\n    value: 1.0\n  };\n\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(parameters);\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["MeshStandardMaterial","MeshReflectorMaterial","_tDepth","value","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","constructor","parameters","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","mixContrast","vertexShader","replace","fragmentShader","v"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  _tDepth = {\n    value: null\n  };\n  _distortionMap = {\n    value: null\n  };\n  _tDiffuse = {\n    value: null\n  };\n  _tDiffuseBlur = {\n    value: null\n  };\n  _textureMatrix = {\n    value: null\n  };\n  _hasBlur = {\n    value: false\n  };\n  _mirror = {\n    value: 0.0\n  };\n  _mixBlur = {\n    value: 0.0\n  };\n  _blurStrength = {\n    value: 0.5\n  };\n  _minDepthThreshold = {\n    value: 0.9\n  };\n  _maxDepthThreshold = {\n    value: 1\n  };\n  _depthScale = {\n    value: 0\n  };\n  _depthToBlurRatioBias = {\n    value: 0.25\n  };\n  _distortion = {\n    value: 1\n  };\n  _mixContrast = {\n    value: 1.0\n  };\n\n  constructor(parameters = {}) {\n    super(parameters);\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}