{"ast":null,"code":"import _objectWithoutProperties from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"args\", \"cellColor\", \"sectionColor\", \"cellSize\", \"sectionSize\", \"followCamera\", \"infiniteGrid\", \"fadeDistance\", \"fadeStrength\", \"cellThickness\", \"sectionThickness\", \"side\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nvar GridMaterial = shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: new THREE.Color(),\n  sectionColor: new THREE.Color(),\n  infiniteGrid: false,\n  followCamera: false\n},\n/* glsl */\n\"\\n    varying vec3 worldPosition;\\n    uniform float fadeDistance;\\n    uniform bool infiniteGrid;\\n    uniform bool followCamera;\\n\\n    void main() {\\n      worldPosition = position.xzy;\\n      if (infiniteGrid) worldPosition *= 1.0 + fadeDistance;\\n      if (followCamera) worldPosition.xz +=cameraPosition.xz;\\n\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(worldPosition, 1.0);\\n    }\\n  \",\n/* glsl */\n\"\\n    varying vec3 worldPosition;\\n    uniform float cellSize;\\n    uniform float sectionSize;\\n    uniform vec3 cellColor;\\n    uniform vec3 sectionColor;\\n    uniform float fadeDistance;\\n    uniform float fadeStrength;\\n    uniform float cellThickness;\\n    uniform float sectionThickness;\\n\\n    float getGrid(float size, float thickness) {\\n      vec2 r = worldPosition.xz / size;\\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\\n      float line = min(grid.x, grid.y) + 1. - thickness;\\n      return 1.0 - min(line, 1.);\\n    }\\n\\n    void main() {\\n      float g1 = getGrid(cellSize, cellThickness);\\n      float g2 = getGrid(sectionSize, sectionThickness);\\n\\n      float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);\\n      vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));\\n\\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));\\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\\n      if (gl_FragColor.a <= 0.0) discard;\\n\\n      #include <tonemapping_fragment>\\n      #include <encodings_fragment>\\n    }\\n  \");\nvar Grid = /*#__PURE__*/React.forwardRef(function (_ref, fRef) {\n  var args = _ref.args,\n      _ref$cellColor = _ref.cellColor,\n      cellColor = _ref$cellColor === void 0 ? '#000000' : _ref$cellColor,\n      _ref$sectionColor = _ref.sectionColor,\n      sectionColor = _ref$sectionColor === void 0 ? '#2080ff' : _ref$sectionColor,\n      _ref$cellSize = _ref.cellSize,\n      cellSize = _ref$cellSize === void 0 ? 0.5 : _ref$cellSize,\n      _ref$sectionSize = _ref.sectionSize,\n      sectionSize = _ref$sectionSize === void 0 ? 1 : _ref$sectionSize,\n      _ref$followCamera = _ref.followCamera,\n      followCamera = _ref$followCamera === void 0 ? false : _ref$followCamera,\n      _ref$infiniteGrid = _ref.infiniteGrid,\n      infiniteGrid = _ref$infiniteGrid === void 0 ? false : _ref$infiniteGrid,\n      _ref$fadeDistance = _ref.fadeDistance,\n      fadeDistance = _ref$fadeDistance === void 0 ? 100 : _ref$fadeDistance,\n      _ref$fadeStrength = _ref.fadeStrength,\n      fadeStrength = _ref$fadeStrength === void 0 ? 1 : _ref$fadeStrength,\n      _ref$cellThickness = _ref.cellThickness,\n      cellThickness = _ref$cellThickness === void 0 ? 0.5 : _ref$cellThickness,\n      _ref$sectionThickness = _ref.sectionThickness,\n      sectionThickness = _ref$sectionThickness === void 0 ? 1 : _ref$sectionThickness,\n      _ref$side = _ref.side,\n      side = _ref$side === void 0 ? THREE.BackSide : _ref$side,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  extend({\n    GridMaterial: GridMaterial\n  });\n  var uniforms1 = {\n    cellSize: cellSize,\n    sectionSize: sectionSize,\n    cellColor: cellColor,\n    sectionColor: sectionColor,\n    cellThickness: cellThickness,\n    sectionThickness: sectionThickness\n  };\n  var uniforms2 = {\n    fadeDistance: fadeDistance,\n    fadeStrength: fadeStrength,\n    infiniteGrid: infiniteGrid,\n    followCamera: followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: fRef,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: side\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\nexport { Grid };","map":{"version":3,"names":["_extends","React","THREE","extend","shaderMaterial","GridMaterial","cellSize","sectionSize","fadeDistance","fadeStrength","cellThickness","sectionThickness","cellColor","Color","sectionColor","infiniteGrid","followCamera","Grid","forwardRef","fRef","args","side","BackSide","props","uniforms1","uniforms2","createElement","ref","frustumCulled","transparent"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@react-three/drei/core/Grid.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\n\nconst GridMaterial = shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: new THREE.Color(),\n  sectionColor: new THREE.Color(),\n  infiniteGrid: false,\n  followCamera: false\n},\n/* glsl */\n`\n    varying vec3 worldPosition;\n    uniform float fadeDistance;\n    uniform bool infiniteGrid;\n    uniform bool followCamera;\n\n    void main() {\n      worldPosition = position.xzy;\n      if (infiniteGrid) worldPosition *= 1.0 + fadeDistance;\n      if (followCamera) worldPosition.xz +=cameraPosition.xz;\n\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(worldPosition, 1.0);\n    }\n  `,\n/* glsl */\n`\n    varying vec3 worldPosition;\n    uniform float cellSize;\n    uniform float sectionSize;\n    uniform vec3 cellColor;\n    uniform vec3 sectionColor;\n    uniform float fadeDistance;\n    uniform float fadeStrength;\n    uniform float cellThickness;\n    uniform float sectionThickness;\n\n    float getGrid(float size, float thickness) {\n      vec2 r = worldPosition.xz / size;\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n      float line = min(grid.x, grid.y) + 1. - thickness;\n      return 1.0 - min(line, 1.);\n    }\n\n    void main() {\n      float g1 = getGrid(cellSize, cellThickness);\n      float g2 = getGrid(sectionSize, sectionThickness);\n\n      float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);\n      vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));\n\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n      if (gl_FragColor.a <= 0.0) discard;\n\n      #include <tonemapping_fragment>\n      #include <encodings_fragment>\n    }\n  `);\nconst Grid = /*#__PURE__*/React.forwardRef(({\n  args,\n  cellColor = '#000000',\n  sectionColor = '#2080ff',\n  cellSize = 0.5,\n  sectionSize = 1,\n  followCamera = false,\n  infiniteGrid = false,\n  fadeDistance = 100,\n  fadeStrength = 1,\n  cellThickness = 0.5,\n  sectionThickness = 1,\n  side = THREE.BackSide,\n  ...props\n}, fRef) => {\n  extend({\n    GridMaterial\n  });\n  const uniforms1 = {\n    cellSize,\n    sectionSize,\n    cellColor,\n    sectionColor,\n    cellThickness,\n    sectionThickness\n  };\n  const uniforms2 = {\n    fadeDistance,\n    fadeStrength,\n    infiniteGrid,\n    followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: fRef,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: side\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\n\nexport { Grid };\n"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,IAAMC,YAAY,GAAGD,cAAc,CAAC;EAClCE,QAAQ,EAAE,GADwB;EAElCC,WAAW,EAAE,CAFqB;EAGlCC,YAAY,EAAE,GAHoB;EAIlCC,YAAY,EAAE,CAJoB;EAKlCC,aAAa,EAAE,GALmB;EAMlCC,gBAAgB,EAAE,CANgB;EAOlCC,SAAS,EAAE,IAAIV,KAAK,CAACW,KAAV,EAPuB;EAQlCC,YAAY,EAAE,IAAIZ,KAAK,CAACW,KAAV,EARoB;EASlCE,YAAY,EAAE,KAToB;EAUlCC,YAAY,EAAE;AAVoB,CAAD;AAYnC;AAZmC;AA2BnC;AA3BmC,wmCAAnC;AA6DA,IAAMC,IAAI,GAAG,aAAahB,KAAK,CAACiB,UAAN,CAAiB,gBAcxCC,IAdwC,EAc/B;EAAA,IAbVC,IAaU,QAbVA,IAaU;EAAA,0BAZVR,SAYU;EAAA,IAZVA,SAYU,+BAZE,SAYF;EAAA,6BAXVE,YAWU;EAAA,IAXVA,YAWU,kCAXK,SAWL;EAAA,yBAVVR,QAUU;EAAA,IAVVA,QAUU,8BAVC,GAUD;EAAA,4BATVC,WASU;EAAA,IATVA,WASU,iCATI,CASJ;EAAA,6BARVS,YAQU;EAAA,IARVA,YAQU,kCARK,KAQL;EAAA,6BAPVD,YAOU;EAAA,IAPVA,YAOU,kCAPK,KAOL;EAAA,6BANVP,YAMU;EAAA,IANVA,YAMU,kCANK,GAML;EAAA,6BALVC,YAKU;EAAA,IALVA,YAKU,kCALK,CAKL;EAAA,8BAJVC,aAIU;EAAA,IAJVA,aAIU,mCAJM,GAIN;EAAA,iCAHVC,gBAGU;EAAA,IAHVA,gBAGU,sCAHS,CAGT;EAAA,qBAFVU,IAEU;EAAA,IAFVA,IAEU,0BAFHnB,KAAK,CAACoB,QAEH;EAAA,IADPC,KACO;;EACVpB,MAAM,CAAC;IACLE,YAAY,EAAZA;EADK,CAAD,CAAN;EAGA,IAAMmB,SAAS,GAAG;IAChBlB,QAAQ,EAARA,QADgB;IAEhBC,WAAW,EAAXA,WAFgB;IAGhBK,SAAS,EAATA,SAHgB;IAIhBE,YAAY,EAAZA,YAJgB;IAKhBJ,aAAa,EAAbA,aALgB;IAMhBC,gBAAgB,EAAhBA;EANgB,CAAlB;EAQA,IAAMc,SAAS,GAAG;IAChBjB,YAAY,EAAZA,YADgB;IAEhBC,YAAY,EAAZA,YAFgB;IAGhBM,YAAY,EAAZA,YAHgB;IAIhBC,YAAY,EAAZA;EAJgB,CAAlB;EAMA,OAAO,aAAaf,KAAK,CAACyB,aAAN,CAAoB,MAApB,EAA4B1B,QAAQ,CAAC;IACvD2B,GAAG,EAAER,IADkD;IAEvDS,aAAa,EAAE;EAFwC,CAAD,EAGrDL,KAHqD,CAApC,EAGT,aAAatB,KAAK,CAACyB,aAAN,CAAoB,cAApB,EAAoC1B,QAAQ,CAAC;IACnE6B,WAAW,EAAE,IADsD;IAEnE,0BAA0B,IAFyC;IAGnER,IAAI,EAAEA;EAH6D,CAAD,EAIjEG,SAJiE,EAItDC,SAJsD,CAA5C,CAHJ,EAOO,aAAaxB,KAAK,CAACyB,aAAN,CAAoB,eAApB,EAAqC;IAC3EN,IAAI,EAAEA;EADqE,CAArC,CAPpB,CAApB;AAUD,CA1CyB,CAA1B;AA4CA,SAASH,IAAT"},"metadata":{},"sourceType":"module"}