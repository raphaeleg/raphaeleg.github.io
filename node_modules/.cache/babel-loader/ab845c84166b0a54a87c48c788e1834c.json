{"ast":null,"code":"import _classCallCheck from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Mesh, SphereGeometry, MeshBasicMaterial } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { MotionControllerConstants, fetchProfile, MotionController } from '../libs/MotionControllers.js';\nvar DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nvar DEFAULT_PROFILE = 'generic-trigger';\n\nvar applyEnvironmentMap = function applyEnvironmentMap(envMap, obj) {\n  obj.traverse(function (child) {\n    if (child instanceof Mesh && 'envMap' in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\n\nvar XRControllerModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRControllerModel, _Object3D);\n\n  var _super = _createSuper(XRControllerModel);\n\n  function XRControllerModel() {\n    var _this;\n\n    _classCallCheck(this, XRControllerModel);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"envMap\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"motionController\", void 0);\n\n    _this.motionController = null;\n    _this.envMap = null;\n    return _this;\n  }\n\n  _createClass(XRControllerModel, [{\n    key: \"setEnvironmentMap\",\n    value: function setEnvironmentMap(envMap) {\n      if (this.envMap == envMap) {\n        return this;\n      }\n\n      this.envMap = envMap;\n      applyEnvironmentMap(this.envMap, this);\n      return this;\n    }\n    /**\n     * Polls data from the XRInputSource and updates the model's components to match\n     * the real world data\n     */\n\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRControllerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n      this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n      Object.values(this.motionController.components).forEach(function (component) {\n        // Update node data based on the visual responses' current states\n        Object.values(component.visualResponses).forEach(function (visualResponse) {\n          var valueNode = visualResponse.valueNode,\n              minNode = visualResponse.minNode,\n              maxNode = visualResponse.maxNode,\n              value = visualResponse.value,\n              valueNodeProperty = visualResponse.valueNodeProperty; // Skip if the visual response node is not found. No error is needed,\n          // because it will have been reported at load time.\n\n          if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n          if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === 'boolean') {\n            valueNode.visible = value;\n          } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === 'number') {\n            valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n            valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n          }\n        });\n      });\n    }\n  }]);\n\n  return XRControllerModel;\n}(Object3D);\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(function (component) {\n    var type = component.type,\n        touchPointNodeName = component.touchPointNodeName,\n        visualResponses = component.visualResponses;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        var sphereGeometry = new SphereGeometry(0.001);\n        var material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        var sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(\"Could not find touch dot, \".concat(component.touchPointNodeName, \", in touchpad component \").concat(component.id));\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(function (visualResponse) {\n      var valueNodeName = visualResponse.valueNodeName,\n          minNodeName = visualResponse.minNodeName,\n          maxNodeName = visualResponse.maxNodeName,\n          valueNodeProperty = visualResponse.valueNodeProperty; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(\"Could not find \".concat(minNodeName, \" in the model\"));\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(\"Could not find \".concat(maxNodeName, \" in the model\"));\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(\"Could not find \".concat(valueNodeName, \" in the model\"));\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nvar XRControllerModelFactory = /*#__PURE__*/function () {\n  function XRControllerModelFactory() {\n    var gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, XRControllerModelFactory);\n\n    _defineProperty(this, \"gltfLoader\", void 0);\n\n    _defineProperty(this, \"path\", void 0);\n\n    _defineProperty(this, \"_assetCache\", void 0);\n\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  _createClass(XRControllerModelFactory, [{\n    key: \"createControllerModel\",\n    value: function createControllerModel(controller) {\n      var _this2 = this;\n\n      var controllerModel = new XRControllerModel();\n      var scene = null;\n\n      var onConnected = function onConnected(event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n        fetchProfile(xrInputSource, _this2.path, DEFAULT_PROFILE).then(function (_ref) {\n          var profile = _ref.profile,\n              assetPath = _ref.assetPath;\n\n          if (!assetPath) {\n            throw new Error('no asset path');\n          }\n\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n          var assetUrl = controllerModel.motionController.assetUrl;\n          var cachedAsset = _this2._assetCache[assetUrl];\n\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          } else {\n            if (!_this2.gltfLoader) {\n              throw new Error('GLTFLoader not set.');\n            }\n\n            _this2.gltfLoader.setPath('');\n\n            _this2.gltfLoader.load(controllerModel.motionController.assetUrl, function (asset) {\n              if (!controllerModel.motionController) {\n                console.warn('motionController gone while gltf load, bailing...');\n                return;\n              }\n\n              _this2._assetCache[assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            }, null, function () {\n              throw new Error(\"Asset \".concat(assetUrl, \" missing or malformed.\"));\n            });\n          }\n        }).catch(function (err) {\n          console.warn(err);\n        });\n      };\n\n      controller.addEventListener('connected', onConnected);\n\n      var onDisconnected = function onDisconnected() {\n        controller.removeEventListener('connected', onConnected);\n        controller.removeEventListener('disconnected', onDisconnected);\n        controllerModel.motionController = null;\n\n        if (scene) {\n          controllerModel.remove(scene);\n        }\n\n        scene = null;\n      };\n\n      controller.addEventListener('disconnected', onDisconnected);\n      return controllerModel;\n    }\n  }]);\n\n  return XRControllerModelFactory;\n}();\n\nexport { XRControllerModelFactory };","map":{"version":3,"names":["_defineProperty","Object3D","Mesh","SphereGeometry","MeshBasicMaterial","GLTFLoader","MotionControllerConstants","fetchProfile","MotionController","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","applyEnvironmentMap","envMap","obj","traverse","child","material","needsUpdate","XRControllerModel","motionController","force","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","value","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","path","_assetCache","controller","onConnected","event","xrInputSource","data","targetRayMode","gamepad","then","profile","assetPath","Error","assetUrl","cachedAsset","clone","setPath","load","asset","catch","err","addEventListener","onDisconnected","removeEventListener","remove"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Mesh, SphereGeometry, MeshBasicMaterial } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { MotionControllerConstants, fetchProfile, MotionController } from '../libs/MotionControllers.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse(child => {\n    if (child instanceof Mesh && 'envMap' in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"envMap\", void 0);\n\n    _defineProperty(this, \"motionController\", void 0);\n\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === 'boolean') {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === 'number') {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    _defineProperty(this, \"gltfLoader\", void 0);\n\n    _defineProperty(this, \"path\", void 0);\n\n    _defineProperty(this, \"_assetCache\", void 0);\n\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n\n    const onConnected = event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        if (!assetPath) {\n          throw new Error('no asset path');\n        }\n\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            if (!controllerModel.motionController) {\n              console.warn('motionController gone while gltf load, bailing...');\n              return;\n            }\n\n            this._assetCache[assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    };\n\n    controller.addEventListener('connected', onConnected);\n\n    const onDisconnected = () => {\n      controller.removeEventListener('connected', onConnected);\n      controller.removeEventListener('disconnected', onDisconnected);\n      controllerModel.motionController = null;\n\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n\n      scene = null;\n    };\n\n    controller.addEventListener('disconnected', onDisconnected);\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}