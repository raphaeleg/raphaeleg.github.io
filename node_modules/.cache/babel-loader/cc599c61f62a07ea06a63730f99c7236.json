{"ast":null,"code":"import _classCallCheck from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Line3, Plane, Triangle } from 'three';\n/**\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n */\n\nvar Visible = 0;\nvar Deleted = 1;\n\nvar _v1 = new Vector3();\n\nvar _line3 = new Line3();\n\nvar _plane = new Plane();\n\nvar _closestPoint = new Vector3();\n\nvar _triangle = new Triangle();\n\nvar ConvexHull = /*#__PURE__*/function () {\n  function ConvexHull() {\n    _classCallCheck(this, ConvexHull);\n\n    this.tolerance = -1;\n    this.faces = []; // the generated faces of the convex hull\n\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\n    // the vertex lists work as follows:\n    //\n    // let 'a' and 'b' be 'Face' instances\n    // let 'v' be points wrapped as instance of 'Vertex'\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n\n    this.assigned = new VertexList();\n    this.unassigned = new VertexList();\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\n  }\n\n  _createClass(ConvexHull, [{\n    key: \"setFromPoints\",\n    value: function setFromPoints(points) {\n      // The algorithm needs at least four points.\n      if (points.length >= 4) {\n        this.makeEmpty();\n\n        for (var i = 0, l = points.length; i < l; i++) {\n          this.vertices.push(new VertexNode(points[i]));\n        }\n\n        this.compute();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setFromObject\",\n    value: function setFromObject(object) {\n      var points = [];\n      object.updateMatrixWorld(true);\n      object.traverse(function (node) {\n        var geometry = node.geometry;\n\n        if (geometry !== undefined) {\n          if (geometry.isGeometry) {\n            console.error('THREE.ConvexHull no longer supports Geometry. Use THREE.BufferGeometry instead.');\n            return;\n          } else if (geometry.isBufferGeometry) {\n            var attribute = geometry.attributes.position;\n\n            if (attribute !== undefined) {\n              for (var i = 0, l = attribute.count; i < l; i++) {\n                var point = new Vector3();\n                point.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n                points.push(point);\n              }\n            }\n          }\n        }\n      });\n      return this.setFromPoints(points);\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      var faces = this.faces;\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i]; // compute signed distance and check on what half space the point lies\n\n        if (face.distanceToPoint(point) > this.tolerance) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"intersectRay\",\n    value: function intersectRay(ray, target) {\n      // based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n      var faces = this.faces;\n      var tNear = -Infinity;\n      var tFar = Infinity;\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i]; // interpret faces as planes for the further computation\n\n        var vN = face.distanceToPoint(ray.origin);\n        var vD = face.normal.dot(ray.direction); // if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n        // the ray is turned away or parallel to the plane, there is no intersection\n\n        if (vN > 0 && vD >= 0) return null; // compute the distance from the rayâ€™s origin to the intersection with the plane\n\n        var t = vD !== 0 ? -vN / vD : 0; // only proceed if the distance is positive. a negative distance means the intersection point\n        // lies \"behind\" the origin\n\n        if (t <= 0) continue; // now categorized plane as front-facing or back-facing\n\n        if (vD > 0) {\n          //  plane faces away from the ray, so this plane is a back-face\n          tFar = Math.min(t, tFar);\n        } else {\n          // front-face\n          tNear = Math.max(t, tNear);\n        }\n\n        if (tNear > tFar) {\n          // if tNear ever is greater than tFar, the ray must miss the convex hull\n          return null;\n        }\n      } // evaluate intersection point\n      // always try tNear first since its the closer intersection point\n\n\n      if (tNear !== -Infinity) {\n        ray.at(tNear, target);\n      } else {\n        ray.at(tFar, target);\n      }\n\n      return target;\n    }\n  }, {\n    key: \"intersectsRay\",\n    value: function intersectsRay(ray) {\n      return this.intersectRay(ray, _v1) !== null;\n    }\n  }, {\n    key: \"makeEmpty\",\n    value: function makeEmpty() {\n      this.faces = [];\n      this.vertices = [];\n      return this;\n    } // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n  }, {\n    key: \"addVertexToFace\",\n    value: function addVertexToFace(vertex, face) {\n      vertex.face = face;\n\n      if (face.outside === null) {\n        this.assigned.append(vertex);\n      } else {\n        this.assigned.insertBefore(face.outside, vertex);\n      }\n\n      face.outside = vertex;\n      return this;\n    } // Removes a vertex from the 'assigned' list of vertices and from the given face\n\n  }, {\n    key: \"removeVertexFromFace\",\n    value: function removeVertexFromFace(vertex, face) {\n      if (vertex === face.outside) {\n        // fix face.outside link\n        if (vertex.next !== null && vertex.next.face === face) {\n          // face has at least 2 outside vertices, move the 'outside' reference\n          face.outside = vertex.next;\n        } else {\n          // vertex was the only outside vertex that face had\n          face.outside = null;\n        }\n      }\n\n      this.assigned.remove(vertex);\n      return this;\n    } // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n  }, {\n    key: \"removeAllVerticesFromFace\",\n    value: function removeAllVerticesFromFace(face) {\n      if (face.outside !== null) {\n        // reference to the first and last vertex of this face\n        var start = face.outside;\n        var end = face.outside;\n\n        while (end.next !== null && end.next.face === face) {\n          end = end.next;\n        }\n\n        this.assigned.removeSubList(start, end); // fix references\n\n        start.prev = end.next = null;\n        face.outside = null;\n        return start;\n      }\n    } // Removes all the visible vertices that 'face' is able to see\n\n  }, {\n    key: \"deleteFaceVertices\",\n    value: function deleteFaceVertices(face, absorbingFace) {\n      var faceVertices = this.removeAllVerticesFromFace(face);\n\n      if (faceVertices !== undefined) {\n        if (absorbingFace === undefined) {\n          // mark the vertices to be reassigned to some other face\n          this.unassigned.appendChain(faceVertices);\n        } else {\n          // if there's an absorbing face try to assign as many vertices as possible to it\n          var vertex = faceVertices;\n\n          do {\n            // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n            // will be changed by upcoming method calls\n            var nextVertex = vertex.next;\n            var distance = absorbingFace.distanceToPoint(vertex.point); // check if 'vertex' is able to see 'absorbingFace'\n\n            if (distance > this.tolerance) {\n              this.addVertexToFace(vertex, absorbingFace);\n            } else {\n              this.unassigned.append(vertex);\n            } // now assign next vertex\n\n\n            vertex = nextVertex;\n          } while (vertex !== null);\n        }\n      }\n\n      return this;\n    } // Reassigns as many vertices as possible from the unassigned list to the new faces\n\n  }, {\n    key: \"resolveUnassignedPoints\",\n    value: function resolveUnassignedPoints(newFaces) {\n      if (this.unassigned.isEmpty() === false) {\n        var vertex = this.unassigned.first();\n\n        do {\n          // buffer 'next' reference, see .deleteFaceVertices()\n          var nextVertex = vertex.next;\n          var maxDistance = this.tolerance;\n          var maxFace = null;\n\n          for (var i = 0; i < newFaces.length; i++) {\n            var face = newFaces[i];\n\n            if (face.mark === Visible) {\n              var distance = face.distanceToPoint(vertex.point);\n\n              if (distance > maxDistance) {\n                maxDistance = distance;\n                maxFace = face;\n              }\n\n              if (maxDistance > 1000 * this.tolerance) break;\n            }\n          } // 'maxFace' can be null e.g. if there are identical vertices\n\n\n          if (maxFace !== null) {\n            this.addVertexToFace(vertex, maxFace);\n          }\n\n          vertex = nextVertex;\n        } while (vertex !== null);\n      }\n\n      return this;\n    } // Computes the extremes of a simplex which will be the initial hull\n\n  }, {\n    key: \"computeExtremes\",\n    value: function computeExtremes() {\n      var min = new Vector3();\n      var max = new Vector3();\n      var minVertices = [];\n      var maxVertices = []; // initially assume that the first vertex is the min/max\n\n      for (var i = 0; i < 3; i++) {\n        minVertices[i] = maxVertices[i] = this.vertices[0];\n      }\n\n      min.copy(this.vertices[0].point);\n      max.copy(this.vertices[0].point); // compute the min/max vertex on all six directions\n\n      for (var _i = 0, l = this.vertices.length; _i < l; _i++) {\n        var vertex = this.vertices[_i];\n        var point = vertex.point; // update the min coordinates\n\n        for (var j = 0; j < 3; j++) {\n          if (point.getComponent(j) < min.getComponent(j)) {\n            min.setComponent(j, point.getComponent(j));\n            minVertices[j] = vertex;\n          }\n        } // update the max coordinates\n\n\n        for (var _j = 0; _j < 3; _j++) {\n          if (point.getComponent(_j) > max.getComponent(_j)) {\n            max.setComponent(_j, point.getComponent(_j));\n            maxVertices[_j] = vertex;\n          }\n        }\n      } // use min/max vectors to compute an optimal epsilon\n\n\n      this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));\n      return {\n        min: minVertices,\n        max: maxVertices\n      };\n    } // Computes the initial simplex assigning to its faces all the points\n    // that are candidates to form part of the hull\n\n  }, {\n    key: \"computeInitialHull\",\n    value: function computeInitialHull() {\n      var vertices = this.vertices;\n      var extremes = this.computeExtremes();\n      var min = extremes.min;\n      var max = extremes.max; // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n      // (max.x - min.x)\n      // (max.y - min.y)\n      // (max.z - min.z)\n\n      var maxDistance = 0;\n      var index = 0;\n\n      for (var i = 0; i < 3; i++) {\n        var distance = max[i].point.getComponent(i) - min[i].point.getComponent(i);\n\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          index = i;\n        }\n      }\n\n      var v0 = min[index];\n      var v1 = max[index];\n      var v2;\n      var v3; // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n      maxDistance = 0;\n\n      _line3.set(v0.point, v1.point);\n\n      for (var _i2 = 0, l = this.vertices.length; _i2 < l; _i2++) {\n        var vertex = vertices[_i2];\n\n        if (vertex !== v0 && vertex !== v1) {\n          _line3.closestPointToPoint(vertex.point, true, _closestPoint);\n\n          var _distance = _closestPoint.distanceToSquared(vertex.point);\n\n          if (_distance > maxDistance) {\n            maxDistance = _distance;\n            v2 = vertex;\n          }\n        }\n      } // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n\n      maxDistance = -1;\n\n      _plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\n\n      for (var _i3 = 0, _l = this.vertices.length; _i3 < _l; _i3++) {\n        var _vertex = vertices[_i3];\n\n        if (_vertex !== v0 && _vertex !== v1 && _vertex !== v2) {\n          var _distance2 = Math.abs(_plane.distanceToPoint(_vertex.point));\n\n          if (_distance2 > maxDistance) {\n            maxDistance = _distance2;\n            v3 = _vertex;\n          }\n        }\n      }\n\n      var faces = [];\n\n      if (_plane.distanceToPoint(v3.point) < 0) {\n        // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n        faces.push(Face.create(v0, v1, v2), Face.create(v3, v1, v0), Face.create(v3, v2, v1), Face.create(v3, v0, v2)); // set the twin edge\n\n        for (var _i4 = 0; _i4 < 3; _i4++) {\n          var j = (_i4 + 1) % 3; // join face[ i ] i > 0, with the first face\n\n          faces[_i4 + 1].getEdge(2).setTwin(faces[0].getEdge(j)); // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n\n          faces[_i4 + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\n        }\n      } else {\n        // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n        faces.push(Face.create(v0, v2, v1), Face.create(v3, v0, v1), Face.create(v3, v1, v2), Face.create(v3, v2, v0)); // set the twin edge\n\n        for (var _i5 = 0; _i5 < 3; _i5++) {\n          var _j2 = (_i5 + 1) % 3; // join face[ i ] i > 0, with the first face\n\n\n          faces[_i5 + 1].getEdge(2).setTwin(faces[0].getEdge((3 - _i5) % 3)); // join face[ i ] with face[ i + 1 ]\n\n\n          faces[_i5 + 1].getEdge(0).setTwin(faces[_j2 + 1].getEdge(1));\n        }\n      } // the initial hull is the tetrahedron\n\n\n      for (var _i6 = 0; _i6 < 4; _i6++) {\n        this.faces.push(faces[_i6]);\n      } // initial assignment of vertices to the faces of the tetrahedron\n\n\n      for (var _i7 = 0, _l2 = vertices.length; _i7 < _l2; _i7++) {\n        var _vertex2 = vertices[_i7];\n\n        if (_vertex2 !== v0 && _vertex2 !== v1 && _vertex2 !== v2 && _vertex2 !== v3) {\n          maxDistance = this.tolerance;\n          var maxFace = null;\n\n          for (var _j3 = 0; _j3 < 4; _j3++) {\n            var _distance3 = this.faces[_j3].distanceToPoint(_vertex2.point);\n\n            if (_distance3 > maxDistance) {\n              maxDistance = _distance3;\n              maxFace = this.faces[_j3];\n            }\n          }\n\n          if (maxFace !== null) {\n            this.addVertexToFace(_vertex2, maxFace);\n          }\n        }\n      }\n\n      return this;\n    } // Removes inactive faces\n\n  }, {\n    key: \"reindexFaces\",\n    value: function reindexFaces() {\n      var activeFaces = [];\n\n      for (var i = 0; i < this.faces.length; i++) {\n        var face = this.faces[i];\n\n        if (face.mark === Visible) {\n          activeFaces.push(face);\n        }\n      }\n\n      this.faces = activeFaces;\n      return this;\n    } // Finds the next vertex to create faces with the current hull\n\n  }, {\n    key: \"nextVertexToAdd\",\n    value: function nextVertexToAdd() {\n      // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n      if (this.assigned.isEmpty() === false) {\n        var eyeVertex,\n            maxDistance = 0; // grap the first available face and start with the first visible vertex of that face\n\n        var eyeFace = this.assigned.first().face;\n        var vertex = eyeFace.outside; // now calculate the farthest vertex that face can see\n\n        do {\n          var distance = eyeFace.distanceToPoint(vertex.point);\n\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            eyeVertex = vertex;\n          }\n\n          vertex = vertex.next;\n        } while (vertex !== null && vertex.face === eyeFace);\n\n        return eyeVertex;\n      }\n    } // Computes a chain of half edges in CCW order called the 'horizon'.\n    // For an edge to be part of the horizon it must join a face that can see\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\n\n  }, {\n    key: \"computeHorizon\",\n    value: function computeHorizon(eyePoint, crossEdge, face, horizon) {\n      // moves face's vertices to the 'unassigned' vertex list\n      this.deleteFaceVertices(face);\n      face.mark = Deleted;\n      var edge;\n\n      if (crossEdge === null) {\n        edge = crossEdge = face.getEdge(0);\n      } else {\n        // start from the next edge since 'crossEdge' was already analyzed\n        // (actually 'crossEdge.twin' was the edge who called this method recursively)\n        edge = crossEdge.next;\n      }\n\n      do {\n        var twinEdge = edge.twin;\n        var oppositeFace = twinEdge.face;\n\n        if (oppositeFace.mark === Visible) {\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\n            // the opposite face can see the vertex, so proceed with next edge\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\n          } else {\n            // the opposite face can't see the vertex, so this edge is part of the horizon\n            horizon.push(edge);\n          }\n        }\n\n        edge = edge.next;\n      } while (edge !== crossEdge);\n\n      return this;\n    } // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n  }, {\n    key: \"addAdjoiningFace\",\n    value: function addAdjoiningFace(eyeVertex, horizonEdge) {\n      // all the half edges are created in ccw order thus the face is always pointing outside the hull\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n      this.faces.push(face); // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n      face.getEdge(-1).setTwin(horizonEdge.twin);\n      return face.getEdge(0); // the half edge whose vertex is the eyeVertex\n    } //  Adds 'horizon.length' faces to the hull, each face will be linked with the\n    //  horizon opposite face and the face on the left/right\n\n  }, {\n    key: \"addNewFaces\",\n    value: function addNewFaces(eyeVertex, horizon) {\n      this.newFaces = [];\n      var firstSideEdge = null;\n      var previousSideEdge = null;\n\n      for (var i = 0; i < horizon.length; i++) {\n        var horizonEdge = horizon[i]; // returns the right side edge\n\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n\n        if (firstSideEdge === null) {\n          firstSideEdge = sideEdge;\n        } else {\n          // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n          sideEdge.next.setTwin(previousSideEdge);\n        }\n\n        this.newFaces.push(sideEdge.face);\n        previousSideEdge = sideEdge;\n      } // perform final join of new faces\n\n\n      firstSideEdge.next.setTwin(previousSideEdge);\n      return this;\n    } // Adds a vertex to the hull\n\n  }, {\n    key: \"addVertexToHull\",\n    value: function addVertexToHull(eyeVertex) {\n      var horizon = [];\n      this.unassigned.clear(); // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n      this.addNewFaces(eyeVertex, horizon); // reassign 'unassigned' vertices to the new faces\n\n      this.resolveUnassignedPoints(this.newFaces);\n      return this;\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.assigned.clear();\n      this.unassigned.clear();\n      this.newFaces = [];\n      return this;\n    }\n  }, {\n    key: \"compute\",\n    value: function compute() {\n      var vertex;\n      this.computeInitialHull(); // add all available vertices gradually to the hull\n\n      while ((vertex = this.nextVertexToAdd()) !== undefined) {\n        this.addVertexToHull(vertex);\n      }\n\n      this.reindexFaces();\n      this.cleanup();\n      return this;\n    }\n  }]);\n\n  return ConvexHull;\n}(); //\n\n\nvar Face = /*#__PURE__*/function () {\n  function Face() {\n    _classCallCheck(this, Face);\n\n    this.normal = new Vector3();\n    this.midpoint = new Vector3();\n    this.area = 0;\n    this.constant = 0; // signed distance from face to the origin\n\n    this.outside = null; // reference to a vertex in a vertex list this face can see\n\n    this.mark = Visible;\n    this.edge = null;\n  }\n\n  _createClass(Face, [{\n    key: \"getEdge\",\n    value: function getEdge(i) {\n      var edge = this.edge;\n\n      while (i > 0) {\n        edge = edge.next;\n        i--;\n      }\n\n      while (i < 0) {\n        edge = edge.prev;\n        i++;\n      }\n\n      return edge;\n    }\n  }, {\n    key: \"compute\",\n    value: function compute() {\n      var a = this.edge.tail();\n      var b = this.edge.head();\n      var c = this.edge.next.head();\n\n      _triangle.set(a.point, b.point, c.point);\n\n      _triangle.getNormal(this.normal);\n\n      _triangle.getMidpoint(this.midpoint);\n\n      this.area = _triangle.getArea();\n      this.constant = this.normal.dot(this.midpoint);\n      return this;\n    }\n  }, {\n    key: \"distanceToPoint\",\n    value: function distanceToPoint(point) {\n      return this.normal.dot(point) - this.constant;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(a, b, c) {\n      var face = new Face();\n      var e0 = new HalfEdge(a, face);\n      var e1 = new HalfEdge(b, face);\n      var e2 = new HalfEdge(c, face); // join edges\n\n      e0.next = e2.prev = e1;\n      e1.next = e0.prev = e2;\n      e2.next = e1.prev = e0; // main half edge reference\n\n      face.edge = e0;\n      return face.compute();\n    }\n  }]);\n\n  return Face;\n}(); // Entity for a Doubly-Connected Edge List (DCEL).\n\n\nvar HalfEdge = /*#__PURE__*/function () {\n  function HalfEdge(vertex, face) {\n    _classCallCheck(this, HalfEdge);\n\n    this.vertex = vertex;\n    this.prev = null;\n    this.next = null;\n    this.twin = null;\n    this.face = face;\n  }\n\n  _createClass(HalfEdge, [{\n    key: \"head\",\n    value: function head() {\n      return this.vertex;\n    }\n  }, {\n    key: \"tail\",\n    value: function tail() {\n      return this.prev ? this.prev.vertex : null;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      var head = this.head();\n      var tail = this.tail();\n\n      if (tail !== null) {\n        return tail.point.distanceTo(head.point);\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var head = this.head();\n      var tail = this.tail();\n\n      if (tail !== null) {\n        return tail.point.distanceToSquared(head.point);\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"setTwin\",\n    value: function setTwin(edge) {\n      this.twin = edge;\n      edge.twin = this;\n      return this;\n    }\n  }]);\n\n  return HalfEdge;\n}(); // A vertex as a double linked list node.\n\n\nvar VertexNode = /*#__PURE__*/_createClass(function VertexNode(point) {\n  _classCallCheck(this, VertexNode);\n\n  this.point = point;\n  this.prev = null;\n  this.next = null;\n  this.face = null; // the face that is able to see this vertex\n}); // A double linked list that contains vertex nodes.\n\n\nvar VertexList = /*#__PURE__*/function () {\n  function VertexList() {\n    _classCallCheck(this, VertexList);\n\n    this.head = null;\n    this.tail = null;\n  }\n\n  _createClass(VertexList, [{\n    key: \"first\",\n    value: function first() {\n      return this.head;\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      return this.tail;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      return this;\n    } // Inserts a vertex before the target vertex\n\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(target, vertex) {\n      vertex.prev = target.prev;\n      vertex.next = target;\n\n      if (vertex.prev === null) {\n        this.head = vertex;\n      } else {\n        vertex.prev.next = vertex;\n      }\n\n      target.prev = vertex;\n      return this;\n    } // Inserts a vertex after the target vertex\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(target, vertex) {\n      vertex.prev = target;\n      vertex.next = target.next;\n\n      if (vertex.next === null) {\n        this.tail = vertex;\n      } else {\n        vertex.next.prev = vertex;\n      }\n\n      target.next = vertex;\n      return this;\n    } // Appends a vertex to the end of the linked list\n\n  }, {\n    key: \"append\",\n    value: function append(vertex) {\n      if (this.head === null) {\n        this.head = vertex;\n      } else {\n        this.tail.next = vertex;\n      }\n\n      vertex.prev = this.tail;\n      vertex.next = null; // the tail has no subsequent vertex\n\n      this.tail = vertex;\n      return this;\n    } // Appends a chain of vertices where 'vertex' is the head.\n\n  }, {\n    key: \"appendChain\",\n    value: function appendChain(vertex) {\n      if (this.head === null) {\n        this.head = vertex;\n      } else {\n        this.tail.next = vertex;\n      }\n\n      vertex.prev = this.tail; // ensure that the 'tail' reference points to the last vertex of the chain\n\n      while (vertex.next !== null) {\n        vertex = vertex.next;\n      }\n\n      this.tail = vertex;\n      return this;\n    } // Removes a vertex from the linked list\n\n  }, {\n    key: \"remove\",\n    value: function remove(vertex) {\n      if (vertex.prev === null) {\n        this.head = vertex.next;\n      } else {\n        vertex.prev.next = vertex.next;\n      }\n\n      if (vertex.next === null) {\n        this.tail = vertex.prev;\n      } else {\n        vertex.next.prev = vertex.prev;\n      }\n\n      return this;\n    } // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n  }, {\n    key: \"removeSubList\",\n    value: function removeSubList(a, b) {\n      if (a.prev === null) {\n        this.head = b.next;\n      } else {\n        a.prev.next = b.next;\n      }\n\n      if (b.next === null) {\n        this.tail = a.prev;\n      } else {\n        b.next.prev = a.prev;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.head === null;\n    }\n  }]);\n\n  return VertexList;\n}();\n\nexport { ConvexHull };","map":{"version":3,"names":["Vector3","Line3","Plane","Triangle","Visible","Deleted","_v1","_line3","_plane","_closestPoint","_triangle","ConvexHull","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","points","length","makeEmpty","i","l","push","VertexNode","compute","object","updateMatrixWorld","traverse","node","geometry","undefined","isGeometry","console","error","isBufferGeometry","attribute","attributes","position","count","point","fromBufferAttribute","applyMatrix4","matrixWorld","setFromPoints","face","distanceToPoint","ray","target","tNear","Infinity","tFar","vN","origin","vD","normal","dot","direction","t","Math","min","max","at","intersectRay","vertex","outside","append","insertBefore","next","remove","start","end","removeSubList","prev","absorbingFace","faceVertices","removeAllVerticesFromFace","appendChain","nextVertex","distance","addVertexToFace","isEmpty","first","maxDistance","maxFace","mark","minVertices","maxVertices","copy","j","getComponent","setComponent","Number","EPSILON","abs","x","y","z","extremes","computeExtremes","index","v0","v1","v2","v3","set","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","Face","create","getEdge","setTwin","activeFaces","eyeVertex","eyeFace","eyePoint","crossEdge","horizon","deleteFaceVertices","edge","twinEdge","twin","oppositeFace","computeHorizon","horizonEdge","tail","head","firstSideEdge","previousSideEdge","sideEdge","addAdjoiningFace","clear","removeVertexFromFace","addNewFaces","resolveUnassignedPoints","computeInitialHull","nextVertexToAdd","addVertexToHull","reindexFaces","cleanup","midpoint","area","constant","a","b","c","getNormal","getMidpoint","getArea","e0","HalfEdge","e1","e2","distanceTo"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/three-stdlib/math/ConvexHull.js"],"sourcesContent":["import { Vector3, Line3, Plane, Triangle } from 'three';\n\n/**\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n */\n\nconst Visible = 0;\nconst Deleted = 1;\n\nconst _v1 = new Vector3();\n\nconst _line3 = new Line3();\n\nconst _plane = new Plane();\n\nconst _closestPoint = new Vector3();\n\nconst _triangle = new Triangle();\n\nclass ConvexHull {\n  constructor() {\n    this.tolerance = -1;\n    this.faces = []; // the generated faces of the convex hull\n\n    this.newFaces = []; // this array holds the faces that are generated within a single iteration\n    // the vertex lists work as follows:\n    //\n    // let 'a' and 'b' be 'Face' instances\n    // let 'v' be points wrapped as instance of 'Vertex'\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n\n    this.assigned = new VertexList();\n    this.unassigned = new VertexList();\n    this.vertices = []; // vertices of the hull (internal representation of given geometry data)\n  }\n\n  setFromPoints(points) {\n    // The algorithm needs at least four points.\n    if (points.length >= 4) {\n      this.makeEmpty();\n\n      for (let i = 0, l = points.length; i < l; i++) {\n        this.vertices.push(new VertexNode(points[i]));\n      }\n\n      this.compute();\n    }\n\n    return this;\n  }\n\n  setFromObject(object) {\n    const points = [];\n    object.updateMatrixWorld(true);\n    object.traverse(function (node) {\n      const geometry = node.geometry;\n\n      if (geometry !== undefined) {\n        if (geometry.isGeometry) {\n          console.error('THREE.ConvexHull no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          const attribute = geometry.attributes.position;\n\n          if (attribute !== undefined) {\n            for (let i = 0, l = attribute.count; i < l; i++) {\n              const point = new Vector3();\n              point.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n              points.push(point);\n            }\n          }\n        }\n      }\n    });\n    return this.setFromPoints(points);\n  }\n\n  containsPoint(point) {\n    const faces = this.faces;\n\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i]; // compute signed distance and check on what half space the point lies\n\n      if (face.distanceToPoint(point) > this.tolerance) return false;\n    }\n\n    return true;\n  }\n\n  intersectRay(ray, target) {\n    // based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n    const faces = this.faces;\n    let tNear = -Infinity;\n    let tFar = Infinity;\n\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i]; // interpret faces as planes for the further computation\n\n      const vN = face.distanceToPoint(ray.origin);\n      const vD = face.normal.dot(ray.direction); // if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n      // the ray is turned away or parallel to the plane, there is no intersection\n\n      if (vN > 0 && vD >= 0) return null; // compute the distance from the rayâ€™s origin to the intersection with the plane\n\n      const t = vD !== 0 ? -vN / vD : 0; // only proceed if the distance is positive. a negative distance means the intersection point\n      // lies \"behind\" the origin\n\n      if (t <= 0) continue; // now categorized plane as front-facing or back-facing\n\n      if (vD > 0) {\n        //  plane faces away from the ray, so this plane is a back-face\n        tFar = Math.min(t, tFar);\n      } else {\n        // front-face\n        tNear = Math.max(t, tNear);\n      }\n\n      if (tNear > tFar) {\n        // if tNear ever is greater than tFar, the ray must miss the convex hull\n        return null;\n      }\n    } // evaluate intersection point\n    // always try tNear first since its the closer intersection point\n\n\n    if (tNear !== -Infinity) {\n      ray.at(tNear, target);\n    } else {\n      ray.at(tFar, target);\n    }\n\n    return target;\n  }\n\n  intersectsRay(ray) {\n    return this.intersectRay(ray, _v1) !== null;\n  }\n\n  makeEmpty() {\n    this.faces = [];\n    this.vertices = [];\n    return this;\n  } // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n\n  addVertexToFace(vertex, face) {\n    vertex.face = face;\n\n    if (face.outside === null) {\n      this.assigned.append(vertex);\n    } else {\n      this.assigned.insertBefore(face.outside, vertex);\n    }\n\n    face.outside = vertex;\n    return this;\n  } // Removes a vertex from the 'assigned' list of vertices and from the given face\n\n\n  removeVertexFromFace(vertex, face) {\n    if (vertex === face.outside) {\n      // fix face.outside link\n      if (vertex.next !== null && vertex.next.face === face) {\n        // face has at least 2 outside vertices, move the 'outside' reference\n        face.outside = vertex.next;\n      } else {\n        // vertex was the only outside vertex that face had\n        face.outside = null;\n      }\n    }\n\n    this.assigned.remove(vertex);\n    return this;\n  } // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n\n  removeAllVerticesFromFace(face) {\n    if (face.outside !== null) {\n      // reference to the first and last vertex of this face\n      const start = face.outside;\n      let end = face.outside;\n\n      while (end.next !== null && end.next.face === face) {\n        end = end.next;\n      }\n\n      this.assigned.removeSubList(start, end); // fix references\n\n      start.prev = end.next = null;\n      face.outside = null;\n      return start;\n    }\n  } // Removes all the visible vertices that 'face' is able to see\n\n\n  deleteFaceVertices(face, absorbingFace) {\n    const faceVertices = this.removeAllVerticesFromFace(face);\n\n    if (faceVertices !== undefined) {\n      if (absorbingFace === undefined) {\n        // mark the vertices to be reassigned to some other face\n        this.unassigned.appendChain(faceVertices);\n      } else {\n        // if there's an absorbing face try to assign as many vertices as possible to it\n        let vertex = faceVertices;\n\n        do {\n          // we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n          // will be changed by upcoming method calls\n          const nextVertex = vertex.next;\n          const distance = absorbingFace.distanceToPoint(vertex.point); // check if 'vertex' is able to see 'absorbingFace'\n\n          if (distance > this.tolerance) {\n            this.addVertexToFace(vertex, absorbingFace);\n          } else {\n            this.unassigned.append(vertex);\n          } // now assign next vertex\n\n\n          vertex = nextVertex;\n        } while (vertex !== null);\n      }\n    }\n\n    return this;\n  } // Reassigns as many vertices as possible from the unassigned list to the new faces\n\n\n  resolveUnassignedPoints(newFaces) {\n    if (this.unassigned.isEmpty() === false) {\n      let vertex = this.unassigned.first();\n\n      do {\n        // buffer 'next' reference, see .deleteFaceVertices()\n        const nextVertex = vertex.next;\n        let maxDistance = this.tolerance;\n        let maxFace = null;\n\n        for (let i = 0; i < newFaces.length; i++) {\n          const face = newFaces[i];\n\n          if (face.mark === Visible) {\n            const distance = face.distanceToPoint(vertex.point);\n\n            if (distance > maxDistance) {\n              maxDistance = distance;\n              maxFace = face;\n            }\n\n            if (maxDistance > 1000 * this.tolerance) break;\n          }\n        } // 'maxFace' can be null e.g. if there are identical vertices\n\n\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n\n        vertex = nextVertex;\n      } while (vertex !== null);\n    }\n\n    return this;\n  } // Computes the extremes of a simplex which will be the initial hull\n\n\n  computeExtremes() {\n    const min = new Vector3();\n    const max = new Vector3();\n    const minVertices = [];\n    const maxVertices = []; // initially assume that the first vertex is the min/max\n\n    for (let i = 0; i < 3; i++) {\n      minVertices[i] = maxVertices[i] = this.vertices[0];\n    }\n\n    min.copy(this.vertices[0].point);\n    max.copy(this.vertices[0].point); // compute the min/max vertex on all six directions\n\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = this.vertices[i];\n      const point = vertex.point; // update the min coordinates\n\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) < min.getComponent(j)) {\n          min.setComponent(j, point.getComponent(j));\n          minVertices[j] = vertex;\n        }\n      } // update the max coordinates\n\n\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) > max.getComponent(j)) {\n          max.setComponent(j, point.getComponent(j));\n          maxVertices[j] = vertex;\n        }\n      }\n    } // use min/max vectors to compute an optimal epsilon\n\n\n    this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));\n    return {\n      min: minVertices,\n      max: maxVertices\n    };\n  } // Computes the initial simplex assigning to its faces all the points\n  // that are candidates to form part of the hull\n\n\n  computeInitialHull() {\n    const vertices = this.vertices;\n    const extremes = this.computeExtremes();\n    const min = extremes.min;\n    const max = extremes.max; // 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n    // (max.x - min.x)\n    // (max.y - min.y)\n    // (max.z - min.z)\n\n    let maxDistance = 0;\n    let index = 0;\n\n    for (let i = 0; i < 3; i++) {\n      const distance = max[i].point.getComponent(i) - min[i].point.getComponent(i);\n\n      if (distance > maxDistance) {\n        maxDistance = distance;\n        index = i;\n      }\n    }\n\n    const v0 = min[index];\n    const v1 = max[index];\n    let v2;\n    let v3; // 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n    maxDistance = 0;\n\n    _line3.set(v0.point, v1.point);\n\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n\n      if (vertex !== v0 && vertex !== v1) {\n        _line3.closestPointToPoint(vertex.point, true, _closestPoint);\n\n        const distance = _closestPoint.distanceToSquared(vertex.point);\n\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v2 = vertex;\n        }\n      }\n    } // 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n\n    maxDistance = -1;\n\n    _plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\n\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\n        const distance = Math.abs(_plane.distanceToPoint(vertex.point));\n\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v3 = vertex;\n        }\n      }\n    }\n\n    const faces = [];\n\n    if (_plane.distanceToPoint(v3.point) < 0) {\n      // the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n      faces.push(Face.create(v0, v1, v2), Face.create(v3, v1, v0), Face.create(v3, v2, v1), Face.create(v3, v0, v2)); // set the twin edge\n\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3; // join face[ i ] i > 0, with the first face\n\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j)); // join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n        faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\n      }\n    } else {\n      // the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n      faces.push(Face.create(v0, v2, v1), Face.create(v3, v0, v1), Face.create(v3, v1, v2), Face.create(v3, v2, v0)); // set the twin edge\n\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3; // join face[ i ] i > 0, with the first face\n\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3)); // join face[ i ] with face[ i + 1 ]\n\n        faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\n      }\n    } // the initial hull is the tetrahedron\n\n\n    for (let i = 0; i < 4; i++) {\n      this.faces.push(faces[i]);\n    } // initial assignment of vertices to the faces of the tetrahedron\n\n\n    for (let i = 0, l = vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {\n        maxDistance = this.tolerance;\n        let maxFace = null;\n\n        for (let j = 0; j < 4; j++) {\n          const distance = this.faces[j].distanceToPoint(vertex.point);\n\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            maxFace = this.faces[j];\n          }\n        }\n\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n      }\n    }\n\n    return this;\n  } // Removes inactive faces\n\n\n  reindexFaces() {\n    const activeFaces = [];\n\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n\n      if (face.mark === Visible) {\n        activeFaces.push(face);\n      }\n    }\n\n    this.faces = activeFaces;\n    return this;\n  } // Finds the next vertex to create faces with the current hull\n\n\n  nextVertexToAdd() {\n    // if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n    if (this.assigned.isEmpty() === false) {\n      let eyeVertex,\n          maxDistance = 0; // grap the first available face and start with the first visible vertex of that face\n\n      const eyeFace = this.assigned.first().face;\n      let vertex = eyeFace.outside; // now calculate the farthest vertex that face can see\n\n      do {\n        const distance = eyeFace.distanceToPoint(vertex.point);\n\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          eyeVertex = vertex;\n        }\n\n        vertex = vertex.next;\n      } while (vertex !== null && vertex.face === eyeFace);\n\n      return eyeVertex;\n    }\n  } // Computes a chain of half edges in CCW order called the 'horizon'.\n  // For an edge to be part of the horizon it must join a face that can see\n  // 'eyePoint' and a face that cannot see 'eyePoint'.\n\n\n  computeHorizon(eyePoint, crossEdge, face, horizon) {\n    // moves face's vertices to the 'unassigned' vertex list\n    this.deleteFaceVertices(face);\n    face.mark = Deleted;\n    let edge;\n\n    if (crossEdge === null) {\n      edge = crossEdge = face.getEdge(0);\n    } else {\n      // start from the next edge since 'crossEdge' was already analyzed\n      // (actually 'crossEdge.twin' was the edge who called this method recursively)\n      edge = crossEdge.next;\n    }\n\n    do {\n      const twinEdge = edge.twin;\n      const oppositeFace = twinEdge.face;\n\n      if (oppositeFace.mark === Visible) {\n        if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\n          // the opposite face can see the vertex, so proceed with next edge\n          this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\n        } else {\n          // the opposite face can't see the vertex, so this edge is part of the horizon\n          horizon.push(edge);\n        }\n      }\n\n      edge = edge.next;\n    } while (edge !== crossEdge);\n\n    return this;\n  } // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n\n  addAdjoiningFace(eyeVertex, horizonEdge) {\n    // all the half edges are created in ccw order thus the face is always pointing outside the hull\n    const face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n    this.faces.push(face); // join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n    face.getEdge(-1).setTwin(horizonEdge.twin);\n    return face.getEdge(0); // the half edge whose vertex is the eyeVertex\n  } //  Adds 'horizon.length' faces to the hull, each face will be linked with the\n  //  horizon opposite face and the face on the left/right\n\n\n  addNewFaces(eyeVertex, horizon) {\n    this.newFaces = [];\n    let firstSideEdge = null;\n    let previousSideEdge = null;\n\n    for (let i = 0; i < horizon.length; i++) {\n      const horizonEdge = horizon[i]; // returns the right side edge\n\n      const sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n\n      if (firstSideEdge === null) {\n        firstSideEdge = sideEdge;\n      } else {\n        // joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n        sideEdge.next.setTwin(previousSideEdge);\n      }\n\n      this.newFaces.push(sideEdge.face);\n      previousSideEdge = sideEdge;\n    } // perform final join of new faces\n\n\n    firstSideEdge.next.setTwin(previousSideEdge);\n    return this;\n  } // Adds a vertex to the hull\n\n\n  addVertexToHull(eyeVertex) {\n    const horizon = [];\n    this.unassigned.clear(); // remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n    this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n    this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n    this.addNewFaces(eyeVertex, horizon); // reassign 'unassigned' vertices to the new faces\n\n    this.resolveUnassignedPoints(this.newFaces);\n    return this;\n  }\n\n  cleanup() {\n    this.assigned.clear();\n    this.unassigned.clear();\n    this.newFaces = [];\n    return this;\n  }\n\n  compute() {\n    let vertex;\n    this.computeInitialHull(); // add all available vertices gradually to the hull\n\n    while ((vertex = this.nextVertexToAdd()) !== undefined) {\n      this.addVertexToHull(vertex);\n    }\n\n    this.reindexFaces();\n    this.cleanup();\n    return this;\n  }\n\n} //\n\n\nclass Face {\n  constructor() {\n    this.normal = new Vector3();\n    this.midpoint = new Vector3();\n    this.area = 0;\n    this.constant = 0; // signed distance from face to the origin\n\n    this.outside = null; // reference to a vertex in a vertex list this face can see\n\n    this.mark = Visible;\n    this.edge = null;\n  }\n\n  static create(a, b, c) {\n    const face = new Face();\n    const e0 = new HalfEdge(a, face);\n    const e1 = new HalfEdge(b, face);\n    const e2 = new HalfEdge(c, face); // join edges\n\n    e0.next = e2.prev = e1;\n    e1.next = e0.prev = e2;\n    e2.next = e1.prev = e0; // main half edge reference\n\n    face.edge = e0;\n    return face.compute();\n  }\n\n  getEdge(i) {\n    let edge = this.edge;\n\n    while (i > 0) {\n      edge = edge.next;\n      i--;\n    }\n\n    while (i < 0) {\n      edge = edge.prev;\n      i++;\n    }\n\n    return edge;\n  }\n\n  compute() {\n    const a = this.edge.tail();\n    const b = this.edge.head();\n    const c = this.edge.next.head();\n\n    _triangle.set(a.point, b.point, c.point);\n\n    _triangle.getNormal(this.normal);\n\n    _triangle.getMidpoint(this.midpoint);\n\n    this.area = _triangle.getArea();\n    this.constant = this.normal.dot(this.midpoint);\n    return this;\n  }\n\n  distanceToPoint(point) {\n    return this.normal.dot(point) - this.constant;\n  }\n\n} // Entity for a Doubly-Connected Edge List (DCEL).\n\n\nclass HalfEdge {\n  constructor(vertex, face) {\n    this.vertex = vertex;\n    this.prev = null;\n    this.next = null;\n    this.twin = null;\n    this.face = face;\n  }\n\n  head() {\n    return this.vertex;\n  }\n\n  tail() {\n    return this.prev ? this.prev.vertex : null;\n  }\n\n  length() {\n    const head = this.head();\n    const tail = this.tail();\n\n    if (tail !== null) {\n      return tail.point.distanceTo(head.point);\n    }\n\n    return -1;\n  }\n\n  lengthSquared() {\n    const head = this.head();\n    const tail = this.tail();\n\n    if (tail !== null) {\n      return tail.point.distanceToSquared(head.point);\n    }\n\n    return -1;\n  }\n\n  setTwin(edge) {\n    this.twin = edge;\n    edge.twin = this;\n    return this;\n  }\n\n} // A vertex as a double linked list node.\n\n\nclass VertexNode {\n  constructor(point) {\n    this.point = point;\n    this.prev = null;\n    this.next = null;\n    this.face = null; // the face that is able to see this vertex\n  }\n\n} // A double linked list that contains vertex nodes.\n\n\nclass VertexList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n\n  first() {\n    return this.head;\n  }\n\n  last() {\n    return this.tail;\n  }\n\n  clear() {\n    this.head = this.tail = null;\n    return this;\n  } // Inserts a vertex before the target vertex\n\n\n  insertBefore(target, vertex) {\n    vertex.prev = target.prev;\n    vertex.next = target;\n\n    if (vertex.prev === null) {\n      this.head = vertex;\n    } else {\n      vertex.prev.next = vertex;\n    }\n\n    target.prev = vertex;\n    return this;\n  } // Inserts a vertex after the target vertex\n\n\n  insertAfter(target, vertex) {\n    vertex.prev = target;\n    vertex.next = target.next;\n\n    if (vertex.next === null) {\n      this.tail = vertex;\n    } else {\n      vertex.next.prev = vertex;\n    }\n\n    target.next = vertex;\n    return this;\n  } // Appends a vertex to the end of the linked list\n\n\n  append(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n\n    vertex.prev = this.tail;\n    vertex.next = null; // the tail has no subsequent vertex\n\n    this.tail = vertex;\n    return this;\n  } // Appends a chain of vertices where 'vertex' is the head.\n\n\n  appendChain(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n\n    vertex.prev = this.tail; // ensure that the 'tail' reference points to the last vertex of the chain\n\n    while (vertex.next !== null) {\n      vertex = vertex.next;\n    }\n\n    this.tail = vertex;\n    return this;\n  } // Removes a vertex from the linked list\n\n\n  remove(vertex) {\n    if (vertex.prev === null) {\n      this.head = vertex.next;\n    } else {\n      vertex.prev.next = vertex.next;\n    }\n\n    if (vertex.next === null) {\n      this.tail = vertex.prev;\n    } else {\n      vertex.next.prev = vertex.prev;\n    }\n\n    return this;\n  } // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n\n  removeSubList(a, b) {\n    if (a.prev === null) {\n      this.head = b.next;\n    } else {\n      a.prev.next = b.next;\n    }\n\n    if (b.next === null) {\n      this.tail = a.prev;\n    } else {\n      b.next.prev = a.prev;\n    }\n\n    return this;\n  }\n\n  isEmpty() {\n    return this.head === null;\n  }\n\n}\n\nexport { ConvexHull };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}