{"ast":null,"code":"import _classCallCheck from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderChunk, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, Matrix4, Vector3, Mesh, CylinderGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\n/**\n * Regular expression for matching the `void main() {` opener line in GLSL.\n * @type {RegExp}\n */\n\nvar voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n/**\n * Recursively expands all `#include <xyz>` statements within string of shader code.\n * Copied from three's WebGLProgram#parseIncludes for external use.\n *\n * @param {string} source - The GLSL source code to evaluate\n * @return {string} The GLSL code with all includes expanded\n */\n\nfunction expandShaderIncludes(source) {\n  var pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n  function replace(match, include) {\n    var chunk = ShaderChunk[include];\n    return chunk ? expandShaderIncludes(chunk) : match;\n  }\n\n  return source.replace(pattern, replace);\n}\n/*\n * This is a direct copy of MathUtils.generateUUID from Three.js, to preserve compatibility with three\n * versions before 0.113.0 as it was changed from Math to MathUtils in that version.\n * https://github.com/mrdoob/three.js/blob/dd8b5aa3b270c17096b90945cd2d6d1b13aaec53/src/math/MathUtils.js#L16\n */\n\n\nvar _lut = [];\n\nfor (var i = 0; i < 256; i++) {\n  _lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n}\n\nfunction generateUUID() {\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n  var d0 = Math.random() * 0xffffffff | 0;\n  var d1 = Math.random() * 0xffffffff | 0;\n  var d2 = Math.random() * 0xffffffff | 0;\n  var d3 = Math.random() * 0xffffffff | 0;\n  var uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n  return uuid.toUpperCase();\n} // Local assign polyfill to avoid importing troika-core\n\n\nvar assign = Object.assign || function\n  /*target, ...sources*/\n() {\n  var target = arguments[0];\n\n  for (var _i = 1, len = arguments.length; _i < len; _i++) {\n    var source = arguments[_i];\n\n    if (source) {\n      for (var prop in source) {\n        if (Object.prototype.hasOwnProperty.call(source, prop)) {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n\n  return target;\n};\n\nvar epoch = Date.now();\nvar CONSTRUCTOR_CACHE = new WeakMap();\nvar SHADER_UPGRADE_CACHE = new Map(); // Material ids must be integers, but we can't access the increment from Three's `Material` module,\n// so let's choose a sufficiently large starting value that should theoretically never collide.\n\nvar materialInstanceId = 1e10;\n/**\n * A utility for creating a custom shader material derived from another material's\n * shaders. This allows you to inject custom shader logic and transforms into the\n * builtin ThreeJS materials without having to recreate them from scratch.\n *\n * @param {THREE.Material} baseMaterial - the original material to derive from\n *\n * @param {Object} options - How the base material should be modified.\n * @param {Object} options.defines - Custom `defines` for the material\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\n *        both shaders, and it will automatically be updated on each render frame with a number of\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\n *        true calendar time.\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\n *        definitions, above the `void main()` function.\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\n *        shader's `void main` function.\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\n *        shader's `void main` function.\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\n *        those attributes exposed by their normal names as read/write values.\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\n *        definitions, above the `void main()` function.\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\n *        shader's `void main` function.\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\n *        want those to apply to your changes use `fragmentColorTransform` instead.\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\n *        output value. Will be injected near the end of the `void main` function, but before any\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\n *        `fragmentMainOutro`.\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\n *        special that's not covered by the other builtin options. This function will be executed before\n *        any other transforms are applied.\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\n *        material, rather than the default behavior of copying it. This allows the derived material to\n *        automatically pick up changes made to the base material and its properties. This can be useful\n *        where the derived material is hidden from the user as an implementation detail, allowing them\n *        to work with the original material like normal. But it can result in unexpected behavior if not\n *        handled carefully.\n *\n * @return {THREE.Material}\n *\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\n * which can be called to get a variant of the derived material for use in shadow casting. If the\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\n */\n\nfunction createDerivedMaterial(baseMaterial, options) {\n  // Generate a key that is unique to the content of these `options`. We'll use this\n  // throughout for caching and for generating the upgraded shader code. This increases\n  // the likelihood that the resulting shaders will line up across multiple calls so\n  // their GL programs can be shared and cached.\n  var optionsKey = getKeyForOptions(options); // First check to see if we've already derived from this baseMaterial using this\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\n\n  var ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\n\n  if (!ctorsByDerivation) {\n    CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = Object.create(null));\n  }\n\n  if (ctorsByDerivation[optionsKey]) {\n    return new ctorsByDerivation[optionsKey]();\n  }\n\n  var privateBeforeCompileProp = \"_onBeforeCompile\".concat(optionsKey); // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n  // the renderer switches to this material's program\n\n  var onBeforeCompile = function onBeforeCompile(shaderInfo, renderer) {\n    baseMaterial.onBeforeCompile.call(this, shaderInfo, renderer); // Upgrade the shaders, caching the result by incoming source code\n\n    var cacheKey = this.customProgramCacheKey() + '|' + shaderInfo.vertexShader + '|' + shaderInfo.fragmentShader;\n    var upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\n\n    if (!upgradedShaders) {\n      var upgraded = upgradeShaders(this, shaderInfo, options, optionsKey);\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\n    } // Inject upgraded shaders and uniforms into the program\n\n\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\n    assign(shaderInfo.uniforms, this.uniforms); // Inject auto-updating time uniform if requested\n\n    if (options.timeUniform) {\n      shaderInfo.uniforms[options.timeUniform] = {\n        get value() {\n          return Date.now() - epoch;\n        }\n\n      };\n    } // Users can still add their own handlers on top of ours\n\n\n    if (this[privateBeforeCompileProp]) {\n      this[privateBeforeCompileProp](shaderInfo);\n    }\n  };\n\n  var DerivedMaterial = function DerivedMaterial() {\n    return derive(options.chained ? baseMaterial : baseMaterial.clone());\n  };\n\n  var derive = function derive(base) {\n    // Prototype chain to the base material\n    var derived = Object.create(base, descriptor); // Store the baseMaterial for reference; this is always the original even when cloning\n\n    Object.defineProperty(derived, 'baseMaterial', {\n      value: baseMaterial\n    }); // Needs its own ids\n\n    Object.defineProperty(derived, 'id', {\n      value: materialInstanceId++\n    });\n    derived.uuid = generateUUID(); // Merge uniforms, defines, and extensions\n\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\n    derived.defines = assign({}, base.defines, options.defines);\n    derived.defines[\"TROIKA_DERIVED_MATERIAL_\".concat(optionsKey)] = ''; //force a program change from the base material\n\n    derived.extensions = assign({}, base.extensions, options.extensions); // Don't inherit EventDispatcher listeners\n\n    derived._listeners = undefined;\n    return derived;\n  };\n\n  var descriptor = {\n    constructor: {\n      value: DerivedMaterial\n    },\n    isDerivedMaterial: {\n      value: true\n    },\n    customProgramCacheKey: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        return baseMaterial.customProgramCacheKey() + '|' + optionsKey;\n      }\n    },\n    onBeforeCompile: {\n      get: function get() {\n        return onBeforeCompile;\n      },\n      set: function set(fn) {\n        this[privateBeforeCompileProp] = fn;\n      }\n    },\n    copy: {\n      writable: true,\n      configurable: true,\n      value: function value(source) {\n        baseMaterial.copy.call(this, source);\n\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n          assign(this.extensions, source.extensions);\n          assign(this.defines, source.defines);\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\n        }\n\n        return this;\n      }\n    },\n    clone: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var newBase = new baseMaterial.constructor();\n        return derive(newBase).copy(this);\n      }\n    },\n\n    /**\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\n     * transformations and discarded fragments.\n     */\n    getDepthMaterial: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var depthMaterial = this._depthMaterial;\n\n        if (!depthMaterial) {\n          depthMaterial = this._depthMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({\n            depthPacking: RGBADepthPacking\n          }), options);\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n\n        return depthMaterial;\n      }\n    },\n\n    /**\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\n     * transformations and discarded fragments.\n     */\n    getDistanceMaterial: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var distanceMaterial = this._distanceMaterial;\n\n        if (!distanceMaterial) {\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(), options);\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n\n        return distanceMaterial;\n      }\n    },\n    dispose: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var _depthMaterial = this._depthMaterial,\n            _distanceMaterial = this._distanceMaterial;\n        if (_depthMaterial) _depthMaterial.dispose();\n        if (_distanceMaterial) _distanceMaterial.dispose();\n        baseMaterial.dispose.call(this);\n      }\n    }\n  };\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\n  return new DerivedMaterial();\n}\n\nfunction upgradeShaders(material, _ref, options, key) {\n  var vertexShader = _ref.vertexShader,\n      fragmentShader = _ref.fragmentShader;\n  var vertexDefs = options.vertexDefs,\n      vertexMainIntro = options.vertexMainIntro,\n      vertexMainOutro = options.vertexMainOutro,\n      vertexTransform = options.vertexTransform,\n      fragmentDefs = options.fragmentDefs,\n      fragmentMainIntro = options.fragmentMainIntro,\n      fragmentMainOutro = options.fragmentMainOutro,\n      fragmentColorTransform = options.fragmentColorTransform,\n      customRewriter = options.customRewriter,\n      timeUniform = options.timeUniform;\n  vertexDefs = vertexDefs || '';\n  vertexMainIntro = vertexMainIntro || '';\n  vertexMainOutro = vertexMainOutro || '';\n  fragmentDefs = fragmentDefs || '';\n  fragmentMainIntro = fragmentMainIntro || '';\n  fragmentMainOutro = fragmentMainOutro || ''; // Expand includes if needed\n\n  if (vertexTransform || customRewriter) {\n    vertexShader = expandShaderIncludes(vertexShader);\n  }\n\n  if (fragmentColorTransform || customRewriter) {\n    // We need to be able to find postprocessing chunks after include expansion in order to\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n    // so we still mark them.\n    fragmentShader = fragmentShader.replace(/^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm, '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n');\n    fragmentShader = expandShaderIncludes(fragmentShader);\n  } // Apply custom rewriter function\n\n\n  if (customRewriter) {\n    var res = customRewriter({\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    });\n    vertexShader = res.vertexShader;\n    fragmentShader = res.fragmentShader;\n  } // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n  // those and re-insert them into the outro in the correct place:\n\n\n  if (fragmentColorTransform) {\n    var postChunks = [];\n    fragmentShader = fragmentShader.replace(/^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\n    function (match) {\n      postChunks.push(match);\n      return '';\n    });\n    fragmentMainOutro = \"\".concat(fragmentColorTransform, \"\\n\").concat(postChunks.join('\\n'), \"\\n\").concat(fragmentMainOutro);\n  } // Inject auto-updating time uniform if requested\n\n\n  if (timeUniform) {\n    var code = \"\\nuniform float \".concat(timeUniform, \";\\n\");\n    vertexDefs = code + vertexDefs;\n    fragmentDefs = code + fragmentDefs;\n  } // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n\n\n  if (vertexTransform) {\n    // Hoist these defs to the very top so they work in other function defs\n    vertexShader = \"vec3 troika_position_\".concat(key, \";\\nvec3 troika_normal_\").concat(key, \";\\nvec2 troika_uv_\").concat(key, \";\\n\").concat(vertexShader, \"\\n\");\n    vertexDefs = \"\".concat(vertexDefs, \"\\nvoid troikaVertexTransform\").concat(key, \"(inout vec3 position, inout vec3 normal, inout vec2 uv) {\\n  \").concat(vertexTransform, \"\\n}\\n\");\n    vertexMainIntro = \"\\ntroika_position_\".concat(key, \" = vec3(position);\\ntroika_normal_\").concat(key, \" = vec3(normal);\\ntroika_uv_\").concat(key, \" = vec2(uv);\\ntroikaVertexTransform\").concat(key, \"(troika_position_\").concat(key, \", troika_normal_\").concat(key, \", troika_uv_\").concat(key, \");\\n\").concat(vertexMainIntro, \"\\n\");\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, function (match, match1, index, fullStr) {\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : \"troika_\".concat(match1, \"_\").concat(key);\n    }); // Three r152 introduced the MAP_UV token, replace it too if it's pointing to the main 'uv'\n    // Perhaps the other textures too going forward?\n\n    if (!(material.map && material.map.channel > 0)) {\n      vertexShader = vertexShader.replace(/\\bMAP_UV\\b/g, \"troika_uv_\".concat(key));\n    }\n  } // Inject defs and intro/outro snippets\n\n\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader\n  };\n}\n\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n  if (intro || outro || defs) {\n    shaderCode = shaderCode.replace(voidMainRegExp, \"\\n\".concat(defs, \"\\nvoid troikaOrigMain\").concat(id, \"() {\"));\n    shaderCode += \"\\nvoid main() {\\n  \".concat(intro, \"\\n  troikaOrigMain\").concat(id, \"();\\n  \").concat(outro, \"\\n}\");\n  }\n\n  return shaderCode;\n}\n\nfunction optionsJsonReplacer(key, value) {\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value;\n}\n\nvar _idCtr = 0;\nvar optionsHashesToIds = new Map();\n\nfunction getKeyForOptions(options) {\n  var optionsHash = JSON.stringify(options, optionsJsonReplacer);\n  var id = optionsHashesToIds.get(optionsHash);\n\n  if (id == null) {\n    optionsHashesToIds.set(optionsHash, id = ++_idCtr);\n  }\n\n  return id;\n} // Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n// TODO how can we keep this from getting stale?\n\n\nvar MATERIAL_TYPES_TO_SHADERS = {\n  MeshDepthMaterial: 'depth',\n  MeshDistanceMaterial: 'distanceRGBA',\n  MeshNormalMaterial: 'normal',\n  MeshBasicMaterial: 'basic',\n  MeshLambertMaterial: 'lambert',\n  MeshPhongMaterial: 'phong',\n  MeshToonMaterial: 'toon',\n  MeshStandardMaterial: 'physical',\n  MeshPhysicalMaterial: 'physical',\n  MeshMatcapMaterial: 'matcap',\n  LineBasicMaterial: 'basic',\n  LineDashedMaterial: 'dashed',\n  PointsMaterial: 'points',\n  ShadowMaterial: 'shadow',\n  SpriteMaterial: 'sprite'\n};\n/**\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\n * used to render that material.\n *\n * @param material - the Material instance\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\n */\n\nfunction getShadersForMaterial(material) {\n  var builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n  return builtinType ? ShaderLib[builtinType] : material; //TODO fallback for unknown type?\n}\n/**\n * Find all uniforms and their types within a shader code string.\n *\n * @param {string} shader - The shader code to parse\n * @return {object} mapping of uniform names to their glsl type\n */\n\n\nfunction getShaderUniformTypes(shader) {\n  var uniformRE = /\\buniform\\s+(int|float|vec[234]|mat[34])\\s+([A-Za-z_][\\w]*)/g;\n  var uniforms = Object.create(null);\n  var match;\n\n  while ((match = uniformRE.exec(shader)) !== null) {\n    uniforms[match[2]] = match[1];\n  }\n\n  return uniforms;\n}\n/**\n * Helper for smoothing out the `m.getInverse(x)` --> `m.copy(x).invert()` conversion\n * that happened in ThreeJS r123.\n * @param {Matrix4} srcMatrix\n * @param {Matrix4} [tgtMatrix]\n */\n\n\nfunction invertMatrix4(srcMatrix) {\n  var tgtMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Matrix4();\n\n  if (typeof tgtMatrix.invert === 'function') {\n    tgtMatrix.copy(srcMatrix).invert();\n  } else {\n    tgtMatrix.getInverse(srcMatrix);\n  }\n\n  return tgtMatrix;\n}\n/*\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\ndivided into a reasonable number of height segments.\n*/\n\n\nvar vertexDefs = \"\\nuniform vec3 pointA;\\nuniform vec3 controlA;\\nuniform vec3 controlB;\\nuniform vec3 pointB;\\nuniform float radius;\\nvarying float bezierT;\\n\\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  float b0 = t2 * t2 * t2;\\n  float b1 = 3.0 * t * t2 * t2;\\n  float b2 = 3.0 * t * t * t2;\\n  float b3 = t * t * t;\\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\\n}\\n\\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  return -3.0 * p1 * t2 * t2 +\\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\\n    3.0 * p2 * t * t;\\n}\\n\";\nvar vertexTransform = \"\\nfloat t = position.y;\\nbezierT = t;\\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\\n\\n// Make \\\"sideways\\\" always perpendicular to the camera ray; this ensures that any twists\\n// in the cylinder occur where you won't see them: \\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\\nif (bezierDir == viewDirection) {\\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\\n}\\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\\nvec3 upish = normalize(cross(sideways, bezierDir));\\n\\n// Build a matrix for transforming this disc in the cylinder:\\nmat4 discTx;\\ndiscTx[0].xyz = sideways * radius;\\ndiscTx[1].xyz = bezierDir * radius;\\ndiscTx[2].xyz = upish * radius;\\ndiscTx[3].xyz = bezierCenterPos;\\ndiscTx[3][3] = 1.0;\\n\\n// Apply transform, ignoring original y\\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\\nnormal = normalize(mat3(discTx) * normal);\\n\";\nvar fragmentDefs = \"\\nuniform vec3 dashing;\\nvarying float bezierT;\\n\";\nvar fragmentMainIntro = \"\\nif (dashing.x + dashing.y > 0.0) {\\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\\n  if (dashFrac > dashing.x) {\\n    discard;\\n  }\\n}\\n\"; // Debugging: separate color for each of the 6 sides:\n// const fragmentColorTransform = `\n// float sideNum = floor(vUV.x * 6.0);\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n//   vec3(1.0, 0.0, 1.0);\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n// `\n\nfunction createBezierMeshMaterial(baseMaterial) {\n  return createDerivedMaterial(baseMaterial, {\n    chained: true,\n    uniforms: {\n      pointA: {\n        value: new Vector3()\n      },\n      controlA: {\n        value: new Vector3()\n      },\n      controlB: {\n        value: new Vector3()\n      },\n      pointB: {\n        value: new Vector3()\n      },\n      radius: {\n        value: 0.01\n      },\n      dashing: {\n        value: new Vector3()\n      } //on, off, offset\n\n    },\n    vertexDefs: vertexDefs,\n    vertexTransform: vertexTransform,\n    fragmentDefs: fragmentDefs,\n    fragmentMainIntro: fragmentMainIntro\n  });\n}\n\nvar geometry = null;\nvar defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({\n  color: 0xffffff,\n  side: DoubleSide\n});\n/**\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\n * automatically.\n *\n * The cubiz bezier path is determined by its four `Vector3` properties:\n * - `pointA`\n * - `controlA`\n * - `controlB`\n * - `pointB`\n *\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\n *\n * You can also give the tube a dashed appearance with two properties:\n *\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\n *   used as input to the cubic bezier function, not its visible length.)\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\n *\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\n * thicker tubes.\n *\n * TODO: proper geometry bounding sphere and raycasting\n * TODO: allow control of the geometry's segment counts\n */\n\nvar BezierMesh = /*#__PURE__*/function (_Mesh) {\n  _inherits(BezierMesh, _Mesh);\n\n  var _super = _createSuper(BezierMesh);\n\n  function BezierMesh() {\n    var _this;\n\n    _classCallCheck(this, BezierMesh);\n\n    _this = _super.call(this, BezierMesh.getGeometry(), defaultBaseMaterial);\n    _this.pointA = new Vector3();\n    _this.controlA = new Vector3();\n    _this.controlB = new Vector3();\n    _this.pointB = new Vector3();\n    _this.radius = 0.01;\n    _this.dashArray = new Vector2();\n    _this.dashOffset = 0; // TODO - disabling frustum culling until I figure out how to customize the\n    //  geometry's bounding sphere that gets used\n\n    _this.frustumCulled = false;\n    return _this;\n  } // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n\n\n  _createClass(BezierMesh, [{\n    key: \"material\",\n    get: function get() {\n      var derivedMaterial = this._derivedMaterial;\n      var baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\n\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial); // dispose the derived material when its base material is disposed:\n\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n\n      return derivedMaterial;\n    },\n    set: function set(baseMaterial) {\n      this._baseMaterial = baseMaterial;\n    } // Create and update material for shadows upon request:\n\n  }, {\n    key: \"customDepthMaterial\",\n    get: function get() {\n      return this.material.getDepthMaterial();\n    }\n  }, {\n    key: \"customDistanceMaterial\",\n    get: function get() {\n      return this.material.getDistanceMaterial();\n    }\n  }, {\n    key: \"onBeforeRender\",\n    value: function onBeforeRender() {\n      var uniforms = this.material.uniforms;\n      var pointA = this.pointA,\n          controlA = this.controlA,\n          controlB = this.controlB,\n          pointB = this.pointB,\n          radius = this.radius,\n          dashArray = this.dashArray,\n          dashOffset = this.dashOffset;\n      uniforms.pointA.value.copy(pointA);\n      uniforms.controlA.value.copy(controlA);\n      uniforms.controlB.value.copy(controlB);\n      uniforms.pointB.value.copy(pointB);\n      uniforms.radius.value = radius;\n      uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n    }\n  }, {\n    key: \"raycast\",\n    value: function\n      /*raycaster, intersects*/\n    raycast() {// TODO - just fail for now\n    }\n  }], [{\n    key: \"getGeometry\",\n    value: function getGeometry() {\n      return geometry || (geometry = new CylinderGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0));\n    }\n  }]);\n\n  return BezierMesh;\n}(Mesh);\n\nexport { BezierMesh, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, invertMatrix4, voidMainRegExp };","map":{"version":3,"names":["ShaderChunk","UniformsUtils","MeshDepthMaterial","RGBADepthPacking","MeshDistanceMaterial","ShaderLib","Matrix4","Vector3","Mesh","CylinderGeometry","Vector2","MeshStandardMaterial","DoubleSide","voidMainRegExp","expandShaderIncludes","source","pattern","replace","match","include","chunk","_lut","i","toString","generateUUID","d0","Math","random","d1","d2","d3","uuid","toUpperCase","assign","Object","target","arguments","len","length","prop","prototype","hasOwnProperty","call","epoch","Date","now","CONSTRUCTOR_CACHE","WeakMap","SHADER_UPGRADE_CACHE","Map","materialInstanceId","createDerivedMaterial","baseMaterial","options","optionsKey","getKeyForOptions","ctorsByDerivation","get","set","create","privateBeforeCompileProp","onBeforeCompile","shaderInfo","renderer","cacheKey","customProgramCacheKey","vertexShader","fragmentShader","upgradedShaders","upgraded","upgradeShaders","uniforms","timeUniform","value","DerivedMaterial","derive","chained","clone","base","derived","descriptor","defineProperty","defines","extensions","_listeners","undefined","constructor","isDerivedMaterial","writable","configurable","fn","copy","isShaderMaterial","newBase","getDepthMaterial","depthMaterial","_depthMaterial","depthPacking","IS_DEPTH_MATERIAL","getDistanceMaterial","distanceMaterial","_distanceMaterial","IS_DISTANCE_MATERIAL","dispose","material","key","vertexDefs","vertexMainIntro","vertexMainOutro","vertexTransform","fragmentDefs","fragmentMainIntro","fragmentMainOutro","fragmentColorTransform","customRewriter","res","postChunks","push","join","code","match1","index","fullStr","test","substr","map","channel","injectIntoShaderCode","shaderCode","id","defs","intro","outro","optionsJsonReplacer","_idCtr","optionsHashesToIds","optionsHash","JSON","stringify","MATERIAL_TYPES_TO_SHADERS","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","getShadersForMaterial","builtinType","type","getShaderUniformTypes","shader","uniformRE","exec","invertMatrix4","srcMatrix","tgtMatrix","invert","getInverse","createBezierMeshMaterial","pointA","controlA","controlB","pointB","radius","dashing","geometry","defaultBaseMaterial","color","side","BezierMesh","getGeometry","dashArray","dashOffset","frustumCulled","derivedMaterial","_derivedMaterial","_baseMaterial","_defaultMaterial","addEventListener","onDispose","removeEventListener","x","y","translate"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/troika-three-utils/dist/troika-three-utils.esm.js"],"sourcesContent":["import { ShaderChunk, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, Matrix4, Vector3, Mesh, CylinderGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\n\n/**\n * Regular expression for matching the `void main() {` opener line in GLSL.\n * @type {RegExp}\n */\nconst voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n\n/**\n * Recursively expands all `#include <xyz>` statements within string of shader code.\n * Copied from three's WebGLProgram#parseIncludes for external use.\n *\n * @param {string} source - The GLSL source code to evaluate\n * @return {string} The GLSL code with all includes expanded\n */\nfunction expandShaderIncludes( source ) {\n  const pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n  function replace(match, include) {\n    let chunk = ShaderChunk[include];\n    return chunk ? expandShaderIncludes(chunk) : match\n  }\n  return source.replace( pattern, replace )\n}\n\n/*\n * This is a direct copy of MathUtils.generateUUID from Three.js, to preserve compatibility with three\n * versions before 0.113.0 as it was changed from Math to MathUtils in that version.\n * https://github.com/mrdoob/three.js/blob/dd8b5aa3b270c17096b90945cd2d6d1b13aaec53/src/math/MathUtils.js#L16\n */\n\nconst _lut = [];\n\nfor (let i = 0; i < 256; i++) {\n  _lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n}\n\nfunction generateUUID() {\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n  const d0 = Math.random() * 0xffffffff | 0;\n  const d1 = Math.random() * 0xffffffff | 0;\n  const d2 = Math.random() * 0xffffffff | 0;\n  const d3 = Math.random() * 0xffffffff | 0;\n  const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' +\n    _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' +\n    _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] +\n    _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];\n\n  // .toUpperCase() here flattens concatenated strings to save heap memory space.\n  return uuid.toUpperCase()\n\n}\n\n// Local assign polyfill to avoid importing troika-core\nconst assign = Object.assign || function(/*target, ...sources*/) {\n  let target = arguments[0];\n  for (let i = 1, len = arguments.length; i < len; i++) {\n    let source = arguments[i];\n    if (source) {\n      for (let prop in source) {\n        if (Object.prototype.hasOwnProperty.call(source, prop)) {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n  return target\n};\n\n\nconst epoch = Date.now();\nconst CONSTRUCTOR_CACHE = new WeakMap();\nconst SHADER_UPGRADE_CACHE = new Map();\n\n// Material ids must be integers, but we can't access the increment from Three's `Material` module,\n// so let's choose a sufficiently large starting value that should theoretically never collide.\nlet materialInstanceId = 1e10;\n\n/**\n * A utility for creating a custom shader material derived from another material's\n * shaders. This allows you to inject custom shader logic and transforms into the\n * builtin ThreeJS materials without having to recreate them from scratch.\n *\n * @param {THREE.Material} baseMaterial - the original material to derive from\n *\n * @param {Object} options - How the base material should be modified.\n * @param {Object} options.defines - Custom `defines` for the material\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\n *        both shaders, and it will automatically be updated on each render frame with a number of\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\n *        true calendar time.\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\n *        definitions, above the `void main()` function.\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\n *        shader's `void main` function.\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\n *        shader's `void main` function.\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\n *        those attributes exposed by their normal names as read/write values.\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\n *        definitions, above the `void main()` function.\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\n *        shader's `void main` function.\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\n *        want those to apply to your changes use `fragmentColorTransform` instead.\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\n *        output value. Will be injected near the end of the `void main` function, but before any\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\n *        `fragmentMainOutro`.\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\n *        special that's not covered by the other builtin options. This function will be executed before\n *        any other transforms are applied.\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\n *        material, rather than the default behavior of copying it. This allows the derived material to\n *        automatically pick up changes made to the base material and its properties. This can be useful\n *        where the derived material is hidden from the user as an implementation detail, allowing them\n *        to work with the original material like normal. But it can result in unexpected behavior if not\n *        handled carefully.\n *\n * @return {THREE.Material}\n *\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\n * which can be called to get a variant of the derived material for use in shadow casting. If the\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\n */\nfunction createDerivedMaterial(baseMaterial, options) {\n  // Generate a key that is unique to the content of these `options`. We'll use this\n  // throughout for caching and for generating the upgraded shader code. This increases\n  // the likelihood that the resulting shaders will line up across multiple calls so\n  // their GL programs can be shared and cached.\n  const optionsKey = getKeyForOptions(options);\n\n  // First check to see if we've already derived from this baseMaterial using this\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\n  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\n  if (!ctorsByDerivation) {\n    CONSTRUCTOR_CACHE.set(baseMaterial, (ctorsByDerivation = Object.create(null)));\n  }\n  if (ctorsByDerivation[optionsKey]) {\n    return new ctorsByDerivation[optionsKey]()\n  }\n\n  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;\n\n  // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n  // the renderer switches to this material's program\n  const onBeforeCompile = function (shaderInfo, renderer) {\n    baseMaterial.onBeforeCompile.call(this, shaderInfo, renderer);\n\n    // Upgrade the shaders, caching the result by incoming source code\n    const cacheKey = this.customProgramCacheKey() + '|' + shaderInfo.vertexShader + '|' + shaderInfo.fragmentShader;\n    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\n    if (!upgradedShaders) {\n      const upgraded = upgradeShaders(this, shaderInfo, options, optionsKey);\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\n    }\n\n    // Inject upgraded shaders and uniforms into the program\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\n    assign(shaderInfo.uniforms, this.uniforms);\n\n    // Inject auto-updating time uniform if requested\n    if (options.timeUniform) {\n      shaderInfo.uniforms[options.timeUniform] = {\n        get value() {return Date.now() - epoch}\n      };\n    }\n\n    // Users can still add their own handlers on top of ours\n    if (this[privateBeforeCompileProp]) {\n      this[privateBeforeCompileProp](shaderInfo);\n    }\n  };\n\n  const DerivedMaterial = function DerivedMaterial() {\n    return derive(options.chained ? baseMaterial : baseMaterial.clone())\n  };\n\n  const derive = function(base) {\n    // Prototype chain to the base material\n    const derived = Object.create(base, descriptor);\n\n    // Store the baseMaterial for reference; this is always the original even when cloning\n    Object.defineProperty(derived, 'baseMaterial', { value: baseMaterial });\n\n    // Needs its own ids\n    Object.defineProperty(derived, 'id', { value: materialInstanceId++ });\n    derived.uuid = generateUUID();\n\n    // Merge uniforms, defines, and extensions\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\n    derived.defines = assign({}, base.defines, options.defines);\n    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = ''; //force a program change from the base material\n    derived.extensions = assign({}, base.extensions, options.extensions);\n\n    // Don't inherit EventDispatcher listeners\n    derived._listeners = undefined;\n\n    return derived\n  };\n\n  const descriptor = {\n    constructor: {value: DerivedMaterial},\n    isDerivedMaterial: {value: true},\n\n    customProgramCacheKey: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        return baseMaterial.customProgramCacheKey() + '|' + optionsKey\n      }\n    },\n\n    onBeforeCompile: {\n      get() {\n        return onBeforeCompile\n      },\n      set(fn) {\n        this[privateBeforeCompileProp] = fn;\n      }\n    },\n\n    copy: {\n      writable: true,\n      configurable: true,\n      value: function (source) {\n        baseMaterial.copy.call(this, source);\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n          assign(this.extensions, source.extensions);\n          assign(this.defines, source.defines);\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\n        }\n        return this\n      }\n    },\n\n    clone: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        const newBase = new baseMaterial.constructor();\n        return derive(newBase).copy(this)\n      }\n    },\n\n    /**\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\n     * transformations and discarded fragments.\n     */\n    getDepthMaterial: {\n      writable: true,\n      configurable: true,\n      value: function() {\n        let depthMaterial = this._depthMaterial;\n        if (!depthMaterial) {\n          depthMaterial = this._depthMaterial = createDerivedMaterial(\n            baseMaterial.isDerivedMaterial\n              ? baseMaterial.getDepthMaterial()\n              : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),\n            options\n          );\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return depthMaterial\n      }\n    },\n\n    /**\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\n     * transformations and discarded fragments.\n     */\n    getDistanceMaterial: {\n      writable: true,\n      configurable: true,\n      value: function() {\n        let distanceMaterial = this._distanceMaterial;\n        if (!distanceMaterial) {\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(\n            baseMaterial.isDerivedMaterial\n              ? baseMaterial.getDistanceMaterial()\n              : new MeshDistanceMaterial(),\n            options\n          );\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return distanceMaterial\n      }\n    },\n\n    dispose: {\n      writable: true,\n      configurable: true,\n      value() {\n        const {_depthMaterial, _distanceMaterial} = this;\n        if (_depthMaterial) _depthMaterial.dispose();\n        if (_distanceMaterial) _distanceMaterial.dispose();\n        baseMaterial.dispose.call(this);\n      }\n    }\n  };\n\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\n  return new DerivedMaterial()\n}\n\n\nfunction upgradeShaders(material, {vertexShader, fragmentShader}, options, key) {\n  let {\n    vertexDefs,\n    vertexMainIntro,\n    vertexMainOutro,\n    vertexTransform,\n    fragmentDefs,\n    fragmentMainIntro,\n    fragmentMainOutro,\n    fragmentColorTransform,\n    customRewriter,\n    timeUniform\n  } = options;\n\n  vertexDefs = vertexDefs || '';\n  vertexMainIntro = vertexMainIntro || '';\n  vertexMainOutro = vertexMainOutro || '';\n  fragmentDefs = fragmentDefs || '';\n  fragmentMainIntro = fragmentMainIntro || '';\n  fragmentMainOutro = fragmentMainOutro || '';\n\n  // Expand includes if needed\n  if (vertexTransform || customRewriter) {\n    vertexShader = expandShaderIncludes(vertexShader);\n  }\n  if (fragmentColorTransform || customRewriter) {\n    // We need to be able to find postprocessing chunks after include expansion in order to\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n    // so we still mark them.\n    fragmentShader = fragmentShader.replace(\n      /^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,\n      '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n'\n    );\n    fragmentShader = expandShaderIncludes(fragmentShader);\n  }\n\n  // Apply custom rewriter function\n  if (customRewriter) {\n    let res = customRewriter({vertexShader, fragmentShader});\n    vertexShader = res.vertexShader;\n    fragmentShader = res.fragmentShader;\n  }\n\n  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n  // those and re-insert them into the outro in the correct place:\n  if (fragmentColorTransform) {\n    let postChunks = [];\n    fragmentShader = fragmentShader.replace(\n      /^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\n      match => {\n        postChunks.push(match);\n        return ''\n      }\n    );\n    fragmentMainOutro = `${fragmentColorTransform}\\n${postChunks.join('\\n')}\\n${fragmentMainOutro}`;\n  }\n\n  // Inject auto-updating time uniform if requested\n  if (timeUniform) {\n    const code = `\\nuniform float ${timeUniform};\\n`;\n    vertexDefs = code + vertexDefs;\n    fragmentDefs = code + fragmentDefs;\n  }\n\n  // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n  if (vertexTransform) {\n    // Hoist these defs to the very top so they work in other function defs\n    vertexShader = `vec3 troika_position_${key};\nvec3 troika_normal_${key};\nvec2 troika_uv_${key};\n${vertexShader}\n`;\n    vertexDefs = `${vertexDefs}\nvoid troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {\n  ${vertexTransform}\n}\n`;\n    vertexMainIntro = `\ntroika_position_${key} = vec3(position);\ntroika_normal_${key} = vec3(normal);\ntroika_uv_${key} = vec2(uv);\ntroikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});\n${vertexMainIntro}\n`;\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, (match, match1, index, fullStr) => {\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`\n    });\n\n    // Three r152 introduced the MAP_UV token, replace it too if it's pointing to the main 'uv'\n    // Perhaps the other textures too going forward?\n    if (!(material.map && material.map.channel > 0)) {\n      vertexShader = vertexShader.replace(/\\bMAP_UV\\b/g, `troika_uv_${key}`);\n    }\n  }\n\n  // Inject defs and intro/outro snippets\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n\n  return {\n    vertexShader,\n    fragmentShader\n  }\n}\n\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n  if (intro || outro || defs) {\n    shaderCode = shaderCode.replace(voidMainRegExp, `\n${defs}\nvoid troikaOrigMain${id}() {`\n    );\n    shaderCode += `\nvoid main() {\n  ${intro}\n  troikaOrigMain${id}();\n  ${outro}\n}`;\n  }\n  return shaderCode\n}\n\n\nfunction optionsJsonReplacer(key, value) {\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value\n}\n\nlet _idCtr = 0;\nconst optionsHashesToIds = new Map();\nfunction getKeyForOptions(options) {\n  const optionsHash = JSON.stringify(options, optionsJsonReplacer);\n  let id = optionsHashesToIds.get(optionsHash);\n  if (id == null) {\n    optionsHashesToIds.set(optionsHash, (id = ++_idCtr));\n  }\n  return id\n}\n\n// Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n// TODO how can we keep this from getting stale?\nconst MATERIAL_TYPES_TO_SHADERS = {\n  MeshDepthMaterial: 'depth',\n  MeshDistanceMaterial: 'distanceRGBA',\n  MeshNormalMaterial: 'normal',\n  MeshBasicMaterial: 'basic',\n  MeshLambertMaterial: 'lambert',\n  MeshPhongMaterial: 'phong',\n  MeshToonMaterial: 'toon',\n  MeshStandardMaterial: 'physical',\n  MeshPhysicalMaterial: 'physical',\n  MeshMatcapMaterial: 'matcap',\n  LineBasicMaterial: 'basic',\n  LineDashedMaterial: 'dashed',\n  PointsMaterial: 'points',\n  ShadowMaterial: 'shadow',\n  SpriteMaterial: 'sprite'\n};\n\n/**\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\n * used to render that material.\n *\n * @param material - the Material instance\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\n */\nfunction getShadersForMaterial(material) {\n  let builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n  return builtinType ? ShaderLib[builtinType] : material //TODO fallback for unknown type?\n}\n\n/**\n * Find all uniforms and their types within a shader code string.\n *\n * @param {string} shader - The shader code to parse\n * @return {object} mapping of uniform names to their glsl type\n */\nfunction getShaderUniformTypes(shader) {\n  let uniformRE = /\\buniform\\s+(int|float|vec[234]|mat[34])\\s+([A-Za-z_][\\w]*)/g;\n  let uniforms = Object.create(null);\n  let match;\n  while ((match = uniformRE.exec(shader)) !== null) {\n    uniforms[match[2]] = match[1];\n  }\n  return uniforms\n}\n\n/**\n * Helper for smoothing out the `m.getInverse(x)` --> `m.copy(x).invert()` conversion\n * that happened in ThreeJS r123.\n * @param {Matrix4} srcMatrix\n * @param {Matrix4} [tgtMatrix]\n */\nfunction invertMatrix4(srcMatrix, tgtMatrix = new Matrix4()) {\n  if (typeof tgtMatrix.invert === 'function') {\n    tgtMatrix.copy(srcMatrix).invert();\n  } else {\n    tgtMatrix.getInverse(srcMatrix);\n  }\n  return tgtMatrix\n}\n\n/*\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\ndivided into a reasonable number of height segments.\n*/\n\nconst vertexDefs = `\nuniform vec3 pointA;\nuniform vec3 controlA;\nuniform vec3 controlB;\nuniform vec3 pointB;\nuniform float radius;\nvarying float bezierT;\n\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\n  float t2 = 1.0 - t;\n  float b0 = t2 * t2 * t2;\n  float b1 = 3.0 * t * t2 * t2;\n  float b2 = 3.0 * t * t * t2;\n  float b3 = t * t * t;\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\n}\n\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\n  float t2 = 1.0 - t;\n  return -3.0 * p1 * t2 * t2 +\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\n    3.0 * p2 * t * t;\n}\n`;\n\nconst vertexTransform = `\nfloat t = position.y;\nbezierT = t;\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\n\n// Make \"sideways\" always perpendicular to the camera ray; this ensures that any twists\n// in the cylinder occur where you won't see them: \nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\nif (bezierDir == viewDirection) {\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\n}\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\nvec3 upish = normalize(cross(sideways, bezierDir));\n\n// Build a matrix for transforming this disc in the cylinder:\nmat4 discTx;\ndiscTx[0].xyz = sideways * radius;\ndiscTx[1].xyz = bezierDir * radius;\ndiscTx[2].xyz = upish * radius;\ndiscTx[3].xyz = bezierCenterPos;\ndiscTx[3][3] = 1.0;\n\n// Apply transform, ignoring original y\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\nnormal = normalize(mat3(discTx) * normal);\n`;\n\nconst fragmentDefs = `\nuniform vec3 dashing;\nvarying float bezierT;\n`;\n\nconst fragmentMainIntro = `\nif (dashing.x + dashing.y > 0.0) {\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\n  if (dashFrac > dashing.x) {\n    discard;\n  }\n}\n`;\n\n// Debugging: separate color for each of the 6 sides:\n// const fragmentColorTransform = `\n// float sideNum = floor(vUV.x * 6.0);\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n//   vec3(1.0, 0.0, 1.0);\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n// `\n\n\n\nfunction createBezierMeshMaterial(baseMaterial) {\n  return createDerivedMaterial(\n    baseMaterial,\n    {\n      chained: true,\n      uniforms: {\n        pointA: {value: new Vector3()},\n        controlA: {value: new Vector3()},\n        controlB: {value: new Vector3()},\n        pointB: {value: new Vector3()},\n        radius: {value: 0.01},\n        dashing: {value: new Vector3()} //on, off, offset\n      },\n      vertexDefs,\n      vertexTransform,\n      fragmentDefs,\n      fragmentMainIntro\n    }\n  )\n}\n\nlet geometry = null;\n\nconst defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({color: 0xffffff, side: DoubleSide});\n\n\n/**\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\n * automatically.\n *\n * The cubiz bezier path is determined by its four `Vector3` properties:\n * - `pointA`\n * - `controlA`\n * - `controlB`\n * - `pointB`\n *\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\n *\n * You can also give the tube a dashed appearance with two properties:\n *\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\n *   used as input to the cubic bezier function, not its visible length.)\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\n *\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\n * thicker tubes.\n *\n * TODO: proper geometry bounding sphere and raycasting\n * TODO: allow control of the geometry's segment counts\n */\nclass BezierMesh extends Mesh {\n  static getGeometry() {\n    return geometry || (geometry =\n      new CylinderGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0)\n    )\n  }\n\n  constructor() {\n    super(\n      BezierMesh.getGeometry(),\n      defaultBaseMaterial\n    );\n\n    this.pointA = new Vector3();\n    this.controlA = new Vector3();\n    this.controlB = new Vector3();\n    this.pointB = new Vector3();\n    this.radius = 0.01;\n    this.dashArray = new Vector2();\n    this.dashOffset = 0;\n\n    // TODO - disabling frustum culling until I figure out how to customize the\n    //  geometry's bounding sphere that gets used\n    this.frustumCulled = false;\n  }\n\n  // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n  get material() {\n    let derivedMaterial = this._derivedMaterial;\n    const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\n    if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n      derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\n      // dispose the derived material when its base material is disposed:\n      baseMaterial.addEventListener('dispose', function onDispose() {\n        baseMaterial.removeEventListener('dispose', onDispose);\n        derivedMaterial.dispose();\n      });\n    }\n    return derivedMaterial\n  }\n  set material(baseMaterial) {\n    this._baseMaterial = baseMaterial;\n  }\n\n  // Create and update material for shadows upon request:\n  get customDepthMaterial() {\n    return this.material.getDepthMaterial()\n  }\n  get customDistanceMaterial() {\n    return this.material.getDistanceMaterial()\n  }\n\n  onBeforeRender() {\n    const {uniforms} = this.material;\n    const {pointA, controlA, controlB, pointB, radius, dashArray, dashOffset} = this;\n    uniforms.pointA.value.copy(pointA);\n    uniforms.controlA.value.copy(controlA);\n    uniforms.controlB.value.copy(controlB);\n    uniforms.pointB.value.copy(pointB);\n    uniforms.radius.value = radius;\n    uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n  }\n\n  raycast(/*raycaster, intersects*/) {\n    // TODO - just fail for now\n  }\n}\n\nexport { BezierMesh, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, invertMatrix4, voidMainRegExp };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}