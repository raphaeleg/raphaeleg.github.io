{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nconst GridMaterial = shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: new THREE.Color(),\n  sectionColor: new THREE.Color(),\n  infiniteGrid: false,\n  followCamera: false\n},\n/* glsl */\n`\n    varying vec3 worldPosition;\n    uniform float fadeDistance;\n    uniform bool infiniteGrid;\n    uniform bool followCamera;\n\n    void main() {\n      worldPosition = position.xzy;\n      if (infiniteGrid) worldPosition *= 1.0 + fadeDistance;\n      if (followCamera) worldPosition.xz +=cameraPosition.xz;\n\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(worldPosition, 1.0);\n    }\n  `,\n/* glsl */\n`\n    varying vec3 worldPosition;\n    uniform float cellSize;\n    uniform float sectionSize;\n    uniform vec3 cellColor;\n    uniform vec3 sectionColor;\n    uniform float fadeDistance;\n    uniform float fadeStrength;\n    uniform float cellThickness;\n    uniform float sectionThickness;\n\n    float getGrid(float size, float thickness) {\n      vec2 r = worldPosition.xz / size;\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n      float line = min(grid.x, grid.y) + 1. - thickness;\n      return 1.0 - min(line, 1.);\n    }\n\n    void main() {\n      float g1 = getGrid(cellSize, cellThickness);\n      float g2 = getGrid(sectionSize, sectionThickness);\n\n      float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);\n      vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));\n\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n      if (gl_FragColor.a <= 0.0) discard;\n\n      #include <tonemapping_fragment>\n      #include <encodings_fragment>\n    }\n  `);\nconst Grid = /*#__PURE__*/React.forwardRef((_ref, fRef) => {\n  let {\n    args,\n    cellColor = '#000000',\n    sectionColor = '#2080ff',\n    cellSize = 0.5,\n    sectionSize = 1,\n    followCamera = false,\n    infiniteGrid = false,\n    fadeDistance = 100,\n    fadeStrength = 1,\n    cellThickness = 0.5,\n    sectionThickness = 1,\n    side = THREE.BackSide,\n    ...props\n  } = _ref;\n  extend({\n    GridMaterial\n  });\n  const uniforms1 = {\n    cellSize,\n    sectionSize,\n    cellColor,\n    sectionColor,\n    cellThickness,\n    sectionThickness\n  };\n  const uniforms2 = {\n    fadeDistance,\n    fadeStrength,\n    infiniteGrid,\n    followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: fRef,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: side\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\nexport { Grid };","map":{"version":3,"names":["_extends","React","THREE","extend","shaderMaterial","GridMaterial","cellSize","sectionSize","fadeDistance","fadeStrength","cellThickness","sectionThickness","cellColor","Color","sectionColor","infiniteGrid","followCamera","Grid","forwardRef","fRef","args","side","BackSide","props","uniforms1","uniforms2","createElement","ref","frustumCulled","transparent"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/@react-three/drei/core/Grid.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\n\nconst GridMaterial = shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: new THREE.Color(),\n  sectionColor: new THREE.Color(),\n  infiniteGrid: false,\n  followCamera: false\n},\n/* glsl */\n`\n    varying vec3 worldPosition;\n    uniform float fadeDistance;\n    uniform bool infiniteGrid;\n    uniform bool followCamera;\n\n    void main() {\n      worldPosition = position.xzy;\n      if (infiniteGrid) worldPosition *= 1.0 + fadeDistance;\n      if (followCamera) worldPosition.xz +=cameraPosition.xz;\n\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(worldPosition, 1.0);\n    }\n  `,\n/* glsl */\n`\n    varying vec3 worldPosition;\n    uniform float cellSize;\n    uniform float sectionSize;\n    uniform vec3 cellColor;\n    uniform vec3 sectionColor;\n    uniform float fadeDistance;\n    uniform float fadeStrength;\n    uniform float cellThickness;\n    uniform float sectionThickness;\n\n    float getGrid(float size, float thickness) {\n      vec2 r = worldPosition.xz / size;\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n      float line = min(grid.x, grid.y) + 1. - thickness;\n      return 1.0 - min(line, 1.);\n    }\n\n    void main() {\n      float g1 = getGrid(cellSize, cellThickness);\n      float g2 = getGrid(sectionSize, sectionThickness);\n\n      float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);\n      vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));\n\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n      if (gl_FragColor.a <= 0.0) discard;\n\n      #include <tonemapping_fragment>\n      #include <encodings_fragment>\n    }\n  `);\nconst Grid = /*#__PURE__*/React.forwardRef(({\n  args,\n  cellColor = '#000000',\n  sectionColor = '#2080ff',\n  cellSize = 0.5,\n  sectionSize = 1,\n  followCamera = false,\n  infiniteGrid = false,\n  fadeDistance = 100,\n  fadeStrength = 1,\n  cellThickness = 0.5,\n  sectionThickness = 1,\n  side = THREE.BackSide,\n  ...props\n}, fRef) => {\n  extend({\n    GridMaterial\n  });\n  const uniforms1 = {\n    cellSize,\n    sectionSize,\n    cellColor,\n    sectionColor,\n    cellThickness,\n    sectionThickness\n  };\n  const uniforms2 = {\n    fadeDistance,\n    fadeStrength,\n    infiniteGrid,\n    followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: fRef,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: side\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\n\nexport { Grid };\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,MAAMC,YAAY,GAAGD,cAAc,CAAC;EAClCE,QAAQ,EAAE,GADwB;EAElCC,WAAW,EAAE,CAFqB;EAGlCC,YAAY,EAAE,GAHoB;EAIlCC,YAAY,EAAE,CAJoB;EAKlCC,aAAa,EAAE,GALmB;EAMlCC,gBAAgB,EAAE,CANgB;EAOlCC,SAAS,EAAE,IAAIV,KAAK,CAACW,KAAV,EAPuB;EAQlCC,YAAY,EAAE,IAAIZ,KAAK,CAACW,KAAV,EARoB;EASlCE,YAAY,EAAE,KAToB;EAUlCC,YAAY,EAAE;AAVoB,CAAD;AAYnC;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA1BmC;AA2BnC;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA5DmC,CAAnC;AA6DA,MAAMC,IAAI,GAAG,aAAahB,KAAK,CAACiB,UAAN,CAAiB,OAcxCC,IAdwC,KAc/B;EAAA,IAdgC;IAC1CC,IAD0C;IAE1CR,SAAS,GAAG,SAF8B;IAG1CE,YAAY,GAAG,SAH2B;IAI1CR,QAAQ,GAAG,GAJ+B;IAK1CC,WAAW,GAAG,CAL4B;IAM1CS,YAAY,GAAG,KAN2B;IAO1CD,YAAY,GAAG,KAP2B;IAQ1CP,YAAY,GAAG,GAR2B;IAS1CC,YAAY,GAAG,CAT2B;IAU1CC,aAAa,GAAG,GAV0B;IAW1CC,gBAAgB,GAAG,CAXuB;IAY1CU,IAAI,GAAGnB,KAAK,CAACoB,QAZ6B;IAa1C,GAAGC;EAbuC,CAchC;EACVpB,MAAM,CAAC;IACLE;EADK,CAAD,CAAN;EAGA,MAAMmB,SAAS,GAAG;IAChBlB,QADgB;IAEhBC,WAFgB;IAGhBK,SAHgB;IAIhBE,YAJgB;IAKhBJ,aALgB;IAMhBC;EANgB,CAAlB;EAQA,MAAMc,SAAS,GAAG;IAChBjB,YADgB;IAEhBC,YAFgB;IAGhBM,YAHgB;IAIhBC;EAJgB,CAAlB;EAMA,OAAO,aAAaf,KAAK,CAACyB,aAAN,CAAoB,MAApB,EAA4B1B,QAAQ,CAAC;IACvD2B,GAAG,EAAER,IADkD;IAEvDS,aAAa,EAAE;EAFwC,CAAD,EAGrDL,KAHqD,CAApC,EAGT,aAAatB,KAAK,CAACyB,aAAN,CAAoB,cAApB,EAAoC1B,QAAQ,CAAC;IACnE6B,WAAW,EAAE,IADsD;IAEnE,0BAA0B,IAFyC;IAGnER,IAAI,EAAEA;EAH6D,CAAD,EAIjEG,SAJiE,EAItDC,SAJsD,CAA5C,CAHJ,EAOO,aAAaxB,KAAK,CAACyB,aAAN,CAAoB,eAApB,EAAqC;IAC3EN,IAAI,EAAEA;EADqE,CAArC,CAPpB,CAApB;AAUD,CA1CyB,CAA1B;AA4CA,SAASH,IAAT"},"metadata":{},"sourceType":"module"}