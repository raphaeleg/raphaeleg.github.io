{"ast":null,"code":"import { ExtrudeGeometry } from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text) {\n    let parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n\n    if (font === undefined) {\n      super(); // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, size, {\n        lineHeight,\n        letterSpacing\n      });\n      super(shapes, { ...rest,\n        bevelEnabled,\n        bevelSize,\n        bevelThickness,\n        depth: height\n      });\n    }\n\n    this.type = 'TextGeometry';\n  }\n\n}\n\nexport { TextGeometry as TextBufferGeometry, TextGeometry };","map":{"version":3,"names":["ExtrudeGeometry","TextGeometry","constructor","text","parameters","bevelEnabled","bevelSize","bevelThickness","font","height","size","lineHeight","letterSpacing","rest","undefined","shapes","generateShapes","depth","type","TextBufferGeometry"],"sources":["/Users/crushedsummers/Documents/GitHub/raphaeleg.github.io/node_modules/three-stdlib/geometries/TextGeometry.js"],"sourcesContent":["import { ExtrudeGeometry } from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters = {}) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n\n    if (font === undefined) {\n      super(); // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, size, {\n        lineHeight,\n        letterSpacing\n      });\n      super(shapes, { ...rest,\n        bevelEnabled,\n        bevelSize,\n        bevelThickness,\n        depth: height\n      });\n    }\n\n    this.type = 'TextGeometry';\n  }\n\n}\n\nexport { TextGeometry as TextBufferGeometry, TextGeometry };\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,MAAMC,YAAN,SAA2BD,eAA3B,CAA2C;EACzCE,WAAW,CAACC,IAAD,EAAwB;IAAA,IAAjBC,UAAiB,uEAAJ,EAAI;IACjC,MAAM;MACJC,YAAY,GAAG,KADX;MAEJC,SAAS,GAAG,CAFR;MAGJC,cAAc,GAAG,EAHb;MAIJC,IAJI;MAKJC,MAAM,GAAG,EALL;MAMJC,IAAI,GAAG,GANH;MAOJC,UAAU,GAAG,CAPT;MAQJC,aAAa,GAAG,CARZ;MASJ,GAAGC;IATC,IAUFT,UAVJ;;IAYA,IAAII,IAAI,KAAKM,SAAb,EAAwB;MACtB,QADsB,CACb;IACV,CAFD,MAEO;MACL,MAAMC,MAAM,GAAGP,IAAI,CAACQ,cAAL,CAAoBb,IAApB,EAA0BO,IAA1B,EAAgC;QAC7CC,UAD6C;QAE7CC;MAF6C,CAAhC,CAAf;MAIA,MAAMG,MAAN,EAAc,EAAE,GAAGF,IAAL;QACZR,YADY;QAEZC,SAFY;QAGZC,cAHY;QAIZU,KAAK,EAAER;MAJK,CAAd;IAMD;;IAED,KAAKS,IAAL,GAAY,cAAZ;EACD;;AA9BwC;;AAkC3C,SAASjB,YAAY,IAAIkB,kBAAzB,EAA6ClB,YAA7C"},"metadata":{},"sourceType":"module"}