{"ast":null,"code":"import _toArray from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _objectWithoutProperties from \"/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"font\", \"letterSpacing\", \"lineHeight\", \"size\", \"height\", \"bevelThickness\", \"bevelSize\", \"bevelEnabled\", \"bevelOffset\", \"bevelSegments\", \"curveSegments\", \"smooth\", \"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { TextGeometry, mergeVertices } from 'three-stdlib';\nimport { useFont } from './useFont.js';\nvar types = ['string', 'number'];\n\nvar getTextFromChildren = function getTextFromChildren(children) {\n  var label = '';\n  var rest = [];\n  React.Children.forEach(children, function (child) {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label].concat(rest);\n};\n\nvar Text3D = /*#__PURE__*/React.forwardRef(function (_ref, fref) {\n  var _font = _ref.font,\n      _ref$letterSpacing = _ref.letterSpacing,\n      letterSpacing = _ref$letterSpacing === void 0 ? 0 : _ref$letterSpacing,\n      _ref$lineHeight = _ref.lineHeight,\n      lineHeight = _ref$lineHeight === void 0 ? 1 : _ref$lineHeight,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 1 : _ref$size,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 0.2 : _ref$height,\n      _ref$bevelThickness = _ref.bevelThickness,\n      bevelThickness = _ref$bevelThickness === void 0 ? 0.1 : _ref$bevelThickness,\n      _ref$bevelSize = _ref.bevelSize,\n      bevelSize = _ref$bevelSize === void 0 ? 0.01 : _ref$bevelSize,\n      _ref$bevelEnabled = _ref.bevelEnabled,\n      bevelEnabled = _ref$bevelEnabled === void 0 ? false : _ref$bevelEnabled,\n      _ref$bevelOffset = _ref.bevelOffset,\n      bevelOffset = _ref$bevelOffset === void 0 ? 0 : _ref$bevelOffset,\n      _ref$bevelSegments = _ref.bevelSegments,\n      bevelSegments = _ref$bevelSegments === void 0 ? 4 : _ref$bevelSegments,\n      _ref$curveSegments = _ref.curveSegments,\n      curveSegments = _ref$curveSegments === void 0 ? 8 : _ref$curveSegments,\n      smooth = _ref.smooth,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  React.useMemo(function () {\n    return extend({\n      RenamedTextGeometry: TextGeometry\n    });\n  }, []);\n  var ref = React.useRef(null);\n  var font = useFont(_font);\n  var opts = useMemo(function () {\n    return {\n      font: font,\n      size: size,\n      height: height,\n      bevelThickness: bevelThickness,\n      bevelSize: bevelSize,\n      bevelEnabled: bevelEnabled,\n      bevelSegments: bevelSegments,\n      bevelOffset: bevelOffset,\n      curveSegments: curveSegments,\n      letterSpacing: letterSpacing,\n      lineHeight: lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  var _useMemo = useMemo(function () {\n    return getTextFromChildren(children);\n  }, [children]),\n      _useMemo2 = _toArray(_useMemo),\n      label = _useMemo2[0],\n      rest = _useMemo2.slice(1);\n\n  var args = React.useMemo(function () {\n    return [label, opts];\n  }, [label, opts]);\n  React.useLayoutEffect(function () {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, function () {\n    return ref.current;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\nexport { Text3D };","map":{"version":3,"names":["_extends","React","useMemo","extend","TextGeometry","mergeVertices","useFont","types","getTextFromChildren","children","label","rest","Children","forEach","child","includes","push","Text3D","forwardRef","fref","_font","font","letterSpacing","lineHeight","size","height","bevelThickness","bevelSize","bevelEnabled","bevelOffset","bevelSegments","curveSegments","smooth","props","RenamedTextGeometry","ref","useRef","opts","args","useLayoutEffect","current","geometry","computeVertexNormals","useImperativeHandle","createElement"],"sources":["/Users/crushedsummers/Desktop/Work/Application/portfolio22/node_modules/@react-three/drei/core/Text3D.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { TextGeometry, mergeVertices } from 'three-stdlib';\nimport { useFont } from './useFont.js';\n\nconst types = ['string', 'number'];\n\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\n\nconst Text3D = /*#__PURE__*/React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  smooth,\n  children,\n  ...props\n}, fref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const ref = React.useRef(null);\n  const font = useFont(_font);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  React.useLayoutEffect(() => {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\n\nexport { Text3D };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}